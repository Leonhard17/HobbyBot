
HobbyBot_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b444  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800b580  0800b580  0000c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b7c0  0800b7c0  0000c7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b7c8  0800b7c8  0000c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b7cc  0800b7cc  0000c7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  20000008  0800b7d0  0000d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c94  20000170  0800b938  0000d170  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001e04  0800b938  0000de04  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d81d  00000000  00000000  0000d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000432d  00000000  00000000  0002a9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c18  00000000  00000000  0002ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001561  00000000  00000000  00030908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000252a0  00000000  00000000  00031e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e4a5  00000000  00000000  00057109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ddf59  00000000  00000000  000755ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00153507  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000779c  00000000  00000000  0015354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  0015ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000170 	.word	0x20000170
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b568 	.word	0x0800b568

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000174 	.word	0x20000174
 8000178:	0800b568 	.word	0x0800b568

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96a 	b.w	8000468 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fa1f f68c 	uxth.w	r6, ip
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ea:	fb07 1114 	mls	r1, r7, r4, r1
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8112 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810f 	bls.w	800042a <__udivmoddi4+0x27e>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fa1f f38e 	uxth.w	r3, lr
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000222:	fb00 f606 	mul.w	r6, r0, r6
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fc 	bcs.w	800042e <__udivmoddi4+0x282>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f9 	bls.w	800042e <__udivmoddi4+0x282>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	1b9b      	subs	r3, r3, r6
 8000242:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80f0 	bcc.w	8000458 <__udivmoddi4+0x2ac>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 8090 	bne.w	80003b0 <__udivmoddi4+0x204>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	fa1f f78c 	uxth.w	r7, ip
 800029c:	2101      	movs	r1, #1
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	fb07 f006 	mul.w	r0, r7, r6
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cd 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	fb00 f707 	mul.w	r7, r0, r7
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80b0 	bhi.w	8000452 <__udivmoddi4+0x2a6>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0620 	rsb	r6, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 f706 	lsr.w	r7, r2, r6
 8000306:	431f      	orrs	r7, r3
 8000308:	fa20 fc06 	lsr.w	ip, r0, r6
 800030c:	fa04 f301 	lsl.w	r3, r4, r1
 8000310:	ea43 030c 	orr.w	r3, r3, ip
 8000314:	40f4      	lsrs	r4, r6
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	0c38      	lsrs	r0, r7, #16
 800031c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000320:	fbb4 fef0 	udiv	lr, r4, r0
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fb00 441e 	mls	r4, r0, lr, r4
 800032c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000330:	fb0e f90c 	mul.w	r9, lr, ip
 8000334:	45a1      	cmp	r9, r4
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000342:	f080 8084 	bcs.w	800044e <__udivmoddi4+0x2a2>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f240 8081 	bls.w	800044e <__udivmoddi4+0x2a2>
 800034c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000350:	443c      	add	r4, r7
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	fa1f f983 	uxth.w	r9, r3
 800035a:	fbb4 f3f0 	udiv	r3, r4, r0
 800035e:	fb00 4413 	mls	r4, r0, r3, r4
 8000362:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000366:	fb03 fc0c 	mul.w	ip, r3, ip
 800036a:	45a4      	cmp	ip, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x1d2>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f103 30ff 	add.w	r0, r3, #4294967295
 8000374:	d267      	bcs.n	8000446 <__udivmoddi4+0x29a>
 8000376:	45a4      	cmp	ip, r4
 8000378:	d965      	bls.n	8000446 <__udivmoddi4+0x29a>
 800037a:	3b02      	subs	r3, #2
 800037c:	443c      	add	r4, r7
 800037e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000382:	fba0 9302 	umull	r9, r3, r0, r2
 8000386:	eba4 040c 	sub.w	r4, r4, ip
 800038a:	429c      	cmp	r4, r3
 800038c:	46ce      	mov	lr, r9
 800038e:	469c      	mov	ip, r3
 8000390:	d351      	bcc.n	8000436 <__udivmoddi4+0x28a>
 8000392:	d04e      	beq.n	8000432 <__udivmoddi4+0x286>
 8000394:	b155      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000396:	ebb8 030e 	subs.w	r3, r8, lr
 800039a:	eb64 040c 	sbc.w	r4, r4, ip
 800039e:	fa04 f606 	lsl.w	r6, r4, r6
 80003a2:	40cb      	lsrs	r3, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e750      	b.n	8000252 <__udivmoddi4+0xa6>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f103 	lsr.w	r1, r0, r3
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	fa24 f303 	lsr.w	r3, r4, r3
 80003c0:	4094      	lsls	r4, r2
 80003c2:	430c      	orrs	r4, r1
 80003c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3110 	mls	r1, r8, r0, r3
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x24c>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29e>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29e>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000400:	fb08 3311 	mls	r3, r8, r1, r3
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x276>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x296>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x296>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e739      	b.n	800029e <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f0      	b.n	8000210 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e706      	b.n	8000240 <__udivmoddi4+0x94>
 8000432:	45c8      	cmp	r8, r9
 8000434:	d2ae      	bcs.n	8000394 <__udivmoddi4+0x1e8>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb63 0c07 	sbc.w	ip, r3, r7
 800043e:	3801      	subs	r0, #1
 8000440:	e7a8      	b.n	8000394 <__udivmoddi4+0x1e8>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x276>
 8000446:	4603      	mov	r3, r0
 8000448:	e799      	b.n	800037e <__udivmoddi4+0x1d2>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x24c>
 800044e:	46d6      	mov	lr, sl
 8000450:	e77f      	b.n	8000352 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74d      	b.n	80002f4 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e70f      	b.n	8000280 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e730      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <PCA9685_SetBit>:
	}else{
		return PCA9685_ERROR;
	}
}

PCA9685_STATUS PCA9685_SetBit(PCA9685_HandleTypeDef* hpca9685, uint8_t addres, uint8_t Bit, uint8_t Value){
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af04      	add	r7, sp, #16
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	4608      	mov	r0, r1
 8000476:	4611      	mov	r1, r2
 8000478:	461a      	mov	r2, r3
 800047a:	4603      	mov	r3, r0
 800047c:	70fb      	strb	r3, [r7, #3]
 800047e:	460b      	mov	r3, r1
 8000480:	70bb      	strb	r3, [r7, #2]
 8000482:	4613      	mov	r3, r2
 8000484:	707b      	strb	r3, [r7, #1]
	// create variable to store the new value
	uint8_t tempByte;
	// check if Value is a binary, else set to 0
	Value = (Value != 0) ? 1 : 0;
 8000486:	787b      	ldrb	r3, [r7, #1]
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf14      	ite	ne
 800048c:	2301      	movne	r3, #1
 800048e:	2300      	moveq	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	707b      	strb	r3, [r7, #1]

	if(HAL_I2C_Mem_Read(hpca9685->i2c_handle, hpca9685->device_address, addres, 1, &tempByte, 1, PCA9685_I2C_TIMEOUT) != HAL_OK){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	8899      	ldrh	r1, [r3, #4]
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	2301      	movs	r3, #1
 80004a2:	9302      	str	r3, [sp, #8]
 80004a4:	2301      	movs	r3, #1
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	f107 030f 	add.w	r3, r7, #15
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	f001 fa52 	bl	8001958 <HAL_I2C_Mem_Read>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <PCA9685_SetBit+0x52>
		// error while receiving
		return PCA9685_ERROR;
 80004ba:	2301      	movs	r3, #1
 80004bc:	e04f      	b.n	800055e <PCA9685_SetBit+0xf2>
	}
	// prepare data
	if(addres == PCA9685_MODE1){
 80004be:	78fb      	ldrb	r3, [r7, #3]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d11d      	bne.n	8000500 <PCA9685_SetBit+0x94>
		// set the bit and restart in one operation
		tempByte &= ~(MODE1_RESTART|(1<<Bit)); // clear the restart bit and our target bit
 80004c4:	78bb      	ldrb	r3, [r7, #2]
 80004c6:	2201      	movs	r2, #1
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4013      	ands	r3, r2
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]
		tempByte |= (Value&1)<<Bit; // set the bit to the desired value
 80004e4:	787b      	ldrb	r3, [r7, #1]
 80004e6:	f003 0201 	and.w	r2, r3, #1
 80004ea:	78bb      	ldrb	r3, [r7, #2]
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	73fb      	strb	r3, [r7, #15]
 80004fe:	e018      	b.n	8000532 <PCA9685_SetBit+0xc6>
	}else{
		// set the byte
		tempByte &= ~1<<Bit;
 8000500:	78bb      	ldrb	r3, [r7, #2]
 8000502:	f06f 0201 	mvn.w	r2, #1
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	b25a      	sxtb	r2, r3
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	b25b      	sxtb	r3, r3
 8000510:	4013      	ands	r3, r2
 8000512:	b25b      	sxtb	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	73fb      	strb	r3, [r7, #15]
		tempByte |= (Value&1)<<Bit;
 8000518:	787b      	ldrb	r3, [r7, #1]
 800051a:	f003 0201 	and.w	r2, r3, #1
 800051e:	78bb      	ldrb	r3, [r7, #2]
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	b25a      	sxtb	r2, r3
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	b25b      	sxtb	r3, r3
 800052a:	4313      	orrs	r3, r2
 800052c:	b25b      	sxtb	r3, r3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	73fb      	strb	r3, [r7, #15]
	}
	// transmit
	if(HAL_I2C_Mem_Write(hpca9685->i2c_handle, hpca9685->device_address, addres, 1, &tempByte, 1, PCA9685_I2C_TIMEOUT) == HAL_OK){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	8899      	ldrh	r1, [r3, #4]
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	b29a      	uxth	r2, r3
 800053e:	2301      	movs	r3, #1
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	2301      	movs	r3, #1
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	f107 030f 	add.w	r3, r7, #15
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2301      	movs	r3, #1
 800054e:	f001 f8ef 	bl	8001730 <HAL_I2C_Mem_Write>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d101      	bne.n	800055c <PCA9685_SetBit+0xf0>
		return PCA9685_OK;
 8000558:	2300      	movs	r3, #0
 800055a:	e000      	b.n	800055e <PCA9685_SetBit+0xf2>
	}else{
		return PCA9685_ERROR;
 800055c:	2301      	movs	r3, #1
	}
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <PCA9685_Init>:

// Function to initialise the PCA9685
PCA9685_STATUS PCA9685_Init(PCA9685_HandleTypeDef* hpca9685) {
 8000566:	b580      	push	{r7, lr}
 8000568:	b088      	sub	sp, #32
 800056a:	af04      	add	r7, sp, #16
 800056c:	6078      	str	r0, [r7, #4]
	// set frequency to 50Hz
	uint8_t Prescale = PCA9685_PRE_SCALE_50;
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(hpca9685->i2c_handle, hpca9685->device_address, PCA9685_PRE_SCALE, 1, &Prescale, 1, PCA9685_I2C_TIMEOUT) != HAL_OK){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	8899      	ldrh	r1, [r3, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	f107 030f 	add.w	r3, r7, #15
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	22fe      	movs	r2, #254	@ 0xfe
 800058c:	f001 f8d0 	bl	8001730 <HAL_I2C_Mem_Write>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <PCA9685_Init+0x34>
		return PCA9685_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e01b      	b.n	80005d2 <PCA9685_Init+0x6c>
	}
	// create variable to store the new value
	uint8_t tempByte = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	73bb      	strb	r3, [r7, #14]
	// Prepare Byte
	tempByte |=  (MODE1_AI | MODE1_ALLCALL);
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	73bb      	strb	r3, [r7, #14]
	// send to mode1 register mode2 can be left in default state
	if(HAL_I2C_Mem_Write(hpca9685->i2c_handle, hpca9685->device_address, PCA9685_MODE1, 1, &tempByte, 1, PCA9685_I2C_TIMEOUT) == HAL_OK){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	8899      	ldrh	r1, [r3, #4]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2301      	movs	r3, #1
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f107 030e 	add.w	r3, r7, #14
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	2200      	movs	r2, #0
 80005c2:	f001 f8b5 	bl	8001730 <HAL_I2C_Mem_Write>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d101      	bne.n	80005d0 <PCA9685_Init+0x6a>
		return PCA9685_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	e000      	b.n	80005d2 <PCA9685_Init+0x6c>
	}else{
		return PCA9685_ERROR;
 80005d0:	2301      	movs	r3, #1
	}
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <PCA9685_WakeUp>:
PCA9685_STATUS PCA9685_Sleep(PCA9685_HandleTypeDef* hpca9685) {
	return PCA9685_SetBit(hpca9685, PCA9685_MODE1, MODE1_SLEEP, 1);
}

// Function to wake up the PCA9685
PCA9685_STATUS PCA9685_WakeUp(PCA9685_HandleTypeDef* hpca9685) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	if(PCA9685_SetBit(hpca9685, PCA9685_MODE1, MODE1_SLEEP, 0) == PCA9685_OK){
 80005e2:	2300      	movs	r3, #0
 80005e4:	2210      	movs	r2, #16
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff3f 	bl	800046c <PCA9685_SetBit>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d104      	bne.n	80005fe <PCA9685_WakeUp+0x24>
		HAL_Delay(1); // Delay 1ms
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fd43 	bl	8001080 <HAL_Delay>
		return PCA9685_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <PCA9685_WakeUp+0x26>
	}else{
		return PCA9685_ERROR;
 80005fe:	2301      	movs	r3, #1
	}
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <PCA9685_SetPWM>:
		return PCA9685_OK;
	}
}

// Function to set the PWM value of a channel
PCA9685_STATUS PCA9685_SetPWM(PCA9685_HandleTypeDef* hpca9685, uint8_t channel, uint16_t onTime) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af04      	add	r7, sp, #16
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	4613      	mov	r3, r2
 8000616:	803b      	strh	r3, [r7, #0]
	uint8_t RegAddress;
	uint8_t ByteVals[4];

	// Off time isn't available since it is not required for Servo Control
	ByteVals[0] = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	723b      	strb	r3, [r7, #8]
	ByteVals[1] = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	727b      	strb	r3, [r7, #9]
	// Calculate Register Address and Values
	RegAddress = PCA9685_LED0_ON_L + (4*channel);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	3306      	adds	r3, #6
 8000628:	73fb      	strb	r3, [r7, #15]
	ByteVals[2] = onTime & 0xFF; // lower 8 bits
 800062a:	883b      	ldrh	r3, [r7, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	72bb      	strb	r3, [r7, #10]
	ByteVals[3] = onTime >> 8;
 8000630:	883b      	ldrh	r3, [r7, #0]
 8000632:	0a1b      	lsrs	r3, r3, #8
 8000634:	b29b      	uxth	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	72fb      	strb	r3, [r7, #11]


	// transmit
	if(HAL_I2C_Mem_Write(hpca9685->i2c_handle, hpca9685->device_address, RegAddress, 1, ByteVals, 4, PCA9685_I2C_TIMEOUT) != HAL_OK){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8899      	ldrh	r1, [r3, #4]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	b29a      	uxth	r2, r3
 8000646:	2301      	movs	r3, #1
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2304      	movs	r3, #4
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	f001 f86b 	bl	8001730 <HAL_I2C_Mem_Write>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <PCA9685_SetPWM+0x5c>
		return PCA9685_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <PCA9685_SetPWM+0x5e>
	}else{
		return PCA9685_OK;
 8000664:	2300      	movs	r3, #0
	}

}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <Map_AngleToPWM>:

uint32_t PCA9685_GetOscillatorFreq(PCA9685_HandleTypeDef* hpca9685) {
	return hpca9685->oscillator_frequency;
}

uint16_t Map_AngleToPWM(uint16_t angle) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
    // Map angle to PWM code
	if(angle >= PCA9685_SERVO_MAX_ANGLE){
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000680:	d302      	bcc.n	8000688 <Map_AngleToPWM+0x18>
		return(PCA9685_SERVO_MAX);
 8000682:	f240 2303 	movw	r3, #515	@ 0x203
 8000686:	e013      	b.n	80006b0 <Map_AngleToPWM+0x40>
	}else if(angle <= PCA9685_SERVO_MIN_ANGLE){
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <Map_AngleToPWM+0x22>
		return(PCA9685_SERVO_MIN);
 800068e:	2367      	movs	r3, #103	@ 0x67
 8000690:	e00e      	b.n	80006b0 <Map_AngleToPWM+0x40>
	}

	return (angle * (PCA9685_SERVO_MAX - PCA9685_SERVO_MIN) / (PCA9685_SERVO_MAX_ANGLE - PCA9685_SERVO_MIN_ANGLE)) + PCA9685_SERVO_MIN;
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	4a07      	ldr	r2, [pc, #28]	@ (80006bc <Map_AngleToPWM+0x4c>)
 800069e:	fb82 1203 	smull	r1, r2, r2, r3
 80006a2:	441a      	add	r2, r3
 80006a4:	1212      	asrs	r2, r2, #8
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	3367      	adds	r3, #103	@ 0x67
 80006ae:	b29b      	uxth	r3, r3
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	f2b9d649 	.word	0xf2b9d649

080006c0 <PCA9685_SetAngle>:

PCA9685_STATUS PCA9685_SetAngle(PCA9685_HandleTypeDef* hpca9685, uint8_t channel, uint16_t angle) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	803b      	strh	r3, [r7, #0]
    uint16_t pwm = Map_AngleToPWM(angle);
 80006d0:	883b      	ldrh	r3, [r7, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffcc 	bl	8000670 <Map_AngleToPWM>
 80006d8:	4603      	mov	r3, r0
 80006da:	81fb      	strh	r3, [r7, #14]
    if (PCA9685_SetPWM(hpca9685, channel, pwm) == PCA9685_OK){
 80006dc:	89fa      	ldrh	r2, [r7, #14]
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff90 	bl	8000608 <PCA9685_SetPWM>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <PCA9685_SetAngle+0x32>
    	return PCA9685_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <PCA9685_SetAngle+0x34>
    }else{
    	return PCA9685_ERROR;
 80006f2:	2301      	movs	r3, #1
    }
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800070c:	f023 0218 	bic.w	r2, r3, #24
 8000710:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4313      	orrs	r3, r2
 8000718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000734:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000744:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074c:	68fb      	ldr	r3, [r7, #12]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint32_t lastUpdate = HAL_GetTick();
 8000762:	f000 fc75 	bl	8001050 <HAL_GetTick>
 8000766:	60f8      	str	r0, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 fc04 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f888 	bl	8000880 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000770:	f000 f8fa 	bl	8000968 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f000 f9a2 	bl	8000abc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000778:	f000 f954 	bl	8000a24 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800077c:	f000 f912 	bl	80009a4 <MX_I2C3_Init>
  MX_USB_Device_Init();
 8000780:	f00a f8e2 	bl	800a948 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  USR_PCA9685_INIT(&hi2c3);
 8000784:	4839      	ldr	r0, [pc, #228]	@ (800086c <main+0x110>)
 8000786:	f000 f9db 	bl	8000b40 <USR_PCA9685_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // start the servo controller
  PCA9685_WakeUp(&servoController);
 800078a:	4839      	ldr	r0, [pc, #228]	@ (8000870 <main+0x114>)
 800078c:	f7ff ff25 	bl	80005da <PCA9685_WakeUp>
  // set starting positions
  for(int i = 0; i < 6; ++i){
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	e00c      	b.n	80007b0 <main+0x54>
   PCA9685_SetAngle(&servoController, i, angle[i]);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	b2d9      	uxtb	r1, r3
 800079a:	4a36      	ldr	r2, [pc, #216]	@ (8000874 <main+0x118>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4832      	ldr	r0, [pc, #200]	@ (8000870 <main+0x114>)
 80007a6:	f7ff ff8b 	bl	80006c0 <PCA9685_SetAngle>
  for(int i = 0; i < 6; ++i){
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b05      	cmp	r3, #5
 80007b4:	ddef      	ble.n	8000796 <main+0x3a>
  }

  while (1)
  {
	  //process new USB_Input
	  if(datareceived_flag == true){
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <main+0x11c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d004      	beq.n	80007c8 <main+0x6c>
		 datareceived_flag = false; // reset flag
 80007be:	4b2e      	ldr	r3, [pc, #184]	@ (8000878 <main+0x11c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
		 Process_User_Input();
 80007c4:	f000 f9ee 	bl	8000ba4 <Process_User_Input>
	  }

	  // smooth servo move
	  if((HAL_GetTick() - lastUpdate) > ServoAngleUpdateTime)
 80007c8:	f000 fc42 	bl	8001050 <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	2b14      	cmp	r3, #20
 80007d4:	d9ef      	bls.n	80007b6 <main+0x5a>
	  {
		  lastUpdate = HAL_GetTick();
 80007d6:	f000 fc3b 	bl	8001050 <HAL_GetTick>
 80007da:	60f8      	str	r0, [r7, #12]

		  // Update Servos
		  for(int i = 0; i < 6; ++i){
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	e03f      	b.n	8000862 <main+0x106>
		     // check if current angle matches target angle
			 if(angle[i] != currentAngle[i])
 80007e2:	4a24      	ldr	r2, [pc, #144]	@ (8000874 <main+0x118>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007ea:	4924      	ldr	r1, [pc, #144]	@ (800087c <main+0x120>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d032      	beq.n	800085c <main+0x100>
			 {
				 if(angle[i] < currentAngle[i]){
 80007f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000874 <main+0x118>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007fe:	491f      	ldr	r1, [pc, #124]	@ (800087c <main+0x120>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000806:	429a      	cmp	r2, r3
 8000808:	d20a      	bcs.n	8000820 <main+0xc4>
					 // move negative to target angle
					 currentAngle[i]--;
 800080a:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <main+0x120>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000812:	3b01      	subs	r3, #1
 8000814:	b299      	uxth	r1, r3
 8000816:	4a19      	ldr	r2, [pc, #100]	@ (800087c <main+0x120>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800081e:	e013      	b.n	8000848 <main+0xec>
				 }else if(angle[i] > currentAngle[i])
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <main+0x118>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000828:	4914      	ldr	r1, [pc, #80]	@ (800087c <main+0x120>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000830:	429a      	cmp	r2, r3
 8000832:	d909      	bls.n	8000848 <main+0xec>
				 {
					 // move positive to target value
					 currentAngle[i]++;
 8000834:	4a11      	ldr	r2, [pc, #68]	@ (800087c <main+0x120>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800083c:	3301      	adds	r3, #1
 800083e:	b299      	uxth	r1, r3
 8000840:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <main+0x120>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				 }

				 //Update Position
				 PCA9685_SetAngle(&servoController, i, currentAngle[i]);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	b2d9      	uxtb	r1, r3
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <main+0x120>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000854:	461a      	mov	r2, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <main+0x114>)
 8000858:	f7ff ff32 	bl	80006c0 <PCA9685_SetAngle>
		  for(int i = 0; i < 6; ++i){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3301      	adds	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b05      	cmp	r3, #5
 8000866:	ddbc      	ble.n	80007e2 <main+0x86>
	  if(datareceived_flag == true){
 8000868:	e7a5      	b.n	80007b6 <main+0x5a>
 800086a:	bf00      	nop
 800086c:	2000018c 	.word	0x2000018c
 8000870:	20000274 	.word	0x20000274
 8000874:	20000014 	.word	0x20000014
 8000878:	200002e8 	.word	0x200002e8
 800087c:	20000008 	.word	0x20000008

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09a      	sub	sp, #104	@ 0x68
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2248      	movs	r2, #72	@ 0x48
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00a fe2a 	bl	800b4e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a6:	f003 f9fd 	bl	8003ca4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80008aa:	2010      	movs	r0, #16
 80008ac:	f7ff ff26 	bl	80006fc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000964 <SystemClock_Config+0xe4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80008b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000964 <SystemClock_Config+0xe4>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <SystemClock_Config+0xe4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008cc:	2327      	movs	r3, #39	@ 0x27
 80008ce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ec:	2360      	movs	r3, #96	@ 0x60
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008f4:	2301      	movs	r3, #1
 80008f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80008fc:	2320      	movs	r3, #32
 80008fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000904:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000906:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800090a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800090c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000910:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fd68 	bl	80043ec <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000922:	f000 f97b 	bl	8000c1c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000926:	236f      	movs	r3, #111	@ 0x6f
 8000928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2303      	movs	r3, #3
 800092c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800093a:	2380      	movs	r3, #128	@ 0x80
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2103      	movs	r1, #3
 8000946:	4618      	mov	r0, r3
 8000948:	f004 f8c4 	bl	8004ad4 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000952:	f000 f963 	bl	8000c1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000956:	f004 fe81 	bl	800565c <HAL_RCCEx_EnableMSIPLLMode>
}
 800095a:	bf00      	nop
 800095c:	3768      	adds	r7, #104	@ 0x68
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	58000400 	.word	0x58000400

08000968 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	@ 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800096e:	463b      	mov	r3, r7
 8000970:	2250      	movs	r2, #80	@ 0x50
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f00a fdb7 	bl	800b4e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800097a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000984:	2310      	movs	r3, #16
 8000986:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fcf0 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000996:	f000 f941 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	@ 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <MX_I2C3_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <MX_I2C3_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009e0:	f000 fe0a 	bl	80015f8 <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 f917 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <MX_I2C3_Init+0x74>)
 80009f2:	f001 fb8d 	bl	8002110 <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 f90e 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_I2C3_Init+0x74>)
 8000a04:	f001 fbcf 	bl	80021a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f905 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000018c 	.word	0x2000018c
 8000a1c:	40005c00 	.word	0x40005c00
 8000a20:	10b17db5 	.word	0x10b17db5

08000a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a28:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <MX_USART1_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a6e:	f004 ff2c 	bl	80058ca <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f8d0 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a80:	f005 fbf4 	bl	800626c <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f8c7 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f005 fc29 	bl	80062e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f8be 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f005 fbaa 	bl	80061fa <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f8b6 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001e0 	.word	0x200001e0
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	2004      	movs	r0, #4
 8000ad2:	f7ff fe29 	bl	8000728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fe26 	bl	8000728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000adc:	2010      	movs	r0, #16
 8000ade:	f7ff fe23 	bl	8000728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fe20 	bl	8000728 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PMUX_STATE_LED_Pin|USBPD_STATE_LED_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2103      	movs	r1, #3
 8000aec:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <MX_GPIO_Init+0x7c>)
 8000aee:	f000 fd6b 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCA9685_STATE_LED_GPIO_Port, PCA9685_STATE_LED_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2110      	movs	r1, #16
 8000af6:	4811      	ldr	r0, [pc, #68]	@ (8000b3c <MX_GPIO_Init+0x80>)
 8000af8:	f000 fd66 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PMUX_STATE_LED_Pin USBPD_STATE_LED_Pin */
  GPIO_InitStruct.Pin = PMUX_STATE_LED_Pin|USBPD_STATE_LED_Pin;
 8000afc:	2303      	movs	r3, #3
 8000afe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <MX_GPIO_Init+0x7c>)
 8000b12:	f000 fbe9 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PCA9685_STATE_LED_Pin */
  GPIO_InitStruct.Pin = PCA9685_STATE_LED_Pin;
 8000b16:	2310      	movs	r3, #16
 8000b18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PCA9685_STATE_LED_GPIO_Port, &GPIO_InitStruct);
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_GPIO_Init+0x80>)
 8000b2c:	f000 fbdc 	bl	80012e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	48001000 	.word	0x48001000

08000b40 <USR_PCA9685_INIT>:

/* USER CODE BEGIN 4 */
static void USR_PCA9685_INIT(I2C_HandleTypeDef *PCA9685_I2C_handle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	servoController.i2c_handle = PCA9685_I2C_handle;
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <USR_PCA9685_INIT+0x28>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
	servoController.device_address = PCA9685_DEFAULT_ADDRESS;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <USR_PCA9685_INIT+0x28>)
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	809a      	strh	r2, [r3, #4]
	servoController.oscillator_frequency = PCA9685_OSC_FREQ;
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <USR_PCA9685_INIT+0x28>)
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <USR_PCA9685_INIT+0x2c>)
 8000b58:	609a      	str	r2, [r3, #8]
	PCA9685_Init(&servoController);
 8000b5a:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <USR_PCA9685_INIT+0x28>)
 8000b5c:	f7ff fd03 	bl	8000566 <PCA9685_Init>
	// Add error Handling
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000274 	.word	0x20000274
 8000b6c:	01923fd8 	.word	0x01923fd8

08000b70 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	memcpy(&message_buffer[0], Buf, Len);
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <USB_CDC_RxHandler+0x28>)
 8000b80:	f00a fce4 	bl	800b54c <memcpy>
	message_lenght = Len;
 8000b84:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <USB_CDC_RxHandler+0x2c>)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	6013      	str	r3, [r2, #0]
	datareceived_flag = true;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <USB_CDC_RxHandler+0x30>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000284 	.word	0x20000284
 8000b9c:	20000280 	.word	0x20000280
 8000ba0:	200002e8 	.word	0x200002e8

08000ba4 <Process_User_Input>:

void Process_User_Input(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	uint8_t servoNum_buf = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	71bb      	strb	r3, [r7, #6]
	uint8_t index = 3;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	71fb      	strb	r3, [r7, #7]
	uint16_t num = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	80bb      	strh	r3, [r7, #4]
	// check for valid command
	if(message_buffer[0] == 'S' && message_buffer[2] == 'P'){
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <Process_User_Input+0x6c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b53      	cmp	r3, #83	@ 0x53
 8000bbc:	d123      	bne.n	8000c06 <Process_User_Input+0x62>
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <Process_User_Input+0x6c>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	2b50      	cmp	r3, #80	@ 0x50
 8000bc4:	d11f      	bne.n	8000c06 <Process_User_Input+0x62>
		servoNum_buf = (uint8_t) message_buffer[1] - '1'; // char to int
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <Process_User_Input+0x6c>)
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	3b31      	subs	r3, #49	@ 0x31
 8000bcc:	71bb      	strb	r3, [r7, #6]
		//read in angle of variable length
		while (1)
		{
			if (message_buffer[index++] == '\r')
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	71fa      	strb	r2, [r7, #7]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <Process_User_Input+0x6c>)
 8000bd8:	5c9b      	ldrb	r3, [r3, r2]
 8000bda:	2b0d      	cmp	r3, #13
 8000bdc:	d000      	beq.n	8000be0 <Process_User_Input+0x3c>
 8000bde:	e7f6      	b.n	8000bce <Process_User_Input+0x2a>
			{
				break; // stop on termination character
 8000be0:	bf00      	nop
			}
		}
		index--; // one step back
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	71fb      	strb	r3, [r7, #7]

		message_buffer[index] = '\0';
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <Process_User_Input+0x6c>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	54d1      	strb	r1, [r2, r3]

		num = atoi(message_buffer + 3); // skip first 3
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <Process_User_Input+0x70>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00a fbf0 	bl	800b3d8 <atoi>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	80bb      	strh	r3, [r7, #4]

		angle[servoNum_buf] = num;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	4906      	ldr	r1, [pc, #24]	@ (8000c18 <Process_User_Input+0x74>)
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000284 	.word	0x20000284
 8000c14:	20000287 	.word	0x20000287
 8000c18:	20000014 	.word	0x20000014

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <LL_AHB2_GRP1_EnableClock>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c66:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09c      	sub	sp, #112	@ 0x70
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2250      	movs	r2, #80	@ 0x50
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00a fbfb 	bl	800b4e8 <memset>
  if(hi2c->Instance==I2C3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d126      	bne.n	8000d4a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d00:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000d04:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 fb30 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d16:	f7ff ff81 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f7ff ff84 	bl	8000c28 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB14     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = PCA_SCL_Pin|PCA_SDA_Pin;
 8000d20:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d26:	2312      	movs	r3, #18
 8000d28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d32:	2304      	movs	r3, #4
 8000d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <HAL_I2C_MspInit+0x8c>)
 8000d3e:	f000 fad3 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d42:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000d46:	f7ff ff88 	bl	8000c5a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3770      	adds	r7, #112	@ 0x70
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40005c00 	.word	0x40005c00
 8000d58:	48000400 	.word	0x48000400

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b09c      	sub	sp, #112	@ 0x70
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2250      	movs	r2, #80	@ 0x50
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00a fbb3 	bl	800b4e8 <memset>
  if(huart->Instance==USART1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a16      	ldr	r2, [pc, #88]	@ (8000de0 <HAL_UART_MspInit+0x84>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d124      	bne.n	8000dd6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fae9 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da4:	f7ff ff3a 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000dac:	f7ff ff6e 	bl	8000c8c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff ff39 	bl	8000c28 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db6:	23c0      	movs	r3, #192	@ 0xc0
 8000db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <HAL_UART_MspInit+0x88>)
 8000dd2:	f000 fa89 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3770      	adds	r7, #112	@ 0x70
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40013800 	.word	0x40013800
 8000de4:	48000400 	.word	0x48000400

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f8f3 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <USB_LP_IRQHandler+0x10>)
 8000e4e:	f001 fae6 	bl	800241e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200017d0 	.word	0x200017d0

08000e5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e60:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <SystemInit+0x98>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e66:	4a23      	ldr	r2, [pc, #140]	@ (8000ef4 <SystemInit+0x98>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e84:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000e88:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <SystemInit+0x9c>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ea2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ea6:	f023 0305 	bic.w	r3, r3, #5
 8000eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000eb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <SystemInit+0xa0>)
 8000ec8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ece:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <SystemInit+0xa0>)
 8000ed0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000edc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	faf6fefb 	.word	0xfaf6fefb
 8000efc:	22041000 	.word	0x22041000

08000f00 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f00:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f02:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f04:	3304      	adds	r3, #4

08000f06 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f06:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f08:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f0a:	d3f9      	bcc.n	8000f00 <CopyDataInit>
  bx lr
 8000f0c:	4770      	bx	lr

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f0e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f10:	3004      	adds	r0, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f12:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>
  bx lr
 8000f16:	4770      	bx	lr

08000f18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f18:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f1c:	f7ff ff9e 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f20:	480b      	ldr	r0, [pc, #44]	@ (8000f50 <LoopForever+0x6>)
 8000f22:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <LoopForever+0xa>)
 8000f24:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <LoopForever+0xe>)
 8000f26:	2300      	movs	r3, #0
 8000f28:	f7ff ffed 	bl	8000f06 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <LoopForever+0x12>)
 8000f2e:	490c      	ldr	r1, [pc, #48]	@ (8000f60 <LoopForever+0x16>)
 8000f30:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <LoopForever+0x1a>)
 8000f32:	2300      	movs	r3, #0
 8000f34:	f7ff ffe7 	bl	8000f06 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f38:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <LoopForever+0x1e>)
 8000f3a:	490c      	ldr	r1, [pc, #48]	@ (8000f6c <LoopForever+0x22>)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f7ff ffe8 	bl	8000f12 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f42:	f00a fadf 	bl	800b504 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f46:	f7ff fc09 	bl	800075c <main>

08000f4a <LoopForever>:

LoopForever:
  b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   r0, =_estack
 8000f4c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000170 	.word	0x20000170
 8000f58:	0800b7d0 	.word	0x0800b7d0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f5c:	20030000 	.word	0x20030000
 8000f60:	20030000 	.word	0x20030000
 8000f64:	0800b938 	.word	0x0800b938
  INIT_BSS _sbss, _ebss
 8000f68:	20000170 	.word	0x20000170
 8000f6c:	20001e04 	.word	0x20001e04

08000f70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_Init+0x3c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <HAL_Init+0x3c>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f000 f96c 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f90:	200f      	movs	r0, #15
 8000f92:	f000 f80f 	bl	8000fb4 <HAL_InitTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	e001      	b.n	8000fa6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa2:	f7ff fe8c 	bl	8000cbe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	58004000 	.word	0x58004000

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_InitTick+0x6c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d024      	beq.n	8001012 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fc8:	f003 ff32 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <HAL_InitTick+0x6c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f974 	bl	80012ce <HAL_SYSTICK_Config>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	d809      	bhi.n	8001006 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffa:	f000 f940 	bl	800127e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffe:	4a09      	ldr	r2, [pc, #36]	@ (8001024 <HAL_InitTick+0x70>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e007      	b.n	8001016 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e004      	b.n	8001016 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e001      	b.n	8001016 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000028 	.word	0x20000028
 8001024:	20000024 	.word	0x20000024

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000028 	.word	0x20000028
 800104c:	200002ec 	.word	0x200002ec

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200002ec 	.word	0x200002ec

08001068 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <HAL_GetTickPrio+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000024 	.word	0x20000024

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffe2 	bl	8001050 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffd2 	bl	8001050 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000028 	.word	0x20000028

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	@ (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	@ (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff40 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff90 	bl	80011bc <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5f 	bl	8001168 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff33 	bl	800112c <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa4 	bl	8001224 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e14c      	b.n	8001592 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 813e 	beq.w	800158c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x40>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d017      	beq.n	80013c6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d123      	bne.n	800141a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0203 	and.w	r2, r3, #3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8098 	beq.w	800158c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800145c:	4a54      	ldr	r2, [pc, #336]	@ (80015b0 <HAL_GPIO_Init+0x2c8>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001486:	d019      	beq.n	80014bc <HAL_GPIO_Init+0x1d4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a4a      	ldr	r2, [pc, #296]	@ (80015b4 <HAL_GPIO_Init+0x2cc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d013      	beq.n	80014b8 <HAL_GPIO_Init+0x1d0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a49      	ldr	r2, [pc, #292]	@ (80015b8 <HAL_GPIO_Init+0x2d0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_GPIO_Init+0x1cc>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a48      	ldr	r2, [pc, #288]	@ (80015bc <HAL_GPIO_Init+0x2d4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x1c8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a47      	ldr	r2, [pc, #284]	@ (80015c0 <HAL_GPIO_Init+0x2d8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_Init+0x1c4>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e008      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014ac:	2307      	movs	r3, #7
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014bc:	2300      	movs	r3, #0
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ce:	4938      	ldr	r1, [pc, #224]	@ (80015b0 <HAL_GPIO_Init+0x2c8>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014dc:	4b39      	ldr	r3, [pc, #228]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001500:	4a30      	ldr	r2, [pc, #192]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001506:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152a:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001530:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001556:	4a1b      	ldr	r2, [pc, #108]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800155e:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001584:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f aeab 	bne.w	80012f8 <HAL_GPIO_Init+0x10>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40010000 	.word	0x40010000
 80015b4:	48000400 	.word	0x48000400
 80015b8:	48000800 	.word	0x48000800
 80015bc:	48000c00 	.word	0x48000c00
 80015c0:	48001000 	.word	0x48001000
 80015c4:	58000800 	.word	0x58000800

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e08d      	b.n	8001726 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fb54 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	@ 0x24
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d107      	bne.n	8001672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	e006      	b.n	8001680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800167e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d108      	bne.n	800169a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	e007      	b.n	80016aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69d9      	ldr	r1, [r3, #28]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4603      	mov	r3, r0
 8001740:	817b      	strh	r3, [r7, #10]
 8001742:	460b      	mov	r3, r1
 8001744:	813b      	strh	r3, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b20      	cmp	r3, #32
 8001754:	f040 80f9 	bne.w	800194a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_I2C_Mem_Write+0x34>
 800175e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0ed      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_I2C_Mem_Write+0x4e>
 800177a:	2302      	movs	r3, #2
 800177c:	e0e6      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001786:	f7ff fc63 	bl	8001050 <HAL_GetTick>
 800178a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2319      	movs	r3, #25
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fac3 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0d1      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2221      	movs	r2, #33	@ 0x21
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2240      	movs	r2, #64	@ 0x40
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a3a      	ldr	r2, [r7, #32]
 80017c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017d0:	88f8      	ldrh	r0, [r7, #6]
 80017d2:	893a      	ldrh	r2, [r7, #8]
 80017d4:	8979      	ldrh	r1, [r7, #10]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4603      	mov	r3, r0
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 f9d3 	bl	8001b8c <I2C_RequestMemoryWrite>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0a9      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2bff      	cmp	r3, #255	@ 0xff
 8001800:	d90e      	bls.n	8001820 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	22ff      	movs	r2, #255	@ 0xff
 8001806:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180c:	b2da      	uxtb	r2, r3
 800180e:	8979      	ldrh	r1, [r7, #10]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fc47 	bl	80020ac <I2C_TransferConfig>
 800181e:	e00f      	b.n	8001840 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182e:	b2da      	uxtb	r2, r3
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	2300      	movs	r3, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fc36 	bl	80020ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 fac6 	bl	8001dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e07b      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d034      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x1c8>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001892:	2b00      	cmp	r3, #0
 8001894:	d130      	bne.n	80018f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	2200      	movs	r2, #0
 800189e:	2180      	movs	r1, #128	@ 0x80
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fa3f 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e04d      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2bff      	cmp	r3, #255	@ 0xff
 80018b8:	d90e      	bls.n	80018d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	22ff      	movs	r2, #255	@ 0xff
 80018be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	8979      	ldrh	r1, [r7, #10]
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fbeb 	bl	80020ac <I2C_TransferConfig>
 80018d6:	e00f      	b.n	80018f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	8979      	ldrh	r1, [r7, #10]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fbda 	bl	80020ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d19e      	bne.n	8001840 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 faac 	bl	8001e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e01a      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2220      	movs	r2, #32
 800191c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_I2C_Mem_Write+0x224>)
 800192a:	400b      	ands	r3, r1
 800192c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800194a:	2302      	movs	r3, #2
  }
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	fe00e800 	.word	0xfe00e800

08001958 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af02      	add	r7, sp, #8
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4603      	mov	r3, r0
 8001968:	817b      	strh	r3, [r7, #10]
 800196a:	460b      	mov	r3, r1
 800196c:	813b      	strh	r3, [r7, #8]
 800196e:	4613      	mov	r3, r2
 8001970:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b20      	cmp	r3, #32
 800197c:	f040 80fd 	bne.w	8001b7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_I2C_Mem_Read+0x34>
 8001986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0f1      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_I2C_Mem_Read+0x4e>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e0ea      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ae:	f7ff fb4f 	bl	8001050 <HAL_GetTick>
 80019b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2319      	movs	r3, #25
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f9af 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0d5      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2222      	movs	r2, #34	@ 0x22
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2240      	movs	r2, #64	@ 0x40
 80019dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a3a      	ldr	r2, [r7, #32]
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019f8:	88f8      	ldrh	r0, [r7, #6]
 80019fa:	893a      	ldrh	r2, [r7, #8]
 80019fc:	8979      	ldrh	r1, [r7, #10]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4603      	mov	r3, r0
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f913 	bl	8001c34 <I2C_RequestMemoryRead>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0ad      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2bff      	cmp	r3, #255	@ 0xff
 8001a28:	d90e      	bls.n	8001a48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	22ff      	movs	r2, #255	@ 0xff
 8001a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	8979      	ldrh	r1, [r7, #10]
 8001a38:	4b52      	ldr	r3, [pc, #328]	@ (8001b84 <HAL_I2C_Mem_Read+0x22c>)
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 fb33 	bl	80020ac <I2C_TransferConfig>
 8001a46:	e00f      	b.n	8001a68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	8979      	ldrh	r1, [r7, #10]
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <HAL_I2C_Mem_Read+0x22c>)
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fb22 	bl	80020ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2104      	movs	r1, #4
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f956 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e07c      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d034      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x1d0>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d130      	bne.n	8001b28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001acc:	2200      	movs	r2, #0
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f927 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e04d      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2bff      	cmp	r3, #255	@ 0xff
 8001ae8:	d90e      	bls.n	8001b08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	22ff      	movs	r2, #255	@ 0xff
 8001aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	8979      	ldrh	r1, [r7, #10]
 8001af8:	2300      	movs	r3, #0
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fad3 	bl	80020ac <I2C_TransferConfig>
 8001b06:	e00f      	b.n	8001b28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	8979      	ldrh	r1, [r7, #10]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fac2 	bl	80020ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d19a      	bne.n	8001a68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f994 	bl	8001e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e01a      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_I2C_Mem_Read+0x230>)
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2220      	movs	r2, #32
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
  }
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	80002400 	.word	0x80002400
 8001b88:	fe00e800 	.word	0xfe00e800

08001b8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	817b      	strh	r3, [r7, #10]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	813b      	strh	r3, [r7, #8]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	8979      	ldrh	r1, [r7, #10]
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <I2C_RequestMemoryWrite+0xa4>)
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fa79 	bl	80020ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	69b9      	ldr	r1, [r7, #24]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f909 	bl	8001dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e02c      	b.n	8001c28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd4:	893b      	ldrh	r3, [r7, #8]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bde:	e015      	b.n	8001c0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	69b9      	ldr	r1, [r7, #24]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f8ef 	bl	8001dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e012      	b.n	8001c28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c02:	893b      	ldrh	r3, [r7, #8]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2200      	movs	r2, #0
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f884 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	80002000 	.word	0x80002000

08001c34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	817b      	strh	r3, [r7, #10]
 8001c46:	460b      	mov	r3, r1
 8001c48:	813b      	strh	r3, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	8979      	ldrh	r1, [r7, #10]
 8001c54:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <I2C_RequestMemoryRead+0xa4>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fa26 	bl	80020ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f8b6 	bl	8001dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e02c      	b.n	8001cce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d105      	bne.n	8001c86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c7a:	893b      	ldrh	r3, [r7, #8]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c84:	e015      	b.n	8001cb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c86:	893b      	ldrh	r3, [r7, #8]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	69b9      	ldr	r1, [r7, #24]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f89c 	bl	8001dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e012      	b.n	8001cce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca8:	893b      	ldrh	r3, [r7, #8]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2140      	movs	r1, #64	@ 0x40
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f831 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	80002000 	.word	0x80002000

08001cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d103      	bne.n	8001cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d007      	beq.n	8001d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	619a      	str	r2, [r3, #24]
  }
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d34:	e03b      	b.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f8d6 	bl	8001eec <I2C_IsErrorOccurred>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e041      	b.n	8001dce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d02d      	beq.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d52:	f7ff f97d 	bl	8001050 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d122      	bne.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4013      	ands	r3, r2
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d113      	bne.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f043 0220 	orr.w	r2, r3, #32
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4013      	ands	r3, r2
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	bf0c      	ite	eq
 8001dbe:	2301      	moveq	r3, #1
 8001dc0:	2300      	movne	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d0b4      	beq.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001de2:	e033      	b.n	8001e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f87f 	bl	8001eec <I2C_IsErrorOccurred>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e031      	b.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfe:	d025      	beq.n	8001e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e00:	f7ff f926 	bl	8001050 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d302      	bcc.n	8001e16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11a      	bne.n	8001e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d013      	beq.n	8001e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e007      	b.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d1c4      	bne.n	8001de4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e70:	e02f      	b.n	8001ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f838 	bl	8001eec <I2C_IsErrorOccurred>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e02d      	b.n	8001ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e86:	f7ff f8e3 	bl	8001050 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d302      	bcc.n	8001e9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11a      	bne.n	8001ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d013      	beq.n	8001ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f043 0220 	orr.w	r2, r3, #32
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e007      	b.n	8001ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d1c8      	bne.n	8001e72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d068      	beq.n	8001fea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f20:	e049      	b.n	8001fb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d045      	beq.n	8001fb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f2a:	f7ff f891 	bl	8001050 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <I2C_IsErrorOccurred+0x54>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d13a      	bne.n	8001fb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f62:	d121      	bne.n	8001fa8 <I2C_IsErrorOccurred+0xbc>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f6a:	d01d      	beq.n	8001fa8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d01a      	beq.n	8001fa8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f82:	f7ff f865 	bl	8001050 <HAL_GetTick>
 8001f86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f88:	e00e      	b.n	8001fa8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f8a:	f7ff f861 	bl	8001050 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b19      	cmp	r3, #25
 8001f96:	d907      	bls.n	8001fa8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f043 0320 	orr.w	r3, r3, #32
 8001f9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001fa6:	e006      	b.n	8001fb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d1e9      	bne.n	8001f8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d003      	beq.n	8001fcc <I2C_IsErrorOccurred+0xe0>
 8001fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0aa      	beq.n	8001f22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800200c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800202e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01c      	beq.n	800209a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f7ff fe3b 	bl	8001cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <I2C_IsErrorOccurred+0x1bc>)
 8002072:	400b      	ands	r3, r1
 8002074:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	fe00e800 	.word	0xfe00e800

080020ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	4613      	mov	r3, r2
 80020bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020c4:	7a7b      	ldrb	r3, [r7, #9]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	0d5b      	lsrs	r3, r3, #21
 80020e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <I2C_TransferConfig+0x60>)
 80020ec:	430b      	orrs	r3, r1
 80020ee:	43db      	mvns	r3, r3
 80020f0:	ea02 0103 	and.w	r1, r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	03ff63ff 	.word	0x03ff63ff

08002110 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	d138      	bne.n	8002198 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002130:	2302      	movs	r3, #2
 8002132:	e032      	b.n	800219a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002162:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d139      	bne.n	8002230 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e033      	b.n	8002232 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2224      	movs	r2, #36	@ 0x24
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e000      	b.n	8002232 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002230:	2302      	movs	r3, #2
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0c0      	b.n	80023d2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f008 fd8f 	bl	800ad88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f004 f8d9 	bl	800642e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e03e      	b.n	8002300 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3311      	adds	r3, #17
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3310      	adds	r3, #16
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	3313      	adds	r3, #19
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	3320      	adds	r3, #32
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	3324      	adds	r3, #36	@ 0x24
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	3301      	adds	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	791b      	ldrb	r3, [r3, #4]
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3bb      	bcc.n	8002282 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e044      	b.n	800239a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	3301      	adds	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	791b      	ldrb	r3, [r3, #4]
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3b5      	bcc.n	8002310 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80023b0:	f004 f858 	bl	8006464 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7a9b      	ldrb	r3, [r3, #10]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f001 fc40 	bl	8003c50 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_PCD_Start+0x16>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e012      	b.n	8002416 <HAL_PCD_Start+0x3c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 ffff 	bl	8006400 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f006 fabf 	bl	800898a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f006 fac4 	bl	80089b8 <USB_ReadInterrupts>
 8002430:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fb04 	bl	8002a4a <PCD_EP_ISR_Handler>

    return;
 8002442:	e110      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	d013      	beq.n	8002476 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002460:	b292      	uxth	r2, r2
 8002462:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f008 fd41 	bl	800aeee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8fc 	bl	800266c <HAL_PCD_SetAddress>

    return;
 8002474:	e0f7      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002488:	b29a      	uxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002492:	b292      	uxth	r2, r2
 8002494:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002498:	e0e5      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00c      	beq.n	80024be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024b6:	b292      	uxth	r2, r2
 80024b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024bc:	e0d3      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d034      	beq.n	8002532 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	b292      	uxth	r2, r2
 80024dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0208 	bic.w	r2, r2, #8
 80024f2:	b292      	uxth	r2, r2
 80024f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800250a:	2100      	movs	r1, #0
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f008 fee3 	bl	800b2d8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f008 fd24 	bl	800af60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002530:	e099      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002538:	2b00      	cmp	r3, #0
 800253a:	d027      	beq.n	800258c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002544:	b29a      	uxth	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0208 	orr.w	r2, r2, #8
 800254e:	b292      	uxth	r2, r2
 8002550:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002566:	b292      	uxth	r2, r2
 8002568:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0204 	orr.w	r2, r2, #4
 800257e:	b292      	uxth	r2, r2
 8002580:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f008 fcd1 	bl	800af2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800258a:	e06c      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d040      	beq.n	8002618 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800259e:	b29a      	uxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a8:	b292      	uxth	r2, r2
 80025aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d12b      	bne.n	8002610 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0204 	orr.w	r2, r2, #4
 80025ca:	b292      	uxth	r2, r2
 80025cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	b292      	uxth	r2, r2
 80025e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002606:	2101      	movs	r1, #1
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f008 fe65 	bl	800b2d8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800260e:	e02a      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f008 fc8b 	bl	800af2c <HAL_PCD_SuspendCallback>
    return;
 8002616:	e026      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00f      	beq.n	8002642 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002634:	b292      	uxth	r2, r2
 8002636:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f008 fc49 	bl	800aed2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002640:	e011      	b.n	8002666 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800265e:	b292      	uxth	r2, r2
 8002660:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002664:	bf00      	nop
  }
}
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_PCD_SetAddress+0x1a>
 8002682:	2302      	movs	r3, #2
 8002684:	e012      	b.n	80026ac <HAL_PCD_SetAddress+0x40>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f006 f960 	bl	8008962 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	4608      	mov	r0, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	70fb      	strb	r3, [r7, #3]
 80026c6:	460b      	mov	r3, r1
 80026c8:	803b      	strh	r3, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da0e      	bge.n	80026f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 0207 	and.w	r2, r3, #7
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	3310      	adds	r3, #16
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	705a      	strb	r2, [r3, #1]
 80026f6:	e00e      	b.n	8002716 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 0207 	and.w	r2, r3, #7
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002722:	883a      	ldrh	r2, [r7, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	78ba      	ldrb	r2, [r7, #2]
 800272c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800272e:	78bb      	ldrb	r3, [r7, #2]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d102      	bne.n	800273a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_PCD_EP_Open+0x94>
 8002744:	2302      	movs	r3, #2
 8002746:	e00e      	b.n	8002766 <HAL_PCD_EP_Open+0xb2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fea2 	bl	80064a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002764:	7afb      	ldrb	r3, [r7, #11]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da0e      	bge.n	80027a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 0207 	and.w	r2, r3, #7
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	3310      	adds	r3, #16
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0207 	and.w	r2, r3, #7
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_PCD_EP_Close+0x6a>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e00e      	b.n	80027f6 <HAL_PCD_EP_Close+0x88>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 fa1e 	bl	8006c28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	460b      	mov	r3, r1
 800280c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280e:	7afb      	ldrb	r3, [r7, #11]
 8002810:	f003 0207 	and.w	r2, r3, #7
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2200      	movs	r2, #0
 8002836:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283e:	7afb      	ldrb	r3, [r7, #11]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	b2da      	uxtb	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6979      	ldr	r1, [r7, #20]
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fbd6 	bl	8007002 <USB_EPStartXfer>

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 0207 	and.w	r2, r3, #7
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	f003 0207 	and.w	r2, r3, #7
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	3310      	adds	r3, #16
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2201      	movs	r2, #1
 80028da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028dc:	7afb      	ldrb	r3, [r7, #11]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6979      	ldr	r1, [r7, #20]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fb87 	bl	8007002 <USB_EPStartXfer>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	7912      	ldrb	r2, [r2, #4]
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e03e      	b.n	800299a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800291c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da0e      	bge.n	8002942 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 0207 	and.w	r2, r3, #7
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	3310      	adds	r3, #16
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	705a      	strb	r2, [r3, #1]
 8002940:	e00c      	b.n	800295c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_PCD_EP_SetStall+0x7e>
 8002978:	2302      	movs	r3, #2
 800297a:	e00e      	b.n	800299a <HAL_PCD_EP_SetStall+0x9c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	4618      	mov	r0, r3
 800298c:	f005 feea 	bl	8008764 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	7912      	ldrb	r2, [r2, #4]
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e040      	b.n	8002a42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da0e      	bge.n	80029e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3310      	adds	r3, #16
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
 80029e4:	e00e      	b.n	8002a04 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 0207 	and.w	r2, r3, #7
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_PCD_EP_ClrStall+0x82>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e00e      	b.n	8002a42 <HAL_PCD_EP_ClrStall+0xa0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f005 fee7 	bl	8008806 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b096      	sub	sp, #88	@ 0x58
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a52:	e3ad      	b.n	80031b0 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a5c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002a6e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 816f 	bne.w	8002d56 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d14c      	bne.n	8002b1e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a94:	81fb      	strh	r3, [r7, #14]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3310      	adds	r3, #16
 8002aac:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	441a      	add	r2, r3
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f008 f9d9 	bl	800ae9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7b1b      	ldrb	r3, [r3, #12]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 835c 	beq.w	80031b0 <PCD_EP_ISR_Handler+0x766>
 8002af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 8357 	bne.w	80031b0 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7b1b      	ldrb	r3, [r3, #12]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	731a      	strb	r2, [r3, #12]
 8002b1c:	e348      	b.n	80031b0 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b24:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d032      	beq.n	8002ba2 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b62:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b70:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b74:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f005 ff70 	bl	8008a5c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b88:	4013      	ands	r3, r2
 8002b8a:	823b      	strh	r3, [r7, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	8a3a      	ldrh	r2, [r7, #16]
 8002b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b96:	b292      	uxth	r2, r2
 8002b98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f008 f952 	bl	800ae44 <HAL_PCD_SetupStageCallback>
 8002ba0:	e306      	b.n	80031b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ba2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f280 8302 	bge.w	80031b0 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002bb8:	4013      	ands	r3, r2
 8002bba:	83fb      	strh	r3, [r7, #30]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	8bfa      	ldrh	r2, [r7, #30]
 8002bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d019      	beq.n	8002c2e <PCD_EP_ISR_Handler+0x1e4>
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d015      	beq.n	8002c2e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c08:	6959      	ldr	r1, [r3, #20]
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c10:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f005 ff22 	bl	8008a5c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	441a      	add	r2, r3
 8002c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c24:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c26:	2100      	movs	r1, #0
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f008 f91d 	bl	800ae68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 82b5 	bne.w	80031b0 <PCD_EP_ISR_Handler+0x766>
 8002c46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c52:	f000 82ad 	beq.w	80031b0 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c8c:	d91d      	bls.n	8002cca <PCD_EP_ISR_Handler+0x280>
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <PCD_EP_ISR_Handler+0x25e>
 8002ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	029b      	lsls	r3, r3, #10
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	e026      	b.n	8002d18 <PCD_EP_ISR_Handler+0x2ce>
 8002cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <PCD_EP_ISR_Handler+0x29e>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	e017      	b.n	8002d18 <PCD_EP_ISR_Handler+0x2ce>
 8002ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <PCD_EP_ISR_Handler+0x2b8>
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfe:	3301      	adds	r3, #1
 8002d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	029b      	lsls	r3, r3, #10
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d28:	827b      	strh	r3, [r7, #18]
 8002d2a:	8a7b      	ldrh	r3, [r7, #18]
 8002d2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d30:	827b      	strh	r3, [r7, #18]
 8002d32:	8a7b      	ldrh	r3, [r7, #18]
 8002d34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d38:	827b      	strh	r3, [r7, #18]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	8a7b      	ldrh	r3, [r7, #18]
 8002d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	8013      	strh	r3, [r2, #0]
 8002d54:	e22c      	b.n	80031b0 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d6a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f280 80f6 	bge.w	8002f60 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002da2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002da6:	b292      	uxth	r2, r2
 8002da8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002daa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc2:	7b1b      	ldrb	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d123      	bne.n	8002e10 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 808e 	beq.w	8002f16 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e00:	6959      	ldr	r1, [r3, #20]
 8002e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e04:	88da      	ldrh	r2, [r3, #6]
 8002e06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e0a:	f005 fe27 	bl	8008a5c <USB_ReadPMA>
 8002e0e:	e082      	b.n	8002f16 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d10a      	bne.n	8002e2e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f9d3 	bl	80031cc <HAL_PCD_EP_DB_Receive>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002e2c:	e073      	b.n	8002f16 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e48:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d022      	beq.n	8002ed2 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002eb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02c      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec2:	6959      	ldr	r1, [r3, #20]
 8002ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec6:	891a      	ldrh	r2, [r3, #8]
 8002ec8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ecc:	f005 fdc6 	bl	8008a5c <USB_ReadPMA>
 8002ed0:	e021      	b.n	8002f16 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002efa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f08:	6959      	ldr	r1, [r3, #20]
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0c:	895a      	ldrh	r2, [r3, #10]
 8002f0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f12:	f005 fda3 	bl	8008a5c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f1e:	441a      	add	r2, r3
 8002f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f2c:	441a      	add	r2, r3
 8002f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f30:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <PCD_EP_ISR_Handler+0x4fc>
 8002f3a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d206      	bcs.n	8002f54 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f007 ff8b 	bl	800ae68 <HAL_PCD_DataOutStageCallback>
 8002f52:	e005      	b.n	8002f60 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 f851 	bl	8007002 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8121 	beq.w	80031b0 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f6e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	3310      	adds	r3, #16
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	78db      	ldrb	r3, [r3, #3]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 80a2 	bne.w	800310c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd0:	7b1b      	ldrb	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8093 	beq.w	80030fe <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d046      	beq.n	8003072 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d126      	bne.n	800303a <PCD_EP_ISR_Handler+0x5f0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	4413      	add	r3, r2
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
 8003004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	00da      	lsls	r2, r3, #3
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	4413      	add	r3, r2
 800300e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301e:	b29a      	uxth	r2, r3
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003032:	b29a      	uxth	r2, r3
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	e061      	b.n	80030fe <PCD_EP_ISR_Handler+0x6b4>
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d15d      	bne.n	80030fe <PCD_EP_ISR_Handler+0x6b4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	4413      	add	r3, r2
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800305a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	00da      	lsls	r2, r3, #3
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	4413      	add	r3, r2
 8003064:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306c:	2200      	movs	r2, #0
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	e045      	b.n	80030fe <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307a:	785b      	ldrb	r3, [r3, #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d126      	bne.n	80030ce <PCD_EP_ISR_Handler+0x684>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	4413      	add	r3, r2
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
 8003098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	00da      	lsls	r2, r3, #3
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	4413      	add	r3, r2
 80030a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	e017      	b.n	80030fe <PCD_EP_ISR_Handler+0x6b4>
 80030ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d113      	bne.n	80030fe <PCD_EP_ISR_Handler+0x6b4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e4:	4413      	add	r3, r2
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	00da      	lsls	r2, r3, #3
 80030ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f0:	4413      	add	r3, r2
 80030f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fa:	2200      	movs	r2, #0
 80030fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f007 feca 	bl	800ae9e <HAL_PCD_DataInStageCallback>
 800310a:	e051      	b.n	80031b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800310c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d144      	bne.n	80031a2 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003120:	b29b      	uxth	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	4413      	add	r3, r2
 8003132:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800313c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003148:	429a      	cmp	r2, r3
 800314a:	d907      	bls.n	800315c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800314c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003154:	1ad2      	subs	r2, r2, r3
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	619a      	str	r2, [r3, #24]
 800315a:	e002      	b.n	8003162 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800315c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315e:	2200      	movs	r2, #0
 8003160:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800316a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f007 fe94 	bl	800ae9e <HAL_PCD_DataInStageCallback>
 8003176:	e01b      	b.n	80031b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003180:	441a      	add	r2, r3
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800318e:	441a      	add	r2, r3
 8003190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003192:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800319a:	4618      	mov	r0, r3
 800319c:	f003 ff31 	bl	8007002 <USB_EPStartXfer>
 80031a0:	e006      	b.n	80031b0 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031a6:	461a      	mov	r2, r3
 80031a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f917 	bl	80033de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f6ff ac49 	blt.w	8002a54 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3758      	adds	r7, #88	@ 0x58
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d07c      	beq.n	80032de <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003208:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	8b7b      	ldrh	r3, [r7, #26]
 8003210:	429a      	cmp	r2, r3
 8003212:	d306      	bcc.n	8003222 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	8b7b      	ldrh	r3, [r7, #26]
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	619a      	str	r2, [r3, #24]
 8003220:	e002      	b.n	8003228 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d123      	bne.n	8003278 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324a:	833b      	strh	r3, [r7, #24]
 800324c:	8b3b      	ldrh	r3, [r7, #24]
 800324e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003252:	833b      	strh	r3, [r7, #24]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	8b3b      	ldrh	r3, [r7, #24]
 8003264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800326c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003274:	b29b      	uxth	r3, r3
 8003276:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01f      	beq.n	80032c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329c:	82fb      	strh	r3, [r7, #22]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	441a      	add	r2, r3
 80032ac:	8afb      	ldrh	r3, [r7, #22]
 80032ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032be:	b29b      	uxth	r3, r3
 80032c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032c2:	8b7b      	ldrh	r3, [r7, #26]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8085 	beq.w	80033d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6959      	ldr	r1, [r3, #20]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	891a      	ldrh	r2, [r3, #8]
 80032d6:	8b7b      	ldrh	r3, [r7, #26]
 80032d8:	f005 fbc0 	bl	8008a5c <USB_ReadPMA>
 80032dc:	e07a      	b.n	80033d4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003302:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	8b7b      	ldrh	r3, [r7, #26]
 800330a:	429a      	cmp	r2, r3
 800330c:	d306      	bcc.n	800331c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	8b7b      	ldrh	r3, [r7, #26]
 8003314:	1ad2      	subs	r2, r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	619a      	str	r2, [r3, #24]
 800331a:	e002      	b.n	8003322 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d123      	bne.n	8003372 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003344:	83fb      	strh	r3, [r7, #30]
 8003346:	8bfb      	ldrh	r3, [r7, #30]
 8003348:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800334c:	83fb      	strh	r3, [r7, #30]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	8bfb      	ldrh	r3, [r7, #30]
 800335e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800336a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336e:	b29b      	uxth	r3, r3
 8003370:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11f      	bne.n	80033bc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003396:	83bb      	strh	r3, [r7, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	8bbb      	ldrh	r3, [r7, #28]
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033bc:	8b7b      	ldrh	r3, [r7, #26]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6959      	ldr	r1, [r3, #20]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	895a      	ldrh	r2, [r3, #10]
 80033ce:	8b7b      	ldrh	r3, [r7, #26]
 80033d0:	f005 fb44 	bl	8008a5c <USB_ReadPMA>
    }
  }

  return count;
 80033d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b0a4      	sub	sp, #144	@ 0x90
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 81db 	beq.w	80037ae <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003400:	b29b      	uxth	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	4413      	add	r3, r2
 8003412:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003428:	429a      	cmp	r2, r3
 800342a:	d907      	bls.n	800343c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	e002      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 80b9 	bne.w	80035be <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d126      	bne.n	80034a2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	4413      	add	r3, r2
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00da      	lsls	r2, r3, #3
 8003472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003474:	4413      	add	r3, r2
 8003476:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003486:	b29a      	uxth	r2, r3
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349a:	b29a      	uxth	r2, r3
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	801a      	strh	r2, [r3, #0]
 80034a0:	e01a      	b.n	80034d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d116      	bne.n	80034d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034be:	4413      	add	r3, r2
 80034c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	00da      	lsls	r2, r3, #3
 80034c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ca:	4413      	add	r3, r2
 80034cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	2200      	movs	r2, #0
 80034d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d126      	bne.n	8003534 <HAL_PCD_EP_DB_Transmit+0x156>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00da      	lsls	r2, r3, #3
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003518:	b29a      	uxth	r2, r3
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352c:	b29a      	uxth	r2, r3
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	e017      	b.n	8003564 <HAL_PCD_EP_DB_Transmit+0x186>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d113      	bne.n	8003564 <HAL_PCD_EP_DB_Transmit+0x186>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	4413      	add	r3, r2
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	00da      	lsls	r2, r3, #3
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	4413      	add	r3, r2
 8003558:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2200      	movs	r2, #0
 8003562:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f007 fc97 	bl	800ae9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 82fa 	beq.w	8003b70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003596:	82fb      	strh	r3, [r7, #22]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	8afb      	ldrh	r3, [r7, #22]
 80035a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8013      	strh	r3, [r2, #0]
 80035bc:	e2d8      	b.n	8003b70 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d021      	beq.n	800360c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	441a      	add	r2, r3
 80035f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80035f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003600:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003608:	b29b      	uxth	r3, r3
 800360a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 82ac 	bne.w	8003b70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003620:	441a      	add	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800362e:	441a      	add	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	429a      	cmp	r2, r3
 800363e:	d30b      	bcc.n	8003658 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003650:	1ad2      	subs	r2, r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	621a      	str	r2, [r3, #32]
 8003656:	e017      	b.n	8003688 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d108      	bne.n	8003672 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003660:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003664:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003670:	e00a      	b.n	8003688 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d165      	bne.n	800375c <HAL_PCD_EP_DB_Transmit+0x37e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a4:	4413      	add	r3, r2
 80036a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	00da      	lsls	r2, r3, #3
 80036ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b0:	4413      	add	r3, r2
 80036b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ce:	d91d      	bls.n	800370c <HAL_PCD_EP_DB_Transmit+0x32e>
 80036d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x30c>
 80036e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e6:	3b01      	subs	r3, #1
 80036e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	029b      	lsls	r3, r3, #10
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4313      	orrs	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003704:	b29a      	uxth	r2, r3
 8003706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e044      	b.n	8003796 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800370c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <HAL_PCD_EP_DB_Transmit+0x34c>
 8003714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003722:	b29a      	uxth	r2, r3
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	e035      	b.n	8003796 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800372a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_PCD_EP_DB_Transmit+0x366>
 800373e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003740:	3301      	adds	r3, #1
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29a      	uxth	r2, r3
 800374a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374c:	b29b      	uxth	r3, r3
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	b29b      	uxth	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b29a      	uxth	r2, r3
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e01c      	b.n	8003796 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d118      	bne.n	8003796 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	647b      	str	r3, [r7, #68]	@ 0x44
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003778:	4413      	add	r3, r2
 800377a:	647b      	str	r3, [r7, #68]	@ 0x44
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	00da      	lsls	r2, r3, #3
 8003782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003784:	4413      	add	r3, r2
 8003786:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800378a:	643b      	str	r3, [r7, #64]	@ 0x40
 800378c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003790:	b29a      	uxth	r2, r3
 8003792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003794:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6959      	ldr	r1, [r3, #20]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	891a      	ldrh	r2, [r3, #8]
 80037a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f005 f916 	bl	80089d8 <USB_WritePMA>
 80037ac:	e1e0      	b.n	8003b70 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037de:	429a      	cmp	r2, r3
 80037e0:	d307      	bcc.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	619a      	str	r2, [r3, #24]
 80037f0:	e002      	b.n	80037f8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 80c0 	bne.w	8003982 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	785b      	ldrb	r3, [r3, #1]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d126      	bne.n	8003858 <HAL_PCD_EP_DB_Transmit+0x47a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003818:	b29b      	uxth	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800381e:	4413      	add	r3, r2
 8003820:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	00da      	lsls	r2, r3, #3
 8003828:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800382a:	4413      	add	r3, r2
 800382c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003830:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003832:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383c:	b29a      	uxth	r2, r3
 800383e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003840:	801a      	strh	r2, [r3, #0]
 8003842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003850:	b29a      	uxth	r2, r3
 8003852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	e01a      	b.n	800388e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d116      	bne.n	800388e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	667b      	str	r3, [r7, #100]	@ 0x64
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800386e:	b29b      	uxth	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003874:	4413      	add	r3, r2
 8003876:	667b      	str	r3, [r7, #100]	@ 0x64
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	00da      	lsls	r2, r3, #3
 800387e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003880:	4413      	add	r3, r2
 8003882:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003886:	663b      	str	r3, [r7, #96]	@ 0x60
 8003888:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800388a:	2200      	movs	r2, #0
 800388c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	677b      	str	r3, [r7, #116]	@ 0x74
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d12b      	bne.n	80038f4 <HAL_PCD_EP_DB_Transmit+0x516>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b0:	4413      	add	r3, r2
 80038b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	00da      	lsls	r2, r3, #3
 80038ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038bc:	4413      	add	r3, r2
 80038be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	e017      	b.n	8003924 <HAL_PCD_EP_DB_Transmit+0x546>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d113      	bne.n	8003924 <HAL_PCD_EP_DB_Transmit+0x546>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390a:	4413      	add	r3, r2
 800390c:	677b      	str	r3, [r7, #116]	@ 0x74
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00da      	lsls	r2, r3, #3
 8003914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003916:	4413      	add	r3, r2
 8003918:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800391c:	673b      	str	r3, [r7, #112]	@ 0x70
 800391e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f007 fab7 	bl	800ae9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 811a 	bne.w	8003b70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003956:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800396c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003974:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397c:	b29b      	uxth	r3, r3
 800397e:	8013      	strh	r3, [r2, #0]
 8003980:	e0f6      	b.n	8003b70 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d121      	bne.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	441a      	add	r2, r3
 80039b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 80ca 	bne.w	8003b70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039e4:	441a      	add	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039f2:	441a      	add	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d30b      	bcc.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	621a      	str	r2, [r3, #32]
 8003a1a:	e017      	b.n	8003a4c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003a24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a34:	e00a      	b.n	8003a4c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d165      	bne.n	8003b26 <HAL_PCD_EP_DB_Transmit+0x748>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a6e:	4413      	add	r3, r2
 8003a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	00da      	lsls	r2, r3, #3
 8003a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a96:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a98:	d91d      	bls.n	8003ad6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003aae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	029b      	lsls	r3, r3, #10
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	e041      	b.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_PCD_EP_DB_Transmit+0x716>
 8003ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	e032      	b.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8003af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_PCD_EP_DB_Transmit+0x730>
 8003b08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	029b      	lsls	r3, r3, #10
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	e019      	b.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d115      	bne.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3c:	4413      	add	r3, r2
 8003b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	00da      	lsls	r2, r3, #3
 8003b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b48:	4413      	add	r3, r2
 8003b4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b58:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6959      	ldr	r1, [r3, #20]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	895a      	ldrh	r2, [r3, #10]
 8003b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f004 ff34 	bl	80089d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b8a:	82bb      	strh	r3, [r7, #20]
 8003b8c:	8abb      	ldrh	r3, [r7, #20]
 8003b8e:	f083 0310 	eor.w	r3, r3, #16
 8003b92:	82bb      	strh	r3, [r7, #20]
 8003b94:	8abb      	ldrh	r3, [r7, #20]
 8003b96:	f083 0320 	eor.w	r3, r3, #32
 8003b9a:	82bb      	strh	r3, [r7, #20]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	441a      	add	r2, r3
 8003baa:	8abb      	ldrh	r3, [r7, #20]
 8003bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3790      	adds	r7, #144	@ 0x90
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	817b      	strh	r3, [r7, #10]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003bdc:	897b      	ldrh	r3, [r7, #10]
 8003bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be8:	897b      	ldrh	r3, [r7, #10]
 8003bea:	f003 0207 	and.w	r2, r3, #7
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e009      	b.n	8003c14 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c00:	897a      	ldrh	r2, [r7, #10]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	80da      	strh	r2, [r3, #6]
 8003c28:	e00b      	b.n	8003c42 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	58000400 	.word	0x58000400

08003cc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	58000400 	.word	0x58000400

08003ce0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	@ (8003cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cee:	6053      	str	r3, [r2, #4]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	58000400 	.word	0x58000400

08003d00 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d12:	d101      	bne.n	8003d18 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_RCC_HSE_Enable>:
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_HSE_Disable>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_RCC_HSE_IsReady>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d72:	d101      	bne.n	8003d78 <LL_RCC_HSE_IsReady+0x18>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <LL_RCC_HSE_IsReady+0x1a>
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_RCC_HSI_Enable>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d96:	6013      	str	r3, [r2, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_HSI_Disable>:
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db4:	6013      	str	r3, [r2, #0]
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_RCC_HSI_IsReady>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd2:	d101      	bne.n	8003dd8 <LL_RCC_HSI_IsReady+0x18>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_RCC_HSI_IsReady+0x1a>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_HSI48_Enable>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_RCC_HSI48_Disable>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <LL_RCC_HSI48_IsReady>:
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d101      	bne.n	8003e6a <LL_RCC_HSI48_IsReady+0x18>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <LL_RCC_HSI48_IsReady+0x1a>
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_RCC_LSE_Enable>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_LSE_Disable>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_LSE_EnableBypass>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_RCC_LSE_DisableBypass>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d101      	bne.n	8003f16 <LL_RCC_LSE_IsReady+0x18>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <LL_RCC_LSE_IsReady+0x1a>
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d101      	bne.n	8003f7e <LL_RCC_LSI1_IsReady+0x18>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <LL_RCC_LSI1_IsReady+0x1a>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f9a:	f043 0304 	orr.w	r3, r3, #4
 8003f9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d101      	bne.n	8003fe6 <LL_RCC_LSI2_IsReady+0x18>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <LL_RCC_LSI2_IsReady+0x1a>
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004002:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6013      	str	r3, [r2, #0]
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d101      	bne.n	8004072 <LL_RCC_MSI_IsReady+0x16>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <LL_RCC_MSI_IsReady+0x18>
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004090:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040b6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2bb0      	cmp	r3, #176	@ 0xb0
 80040bc:	d901      	bls.n	80040c2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80040be:	23b0      	movs	r3, #176	@ 0xb0
 80040c0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80040c2:	687b      	ldr	r3, [r7, #4]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800414c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800416a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004172:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800419a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800419e:	f023 020f 	bic.w	r2, r3, #15
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800421a:	4618      	mov	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004282:	6013      	str	r3, [r2, #0]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800429c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042a0:	6013      	str	r3, [r2, #0]
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042be:	d101      	bne.n	80042c4 <LL_RCC_PLL_IsReady+0x18>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <LL_RCC_PLL_IsReady+0x1a>
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0303 	and.w	r3, r3, #3
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004344:	d101      	bne.n	800434a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800436a:	d101      	bne.n	8004370 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004384:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004390:	d101      	bne.n	8004396 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b4:	d101      	bne.n	80043ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80043ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043d8:	d101      	bne.n	80043de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b08d      	sub	sp, #52	@ 0x34
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e363      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 808d 	beq.w	8004526 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440c:	f7ff fe89 	bl	8004122 <LL_RCC_GetSysClkSource>
 8004410:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004412:	f7ff ff82 	bl	800431a <LL_RCC_PLL_GetMainSource>
 8004416:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x3e>
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d147      	bne.n	80044b4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	2b01      	cmp	r3, #1
 8004428:	d144      	bne.n	80044b4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e347      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800443a:	f7ff fe34 	bl	80040a6 <LL_RCC_MSI_GetRange>
 800443e:	4603      	mov	r3, r0
 8004440:	429c      	cmp	r4, r3
 8004442:	d914      	bls.n	800446e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fd31 	bl	8004eb0 <RCC_SetFlashLatencyFromMSIRange>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e336      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fe0e 	bl	800407e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fe32 	bl	80040d0 <LL_RCC_MSI_SetCalibTrimming>
 800446c:	e013      	b.n	8004496 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fe03 	bl	800407e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fe27 	bl	80040d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fd12 	bl	8004eb0 <RCC_SetFlashLatencyFromMSIRange>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e317      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004496:	f000 fccb 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 800449a:	4603      	mov	r3, r0
 800449c:	4aa4      	ldr	r2, [pc, #656]	@ (8004730 <HAL_RCC_OscConfig+0x344>)
 800449e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044a0:	4ba4      	ldr	r3, [pc, #656]	@ (8004734 <HAL_RCC_OscConfig+0x348>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc fd85 	bl	8000fb4 <HAL_InitTick>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d039      	beq.n	8004524 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e308      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01e      	beq.n	80044fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044bc:	f7ff fdb0 	bl	8004020 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044c0:	f7fc fdc6 	bl	8001050 <HAL_GetTick>
 80044c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c8:	f7fc fdc2 	bl	8001050 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e2f5      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80044da:	f7ff fdbf 	bl	800405c <LL_RCC_MSI_IsReady>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f1      	beq.n	80044c8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fdc8 	bl	800407e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fdec 	bl	80040d0 <LL_RCC_MSI_SetCalibTrimming>
 80044f8:	e015      	b.n	8004526 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044fa:	f7ff fda0 	bl	800403e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044fe:	f7fc fda7 	bl	8001050 <HAL_GetTick>
 8004502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004506:	f7fc fda3 	bl	8001050 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e2d6      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004518:	f7ff fda0 	bl	800405c <LL_RCC_MSI_IsReady>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f1      	bne.n	8004506 <HAL_RCC_OscConfig+0x11a>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004524:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d047      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004532:	f7ff fdf6 	bl	8004122 <LL_RCC_GetSysClkSource>
 8004536:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004538:	f7ff feef 	bl	800431a <LL_RCC_PLL_GetMainSource>
 800453c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d005      	beq.n	8004550 <HAL_RCC_OscConfig+0x164>
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d108      	bne.n	800455c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d105      	bne.n	800455c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d134      	bne.n	80045c2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e2b4      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004564:	d102      	bne.n	800456c <HAL_RCC_OscConfig+0x180>
 8004566:	f7ff fbdd 	bl	8003d24 <LL_RCC_HSE_Enable>
 800456a:	e001      	b.n	8004570 <HAL_RCC_OscConfig+0x184>
 800456c:	f7ff fbe9 	bl	8003d42 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d012      	beq.n	800459e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fc fd6a 	bl	8001050 <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fc fd66 	bl	8001050 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	@ 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e299      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004592:	f7ff fbe5 	bl	8003d60 <LL_RCC_HSE_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f1      	beq.n	8004580 <HAL_RCC_OscConfig+0x194>
 800459c:	e011      	b.n	80045c2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fc fd57 	bl	8001050 <HAL_GetTick>
 80045a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a6:	f7fc fd53 	bl	8001050 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	@ 0x64
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e286      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80045b8:	f7ff fbd2 	bl	8003d60 <LL_RCC_HSE_IsReady>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f1      	bne.n	80045a6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d04c      	beq.n	8004668 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ce:	f7ff fda8 	bl	8004122 <LL_RCC_GetSysClkSource>
 80045d2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d4:	f7ff fea1 	bl	800431a <LL_RCC_PLL_GetMainSource>
 80045d8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d005      	beq.n	80045ec <HAL_RCC_OscConfig+0x200>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d10e      	bne.n	8004604 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d10b      	bne.n	8004604 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e266      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fbf1 	bl	8003de4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004602:	e031      	b.n	8004668 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d019      	beq.n	8004640 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800460c:	f7ff fbba 	bl	8003d84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fc fd1e 	bl	8001050 <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004618:	f7fc fd1a 	bl	8001050 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e24d      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800462a:	f7ff fbc9 	bl	8003dc0 <LL_RCC_HSI_IsReady>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f1      	beq.n	8004618 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fbd3 	bl	8003de4 <LL_RCC_HSI_SetCalibTrimming>
 800463e:	e013      	b.n	8004668 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004640:	f7ff fbaf 	bl	8003da2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fc fd04 	bl	8001050 <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fc fd00 	bl	8001050 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e233      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800465e:	f7ff fbaf 	bl	8003dc0 <LL_RCC_HSI_IsReady>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f1      	bne.n	800464c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a3 	beq.w	80047c8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d076      	beq.n	8004778 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	d046      	beq.n	8004724 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004696:	f7ff fc66 	bl	8003f66 <LL_RCC_LSI1_IsReady>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d113      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80046a0:	f7ff fc3f 	bl	8003f22 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046a4:	f7fc fcd4 	bl	8001050 <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046ac:	f7fc fcd0 	bl	8001050 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e203      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80046be:	f7ff fc52 	bl	8003f66 <LL_RCC_LSI1_IsReady>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f1      	beq.n	80046ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80046c8:	f7ff fc5f 	bl	8003f8a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fc fcc0 	bl	8001050 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046d4:	f7fc fcbc 	bl	8001050 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e1ef      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046e6:	f7ff fc72 	bl	8003fce <LL_RCC_LSI2_IsReady>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f1      	beq.n	80046d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fc7c 	bl	8003ff2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046fa:	f7ff fc23 	bl	8003f44 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fc fca7 	bl	8001050 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004706:	f7fc fca3 	bl	8001050 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e1d6      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004718:	f7ff fc25 	bl	8003f66 <LL_RCC_LSI1_IsReady>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f1      	bne.n	8004706 <HAL_RCC_OscConfig+0x31a>
 8004722:	e051      	b.n	80047c8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004724:	f7ff fbfd 	bl	8003f22 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fc fc92 	bl	8001050 <HAL_GetTick>
 800472c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800472e:	e00c      	b.n	800474a <HAL_RCC_OscConfig+0x35e>
 8004730:	20000020 	.word	0x20000020
 8004734:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004738:	f7fc fc8a 	bl	8001050 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1bd      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800474a:	f7ff fc0c 	bl	8003f66 <LL_RCC_LSI1_IsReady>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f1      	beq.n	8004738 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004754:	f7ff fc2a 	bl	8003fac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800475a:	f7fc fc79 	bl	8001050 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b03      	cmp	r3, #3
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e1ac      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800476c:	f7ff fc2f 	bl	8003fce <LL_RCC_LSI2_IsReady>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f1      	bne.n	800475a <HAL_RCC_OscConfig+0x36e>
 8004776:	e027      	b.n	80047c8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004778:	f7ff fc18 	bl	8003fac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fc fc68 	bl	8001050 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004784:	f7fc fc64 	bl	8001050 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e197      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004796:	f7ff fc1a 	bl	8003fce <LL_RCC_LSI2_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80047a0:	f7ff fbd0 	bl	8003f44 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fc fc54 	bl	8001050 <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047ac:	f7fc fc50 	bl	8001050 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e183      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80047be:	f7ff fbd2 	bl	8003f66 <LL_RCC_LSI1_IsReady>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f1      	bne.n	80047ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05b      	beq.n	800488c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d4:	4ba7      	ldr	r3, [pc, #668]	@ (8004a74 <HAL_RCC_OscConfig+0x688>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d114      	bne.n	800480a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80047e0:	f7ff fa60 	bl	8003ca4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e4:	f7fc fc34 	bl	8001050 <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fc fc30 	bl	8001050 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e163      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fe:	4b9d      	ldr	r3, [pc, #628]	@ (8004a74 <HAL_RCC_OscConfig+0x688>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HAL_RCC_OscConfig+0x42c>
 8004812:	f7ff fb30 	bl	8003e76 <LL_RCC_LSE_Enable>
 8004816:	e00c      	b.n	8004832 <HAL_RCC_OscConfig+0x446>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b05      	cmp	r3, #5
 800481e:	d104      	bne.n	800482a <HAL_RCC_OscConfig+0x43e>
 8004820:	f7ff fb4b 	bl	8003eba <LL_RCC_LSE_EnableBypass>
 8004824:	f7ff fb27 	bl	8003e76 <LL_RCC_LSE_Enable>
 8004828:	e003      	b.n	8004832 <HAL_RCC_OscConfig+0x446>
 800482a:	f7ff fb35 	bl	8003e98 <LL_RCC_LSE_Disable>
 800482e:	f7ff fb55 	bl	8003edc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d014      	beq.n	8004864 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483a:	f7fc fc09 	bl	8001050 <HAL_GetTick>
 800483e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004840:	e00a      	b.n	8004858 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fc fc05 	bl	8001050 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e136      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004858:	f7ff fb51 	bl	8003efe <LL_RCC_LSE_IsReady>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ef      	beq.n	8004842 <HAL_RCC_OscConfig+0x456>
 8004862:	e013      	b.n	800488c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fc fbf4 	bl	8001050 <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fc fbf0 	bl	8001050 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e121      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004882:	f7ff fb3c 	bl	8003efe <LL_RCC_LSE_IsReady>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ef      	bne.n	800486c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02c      	beq.n	80048f2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	2b00      	cmp	r3, #0
 800489e:	d014      	beq.n	80048ca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048a0:	f7ff fab5 	bl	8003e0e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fc fbd4 	bl	8001050 <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ac:	f7fc fbd0 	bl	8001050 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e103      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80048be:	f7ff fac8 	bl	8003e52 <LL_RCC_HSI48_IsReady>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f1      	beq.n	80048ac <HAL_RCC_OscConfig+0x4c0>
 80048c8:	e013      	b.n	80048f2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ca:	f7ff fab1 	bl	8003e30 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fc fbbf 	bl	8001050 <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048d6:	f7fc fbbb 	bl	8001050 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e0ee      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048e8:	f7ff fab3 	bl	8003e52 <LL_RCC_HSI48_IsReady>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f1      	bne.n	80048d6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80e4 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fc:	f7ff fc11 	bl	8004122 <LL_RCC_GetSysClkSource>
 8004900:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	2b02      	cmp	r3, #2
 8004910:	f040 80b4 	bne.w	8004a7c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0203 	and.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	429a      	cmp	r2, r3
 8004920:	d123      	bne.n	800496a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d11c      	bne.n	800496a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d114      	bne.n	800496a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d10d      	bne.n	800496a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d106      	bne.n	800496a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d05d      	beq.n	8004a26 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d058      	beq.n	8004a22 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0a1      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004982:	f7ff fc84 	bl	800428e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004986:	f7fc fb63 	bl	8001050 <HAL_GetTick>
 800498a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498e:	f7fc fb5f 	bl	8001050 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e092      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ef      	bne.n	800498e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	4b30      	ldr	r3, [pc, #192]	@ (8004a78 <HAL_RCC_OscConfig+0x68c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049c0:	4311      	orrs	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049c6:	0212      	lsls	r2, r2, #8
 80049c8:	4311      	orrs	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049ce:	4311      	orrs	r1, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80049da:	430a      	orrs	r2, r1
 80049dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049e4:	f7ff fc44 	bl	8004270 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049f8:	f7fc fb2a 	bl	8001050 <HAL_GetTick>
 80049fc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fc fb26 	bl	8001050 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e059      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ef      	beq.n	8004a00 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a20:	e050      	b.n	8004ac4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e04f      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d147      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a34:	f7ff fc1c 	bl	8004270 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a48:	f7fc fb02 	bl	8001050 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fc fafe 	bl	8001050 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e031      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ef      	beq.n	8004a50 <HAL_RCC_OscConfig+0x664>
 8004a70:	e028      	b.n	8004ac4 <HAL_RCC_OscConfig+0x6d8>
 8004a72:	bf00      	nop
 8004a74:	58000400 	.word	0x58000400
 8004a78:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d01e      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	f7ff fc04 	bl	800428e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fc fae3 	bl	8001050 <HAL_GetTick>
 8004a8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fc fadf 	bl	8001050 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e012      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ef      	bne.n	8004a8e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <HAL_RCC_OscConfig+0x6e4>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	60cb      	str	r3, [r1, #12]
 8004abe:	e001      	b.n	8004ac4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3734      	adds	r7, #52	@ 0x34
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd90      	pop	{r4, r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	eefefffc 	.word	0xeefefffc

08004ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e12d      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b98      	ldr	r3, [pc, #608]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d91b      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b95      	ldr	r3, [pc, #596]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 0207 	bic.w	r2, r3, #7
 8004afe:	4993      	ldr	r1, [pc, #588]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b06:	f7fc faa3 	bl	8001050 <HAL_GetTick>
 8004b0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b0e:	f7fc fa9f 	bl	8001050 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e111      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b20:	4b8a      	ldr	r3, [pc, #552]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d1ef      	bne.n	8004b0e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fafb 	bl	800413a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b44:	f7fc fa84 	bl	8001050 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b4c:	f7fc fa80 	bl	8001050 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e0f2      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b5e:	f7ff fbe8 	bl	8004332 <LL_RCC_IsActiveFlag_HPRE>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f1      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d016      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff faf2 	bl	8004162 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b7e:	f7fc fa67 	bl	8001050 <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b86:	f7fc fa63 	bl	8001050 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0d5      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b98:	f7ff fbdd 	bl	8004356 <LL_RCC_IsActiveFlag_C2HPRE>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f1      	beq.n	8004b86 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff faeb 	bl	800418e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bb8:	f7fc fa4a 	bl	8001050 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bc0:	f7fc fa46 	bl	8001050 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e0b8      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004bd2:	f7ff fbd3 	bl	800437c <LL_RCC_IsActiveFlag_SHDHPRE>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f1      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d016      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fae5 	bl	80041bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bf2:	f7fc fa2d 	bl	8001050 <HAL_GetTick>
 8004bf6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bfa:	f7fc fa29 	bl	8001050 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e09b      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c0c:	f7ff fbc9 	bl	80043a2 <LL_RCC_IsActiveFlag_PPRE1>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f1      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d017      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fadb 	bl	80041e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c2e:	f7fc fa0f 	bl	8001050 <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c36:	f7fc fa0b 	bl	8001050 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e07d      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c48:	f7ff fbbd 	bl	80043c6 <LL_RCC_IsActiveFlag_PPRE2>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f1      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d043      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d106      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c66:	f7ff f87b 	bl	8003d60 <LL_RCC_HSE_IsReady>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11e      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e067      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004c7c:	f7ff fb16 	bl	80042ac <LL_RCC_PLL_IsReady>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d113      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e05c      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c92:	f7ff f9e3 	bl	800405c <LL_RCC_MSI_IsReady>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d108      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e051      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ca0:	f7ff f88e 	bl	8003dc0 <LL_RCC_HSI_IsReady>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e04a      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fa21 	bl	80040fa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb8:	f7fc f9ca 	bl	8001050 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc0:	f7fc f9c6 	bl	8001050 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e036      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd6:	f7ff fa24 	bl	8004122 <LL_RCC_GetSysClkSource>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d1ec      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce6:	4b19      	ldr	r3, [pc, #100]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d21b      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf4:	4b15      	ldr	r3, [pc, #84]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	4913      	ldr	r1, [pc, #76]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d04:	f7fc f9a4 	bl	8001050 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d0c:	f7fc f9a0 	bl	8001050 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e012      	b.n	8004d44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_ClockConfig+0x278>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1ef      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d2c:	f000 f880 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a07      	ldr	r2, [pc, #28]	@ (8004d50 <HAL_RCC_ClockConfig+0x27c>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004d36:	f7fc f997 	bl	8001068 <HAL_GetTickPrio>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc f939 	bl	8000fb4 <HAL_InitTick>
 8004d42:	4603      	mov	r3, r0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	58004000 	.word	0x58004000
 8004d50:	20000020 	.word	0x20000020

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5a:	f7ff f9e2 	bl	8004122 <LL_RCC_GetSysClkSource>
 8004d5e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d66:	f7ff f99e 	bl	80040a6 <LL_RCC_MSI_GetRange>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	4a2b      	ldr	r2, [pc, #172]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e04b      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d102      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d82:	4b28      	ldr	r3, [pc, #160]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e045      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d10a      	bne.n	8004da4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d8e:	f7fe ffb7 	bl	8003d00 <LL_RCC_HSE_IsEnabledDiv2>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d102      	bne.n	8004d9e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d98:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e03a      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d9e:	4b23      	ldr	r3, [pc, #140]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0xd8>)
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e037      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004da4:	f7ff fab9 	bl	800431a <LL_RCC_PLL_GetMainSource>
 8004da8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d003      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x64>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x6a>
 8004db6:	e00d      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004db8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004dba:	60bb      	str	r3, [r7, #8]
        break;
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004dbe:	f7fe ff9f 	bl	8003d00 <LL_RCC_HSE_IsEnabledDiv2>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d102      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004dc8:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004dca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004dcc:	e00d      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004dce:	4b17      	ldr	r3, [pc, #92]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0xd8>)
 8004dd0:	60bb      	str	r3, [r7, #8]
        break;
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004dd4:	f7ff f967 	bl	80040a6 <LL_RCC_MSI_GetRange>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	4a0f      	ldr	r2, [pc, #60]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de6:	60bb      	str	r3, [r7, #8]
        break;
 8004de8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004dea:	f7ff fa71 	bl	80042d0 <LL_RCC_PLL_GetN>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	fb03 f402 	mul.w	r4, r3, r2
 8004df6:	f7ff fa84 	bl	8004302 <LL_RCC_PLL_GetDivider>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	3301      	adds	r3, #1
 8004e00:	fbb4 f4f3 	udiv	r4, r4, r3
 8004e04:	f7ff fa71 	bl	80042ea <LL_RCC_PLL_GetR>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	0f5b      	lsrs	r3, r3, #29
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004e12:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004e14:	68fb      	ldr	r3, [r7, #12]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd90      	pop	{r4, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	0800b654 	.word	0x0800b654
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	00b71b00 	.word	0x00b71b00
 8004e2c:	016e3600 	.word	0x016e3600

08004e30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e30:	b598      	push	{r3, r4, r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e34:	f7ff ff8e 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004e38:	4604      	mov	r4, r0
 8004e3a:	f7ff f9e7 	bl	800420c <LL_RCC_GetAHBPrescaler>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	4a03      	ldr	r2, [pc, #12]	@ (8004e54 <HAL_RCC_GetHCLKFreq+0x24>)
 8004e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd98      	pop	{r3, r4, r7, pc}
 8004e54:	0800b5f4 	.word	0x0800b5f4

08004e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e58:	b598      	push	{r3, r4, r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e5c:	f7ff ffe8 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e60:	4604      	mov	r4, r0
 8004e62:	f7ff f9ed 	bl	8004240 <LL_RCC_GetAPB1Prescaler>
 8004e66:	4603      	mov	r3, r0
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd98      	pop	{r3, r4, r7, pc}
 8004e80:	0800b634 	.word	0x0800b634

08004e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e84:	b598      	push	{r3, r4, r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e88:	f7ff ffd2 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	f7ff f9e3 	bl	8004258 <LL_RCC_GetAPB2Prescaler>
 8004e92:	4603      	mov	r3, r0
 8004e94:	0adb      	lsrs	r3, r3, #11
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	4a04      	ldr	r2, [pc, #16]	@ (8004eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd98      	pop	{r3, r4, r7, pc}
 8004eac:	0800b634 	.word	0x0800b634

08004eb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2bb0      	cmp	r3, #176	@ 0xb0
 8004ebc:	d903      	bls.n	8004ec6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004ebe:	4b15      	ldr	r3, [pc, #84]	@ (8004f14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e007      	b.n	8004ed6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	4a11      	ldr	r2, [pc, #68]	@ (8004f14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004ed6:	f7ff f9a5 	bl	8004224 <LL_RCC_GetAHB4Prescaler>
 8004eda:	4603      	mov	r3, r0
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8004f1c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	0c9c      	lsrs	r4, r3, #18
 8004efa:	f7fe fee3 	bl	8003cc4 <HAL_PWREx_GetVoltageRange>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4619      	mov	r1, r3
 8004f02:	4620      	mov	r0, r4
 8004f04:	f000 f80c 	bl	8004f20 <RCC_SetFlashLatency>
 8004f08:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	bf00      	nop
 8004f14:	0800b654 	.word	0x0800b654
 8004f18:	0800b5f4 	.word	0x0800b5f4
 8004f1c:	431bde83 	.word	0x431bde83

08004f20 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b093      	sub	sp, #76	@ 0x4c
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004f2a:	4b37      	ldr	r3, [pc, #220]	@ (8005008 <RCC_SetFlashLatency+0xe8>)
 8004f2c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004f36:	4a35      	ldr	r2, [pc, #212]	@ (800500c <RCC_SetFlashLatency+0xec>)
 8004f38:	f107 031c 	add.w	r3, r7, #28
 8004f3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004f42:	4b33      	ldr	r3, [pc, #204]	@ (8005010 <RCC_SetFlashLatency+0xf0>)
 8004f44:	f107 040c 	add.w	r4, r7, #12
 8004f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f4e:	2300      	movs	r3, #0
 8004f50:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f58:	d11a      	bne.n	8004f90 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f5e:	e013      	b.n	8004f88 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	3348      	adds	r3, #72	@ 0x48
 8004f66:	443b      	add	r3, r7
 8004f68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d807      	bhi.n	8004f82 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	3348      	adds	r3, #72	@ 0x48
 8004f78:	443b      	add	r3, r7
 8004f7a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f7e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004f80:	e020      	b.n	8004fc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f84:	3301      	adds	r3, #1
 8004f86:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d9e8      	bls.n	8004f60 <RCC_SetFlashLatency+0x40>
 8004f8e:	e019      	b.n	8004fc4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f94:	e013      	b.n	8004fbe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	3348      	adds	r3, #72	@ 0x48
 8004f9c:	443b      	add	r3, r7
 8004f9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d807      	bhi.n	8004fb8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	3348      	adds	r3, #72	@ 0x48
 8004fae:	443b      	add	r3, r7
 8004fb0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004fb4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004fb6:	e005      	b.n	8004fc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fba:	3301      	adds	r3, #1
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d9e8      	bls.n	8004f96 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004fc4:	4b13      	ldr	r3, [pc, #76]	@ (8005014 <RCC_SetFlashLatency+0xf4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 0207 	bic.w	r2, r3, #7
 8004fcc:	4911      	ldr	r1, [pc, #68]	@ (8005014 <RCC_SetFlashLatency+0xf4>)
 8004fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fd4:	f7fc f83c 	bl	8001050 <HAL_GetTick>
 8004fd8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fda:	e008      	b.n	8004fee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fdc:	f7fc f838 	bl	8001050 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e007      	b.n	8004ffe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fee:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <RCC_SetFlashLatency+0xf4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1ef      	bne.n	8004fdc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	374c      	adds	r7, #76	@ 0x4c
 8005002:	46bd      	mov	sp, r7
 8005004:	bd90      	pop	{r4, r7, pc}
 8005006:	bf00      	nop
 8005008:	0800b580 	.word	0x0800b580
 800500c:	0800b590 	.word	0x0800b590
 8005010:	0800b59c 	.word	0x0800b59c
 8005014:	58004000 	.word	0x58004000

08005018 <LL_RCC_LSE_IsEnabled>:
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800501c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <LL_RCC_LSE_IsEnabled+0x18>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <LL_RCC_LSE_IsEnabled+0x1a>
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_RCC_LSE_IsReady>:
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d101      	bne.n	8005054 <LL_RCC_LSE_IsReady+0x18>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <LL_RCC_LSE_IsReady+0x1a>
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_RCC_MSI_EnablePLLMode>:
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	6013      	str	r3, [r2, #0]
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_RCC_SetRFWKPClockSource>:
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800508a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800508e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <LL_RCC_SetSMPSClockSource>:
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80050b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	f023 0203 	bic.w	r2, r3, #3
 80050bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_SetSMPSPrescaler>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_RCC_SetUSARTClockSource>:
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_RCC_SetLPUARTClockSource>:
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800513a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_RCC_SetI2CClockSource>:
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800516a:	43db      	mvns	r3, r3
 800516c:	401a      	ands	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_SetLPTIMClockSource>:
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005198:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0c1b      	lsrs	r3, r3, #16
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	43db      	mvns	r3, r3
 80051a4:	401a      	ands	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_SetSAIClockSource>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <LL_RCC_SetRNGClockSource>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80051f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <LL_RCC_SetCLK48ClockSource>:
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800522c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_RCC_SetUSBClockSource>:
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ffe3 	bl	8005218 <LL_RCC_SetCLK48ClockSource>
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <LL_RCC_SetADCClockSource>:
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800526e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_RCC_SetRTCClockSource>:
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005296:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800529a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_RCC_GetRTCClockSource>:
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_RCC_ForceBackupDomainReset>:
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <LL_RCC_PLLSAI1_Enable>:
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800531e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_PLLSAI1_Disable>:
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800533c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005340:	6013      	str	r3, [r2, #0]
}
 8005342:	bf00      	nop
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_RCC_PLLSAI1_IsReady>:
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800535a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800535e:	d101      	bne.n	8005364 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005378:	2300      	movs	r3, #0
 800537a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800537c:	2300      	movs	r3, #0
 800537e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d034      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005390:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005394:	d021      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005396:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800539a:	d81b      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800539c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053a0:	d01d      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80053a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053a6:	d815      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80053ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b0:	d110      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80053b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80053c2:	e00d      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f94d 	bl	8005668 <RCCEx_PLLSAI1_ConfigNP>
 80053ce:	4603      	mov	r3, r0
 80053d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053d2:	e005      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	77fb      	strb	r3, [r7, #31]
        break;
 80053d8:	e002      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e0:	7ffb      	ldrb	r3, [r7, #31]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d105      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fee8 	bl	80051c0 <LL_RCC_SetSAIClockSource>
 80053f0:	e001      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f2:	7ffb      	ldrb	r3, [r7, #31]
 80053f4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d046      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005402:	f7ff ff56 	bl	80052b2 <LL_RCC_GetRTCClockSource>
 8005406:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	429a      	cmp	r2, r3
 8005410:	d03c      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005412:	f7fe fc47 	bl	8003ca4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff30 	bl	8005286 <LL_RCC_SetRTCClockSource>
 8005426:	e02e      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005432:	f7ff ff4b 	bl	80052cc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005436:	f7ff ff5a 	bl	80052ee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005448:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005452:	f7ff fde1 	bl	8005018 <LL_RCC_LSE_IsEnabled>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d114      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800545c:	f7fb fdf8 	bl	8001050 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005462:	e00b      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005464:	f7fb fdf4 	bl	8001050 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d902      	bls.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	77fb      	strb	r3, [r7, #31]
              break;
 800547a:	e004      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800547c:	f7ff fdde 	bl	800503c <LL_RCC_LSE_IsReady>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d1ee      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005486:	7ffb      	ldrb	r3, [r7, #31]
 8005488:	77bb      	strb	r3, [r7, #30]
 800548a:	e001      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548c:	7ffb      	ldrb	r3, [r7, #31]
 800548e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff fe2a 	bl	80050fa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff fe35 	bl	8005126 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fe5d 	bl	800518c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fe52 	bl	800518c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fe2a 	bl	8005152 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d004      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fe1f 	bl	8005152 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d022      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fe8d 	bl	8005244 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005532:	d107      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800553e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005542:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800554c:	d10b      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f8e3 	bl	800571e <RCCEx_PLLSAI1_ConfigNQ>
 8005558:	4603      	mov	r3, r0
 800555a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800555c:	7ffb      	ldrb	r3, [r7, #31]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005562:	7ffb      	ldrb	r3, [r7, #31]
 8005564:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02b      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557a:	d008      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005584:	d003      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fe2a 	bl	80051ec <LL_RCC_SetRNGClockSource>
 8005598:	e00a      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7ff fe21 	bl	80051ec <LL_RCC_SetRNGClockSource>
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fe34 	bl	8005218 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80055b8:	d107      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80055ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d022      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fe3d 	bl	800525a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055e8:	d107      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005602:	d10b      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	4618      	mov	r0, r3
 800560a:	f000 f8e3 	bl	80057d4 <RCCEx_PLLSAI1_ConfigNR>
 800560e:	4603      	mov	r3, r0
 8005610:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005612:	7ffb      	ldrb	r3, [r7, #31]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005618:	7ffb      	ldrb	r3, [r7, #31]
 800561a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fd26 	bl	800507e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fd45 	bl	80050d2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fd2c 	bl	80050aa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005652:	7fbb      	ldrb	r3, [r7, #30]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005660:	f7ff fcfe 	bl	8005060 <LL_RCC_MSI_EnablePLLMode>
}
 8005664:	bf00      	nop
 8005666:	bd80      	pop	{r7, pc}

08005668 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005674:	f7ff fe5b 	bl	800532e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005678:	f7fb fcea 	bl	8001050 <HAL_GetTick>
 800567c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800567e:	e009      	b.n	8005694 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005680:	f7fb fce6 	bl	8001050 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d902      	bls.n	8005694 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	73fb      	strb	r3, [r7, #15]
      break;
 8005692:	e004      	b.n	800569e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005694:	f7ff fe5a 	bl	800534c <LL_RCC_PLLSAI1_IsReady>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d137      	bne.n	8005714 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056b8:	4313      	orrs	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056ce:	4313      	orrs	r3, r2
 80056d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056d2:	f7ff fe1d 	bl	8005310 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d6:	f7fb fcbb 	bl	8001050 <HAL_GetTick>
 80056da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056dc:	e009      	b.n	80056f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056de:	f7fb fcb7 	bl	8001050 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d902      	bls.n	80056f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	73fb      	strb	r3, [r7, #15]
        break;
 80056f0:	e004      	b.n	80056fc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056f2:	f7ff fe2b 	bl	800534c <LL_RCC_PLLSAI1_IsReady>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d1f0      	bne.n	80056de <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d108      	bne.n	8005714 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005710:	4313      	orrs	r3, r2
 8005712:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005714:	7bfb      	ldrb	r3, [r7, #15]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800572a:	f7ff fe00 	bl	800532e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800572e:	f7fb fc8f 	bl	8001050 <HAL_GetTick>
 8005732:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005734:	e009      	b.n	800574a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005736:	f7fb fc8b 	bl	8001050 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d902      	bls.n	800574a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	73fb      	strb	r3, [r7, #15]
      break;
 8005748:	e004      	b.n	8005754 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800574a:	f7ff fdff 	bl	800534c <LL_RCC_PLLSAI1_IsReady>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d137      	bne.n	80057ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800576e:	4313      	orrs	r3, r2
 8005770:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005788:	f7ff fdc2 	bl	8005310 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578c:	f7fb fc60 	bl	8001050 <HAL_GetTick>
 8005790:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005792:	e009      	b.n	80057a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005794:	f7fb fc5c 	bl	8001050 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d902      	bls.n	80057a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	73fb      	strb	r3, [r7, #15]
        break;
 80057a6:	e004      	b.n	80057b2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057a8:	f7ff fdd0 	bl	800534c <LL_RCC_PLLSAI1_IsReady>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d1f0      	bne.n	8005794 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d108      	bne.n	80057ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057c6:	4313      	orrs	r3, r2
 80057c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057e0:	f7ff fda5 	bl	800532e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057e4:	f7fb fc34 	bl	8001050 <HAL_GetTick>
 80057e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057ea:	e009      	b.n	8005800 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ec:	f7fb fc30 	bl	8001050 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d902      	bls.n	8005800 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	73fb      	strb	r3, [r7, #15]
      break;
 80057fe:	e004      	b.n	800580a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005800:	f7ff fda4 	bl	800534c <LL_RCC_PLLSAI1_IsReady>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d137      	bne.n	8005880 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005824:	4313      	orrs	r3, r2
 8005826:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800583a:	4313      	orrs	r3, r2
 800583c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800583e:	f7ff fd67 	bl	8005310 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005842:	f7fb fc05 	bl	8001050 <HAL_GetTick>
 8005846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005848:	e009      	b.n	800585e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800584a:	f7fb fc01 	bl	8001050 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d902      	bls.n	800585e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	73fb      	strb	r3, [r7, #15]
        break;
 800585c:	e004      	b.n	8005868 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800585e:	f7ff fd75 	bl	800534c <LL_RCC_PLLSAI1_IsReady>
 8005862:	4603      	mov	r3, r0
 8005864:	2b01      	cmp	r3, #1
 8005866:	d1f0      	bne.n	800584a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800587c:	4313      	orrs	r3, r2
 800587e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <LL_RCC_GetUSARTClockSource>:
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005896:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4013      	ands	r3, r2
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <LL_RCC_GetLPUARTClockSource>:
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4013      	ands	r3, r2
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e042      	b.n	8005962 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fb fa34 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2224      	movs	r2, #36	@ 0x24
 80058f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fa51 	bl	8005dbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f826 	bl	800596c <UART_SetConfig>
 8005920:	4603      	mov	r3, r0
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e01b      	b.n	8005962 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fad0 	bl	8005f00 <UART_CheckIdleState>
 8005960:	4603      	mov	r3, r0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800596c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005970:	b08c      	sub	sp, #48	@ 0x30
 8005972:	af00      	add	r7, sp, #0
 8005974:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	431a      	orrs	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	431a      	orrs	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	4313      	orrs	r3, r2
 8005992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4baf      	ldr	r3, [pc, #700]	@ (8005c58 <UART_SetConfig+0x2ec>)
 800599c:	4013      	ands	r3, r2
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4aa4      	ldr	r2, [pc, #656]	@ (8005c5c <UART_SetConfig+0x2f0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059d4:	4313      	orrs	r3, r2
 80059d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80059e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f6:	f023 010f 	bic.w	r1, r3, #15
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a95      	ldr	r2, [pc, #596]	@ (8005c60 <UART_SetConfig+0x2f4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d125      	bne.n	8005a5c <UART_SetConfig+0xf0>
 8005a10:	2003      	movs	r0, #3
 8005a12:	f7ff ff3a 	bl	800588a <LL_RCC_GetUSARTClockSource>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d81b      	bhi.n	8005a54 <UART_SetConfig+0xe8>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <UART_SetConfig+0xb8>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a4d 	.word	0x08005a4d
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3a:	e042      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a42:	e03e      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4a:	e03a      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a52:	e036      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5a:	e032      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a7e      	ldr	r2, [pc, #504]	@ (8005c5c <UART_SetConfig+0x2f0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d12a      	bne.n	8005abc <UART_SetConfig+0x150>
 8005a66:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005a6a:	f7ff ff1e 	bl	80058aa <LL_RCC_GetLPUARTClockSource>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a74:	d01a      	beq.n	8005aac <UART_SetConfig+0x140>
 8005a76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a7a:	d81b      	bhi.n	8005ab4 <UART_SetConfig+0x148>
 8005a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a80:	d00c      	beq.n	8005a9c <UART_SetConfig+0x130>
 8005a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a86:	d815      	bhi.n	8005ab4 <UART_SetConfig+0x148>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <UART_SetConfig+0x128>
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a90:	d008      	beq.n	8005aa4 <UART_SetConfig+0x138>
 8005a92:	e00f      	b.n	8005ab4 <UART_SetConfig+0x148>
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9a:	e012      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa2:	e00e      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aaa:	e00a      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005aac:	2308      	movs	r3, #8
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab2:	e006      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aba:	e002      	b.n	8005ac2 <UART_SetConfig+0x156>
 8005abc:	2310      	movs	r3, #16
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a65      	ldr	r2, [pc, #404]	@ (8005c5c <UART_SetConfig+0x2f0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	f040 8097 	bne.w	8005bfc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ace:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d823      	bhi.n	8005b1e <UART_SetConfig+0x1b2>
 8005ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <UART_SetConfig+0x170>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b1f 	.word	0x08005b1f
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b1f 	.word	0x08005b1f
 8005aec:	08005b0f 	.word	0x08005b0f
 8005af0:	08005b1f 	.word	0x08005b1f
 8005af4:	08005b1f 	.word	0x08005b1f
 8005af8:	08005b1f 	.word	0x08005b1f
 8005afc:	08005b17 	.word	0x08005b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7ff f9aa 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 8005b04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b06:	e010      	b.n	8005b2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b08:	4b56      	ldr	r3, [pc, #344]	@ (8005c64 <UART_SetConfig+0x2f8>)
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b0c:	e00d      	b.n	8005b2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b0e:	f7ff f921 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8005b12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b14:	e009      	b.n	8005b2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b1c:	e005      	b.n	8005b2a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 812b 	beq.w	8005d88 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	4a4c      	ldr	r2, [pc, #304]	@ (8005c68 <UART_SetConfig+0x2fc>)
 8005b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d305      	bcc.n	8005b62 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d903      	bls.n	8005b6a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b68:	e10e      	b.n	8005d88 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	60fa      	str	r2, [r7, #12]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b76:	4a3c      	ldr	r2, [pc, #240]	@ (8005c68 <UART_SetConfig+0x2fc>)
 8005b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2200      	movs	r2, #0
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b8c:	f7fa faf6 	bl	800017c <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	020b      	lsls	r3, r1, #8
 8005ba2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ba6:	0202      	lsls	r2, r0, #8
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	6849      	ldr	r1, [r1, #4]
 8005bac:	0849      	lsrs	r1, r1, #1
 8005bae:	2000      	movs	r0, #0
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	eb12 0804 	adds.w	r8, r2, r4
 8005bb8:	eb43 0905 	adc.w	r9, r3, r5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	4693      	mov	fp, r2
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	465b      	mov	r3, fp
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fad5 	bl	800017c <__aeabi_uldivmod>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be0:	d308      	bcc.n	8005bf4 <UART_SetConfig+0x288>
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005be8:	d204      	bcs.n	8005bf4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	60da      	str	r2, [r3, #12]
 8005bf2:	e0c9      	b.n	8005d88 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bfa:	e0c5      	b.n	8005d88 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c04:	d16d      	bne.n	8005ce2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005c06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	2b07      	cmp	r3, #7
 8005c0e:	d82d      	bhi.n	8005c6c <UART_SetConfig+0x300>
 8005c10:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <UART_SetConfig+0x2ac>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c39 	.word	0x08005c39
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c6d 	.word	0x08005c6d
 8005c24:	08005c47 	.word	0x08005c47
 8005c28:	08005c6d 	.word	0x08005c6d
 8005c2c:	08005c6d 	.word	0x08005c6d
 8005c30:	08005c6d 	.word	0x08005c6d
 8005c34:	08005c4f 	.word	0x08005c4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7ff f924 	bl	8004e84 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c3e:	e01b      	b.n	8005c78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c40:	4b08      	ldr	r3, [pc, #32]	@ (8005c64 <UART_SetConfig+0x2f8>)
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c44:	e018      	b.n	8005c78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7ff f885 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8005c4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c4c:	e014      	b.n	8005c78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c54:	e010      	b.n	8005c78 <UART_SetConfig+0x30c>
 8005c56:	bf00      	nop
 8005c58:	cfff69f3 	.word	0xcfff69f3
 8005c5c:	40008000 	.word	0x40008000
 8005c60:	40013800 	.word	0x40013800
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	0800b694 	.word	0x0800b694
      default:
        pclk = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8084 	beq.w	8005d88 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	4a4b      	ldr	r2, [pc, #300]	@ (8005db4 <UART_SetConfig+0x448>)
 8005c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c92:	005a      	lsls	r2, r3, #1
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	441a      	add	r2, r3
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	2b0f      	cmp	r3, #15
 8005caa:	d916      	bls.n	8005cda <UART_SetConfig+0x36e>
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb2:	d212      	bcs.n	8005cda <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f023 030f 	bic.w	r3, r3, #15
 8005cbc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	8bfb      	ldrh	r3, [r7, #30]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	8bfa      	ldrh	r2, [r7, #30]
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e056      	b.n	8005d88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ce0:	e052      	b.n	8005d88 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	2b07      	cmp	r3, #7
 8005cea:	d822      	bhi.n	8005d32 <UART_SetConfig+0x3c6>
 8005cec:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <UART_SetConfig+0x388>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d15 	.word	0x08005d15
 8005cf8:	08005d1d 	.word	0x08005d1d
 8005cfc:	08005d33 	.word	0x08005d33
 8005d00:	08005d23 	.word	0x08005d23
 8005d04:	08005d33 	.word	0x08005d33
 8005d08:	08005d33 	.word	0x08005d33
 8005d0c:	08005d33 	.word	0x08005d33
 8005d10:	08005d2b 	.word	0x08005d2b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d14:	f7ff f8b6 	bl	8004e84 <HAL_RCC_GetPCLK2Freq>
 8005d18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d1a:	e010      	b.n	8005d3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d1c:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <UART_SetConfig+0x44c>)
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d20:	e00d      	b.n	8005d3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d22:	f7ff f817 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8005d26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d28:	e009      	b.n	8005d3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d30:	e005      	b.n	8005d3e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d021      	beq.n	8005d88 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	4a1a      	ldr	r2, [pc, #104]	@ (8005db4 <UART_SetConfig+0x448>)
 8005d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	441a      	add	r2, r3
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	d909      	bls.n	8005d82 <UART_SetConfig+0x416>
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d74:	d205      	bcs.n	8005d82 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60da      	str	r2, [r3, #12]
 8005d80:	e002      	b.n	8005d88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005da4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3730      	adds	r7, #48	@ 0x30
 8005dac:	46bd      	mov	sp, r7
 8005dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db2:	bf00      	nop
 8005db4:	0800b694 	.word	0x0800b694
 8005db8:	00f42400 	.word	0x00f42400

08005dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eba:	d10a      	bne.n	8005ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b098      	sub	sp, #96	@ 0x60
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f10:	f7fb f89e 	bl	8001050 <HAL_GetTick>
 8005f14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d12f      	bne.n	8005f84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f88e 	bl	8006054 <UART_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d022      	beq.n	8005f84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e6      	bne.n	8005f3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e063      	b.n	800604c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d149      	bne.n	8006026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f857 	bl	8006054 <UART_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d03c      	beq.n	8006026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e6      	bne.n	8005fac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ffe:	61fa      	str	r2, [r7, #28]
 8006000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	617b      	str	r3, [r7, #20]
   return(result);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e5      	bne.n	8005fde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e012      	b.n	800604c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3758      	adds	r7, #88	@ 0x58
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006064:	e04f      	b.n	8006106 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d04b      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606e:	f7fa ffef 	bl	8001050 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	429a      	cmp	r2, r3
 800607c:	d302      	bcc.n	8006084 <UART_WaitOnFlagUntilTimeout+0x30>
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e04e      	b.n	8006126 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d037      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b80      	cmp	r3, #128	@ 0x80
 800609a:	d034      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b40      	cmp	r3, #64	@ 0x40
 80060a0:	d031      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d110      	bne.n	80060d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2208      	movs	r2, #8
 80060b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f838 	bl	800612e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2208      	movs	r2, #8
 80060c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e029      	b.n	8006126 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e0:	d111      	bne.n	8006106 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f81e 	bl	800612e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e00f      	b.n	8006126 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	429a      	cmp	r2, r3
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	429a      	cmp	r2, r3
 8006122:	d0a0      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800612e:	b480      	push	{r7}
 8006130:	b095      	sub	sp, #84	@ 0x54
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800614a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006154:	643b      	str	r3, [r7, #64]	@ 0x40
 8006156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800615a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e6      	bne.n	8006136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3308      	adds	r3, #8
 800616e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	61fb      	str	r3, [r7, #28]
   return(result);
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800617e:	f023 0301 	bic.w	r3, r3, #1
 8006182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3308      	adds	r3, #8
 800618a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800618c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800618e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e3      	bne.n	8006168 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d118      	bne.n	80061da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f023 0310 	bic.w	r3, r3, #16
 80061bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6979      	ldr	r1, [r7, #20]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	613b      	str	r3, [r7, #16]
   return(result);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80061ee:	bf00      	nop
 80061f0:	3754      	adds	r7, #84	@ 0x54
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_UARTEx_DisableFifoMode+0x16>
 800620c:	2302      	movs	r3, #2
 800620e:	e027      	b.n	8006260 <HAL_UARTEx_DisableFifoMode+0x66>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2224      	movs	r2, #36	@ 0x24
 800621c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800623e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e02d      	b.n	80062e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	@ 0x24
 8006290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f84f 	bl	8006364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e02d      	b.n	800635c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	@ 0x24
 800630c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f811 	bl	8006364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006384:	e031      	b.n	80063ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006386:	2308      	movs	r3, #8
 8006388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800638a:	2308      	movs	r3, #8
 800638c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	0e5b      	lsrs	r3, r3, #25
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	0f5b      	lsrs	r3, r3, #29
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	7b3a      	ldrb	r2, [r7, #12]
 80063b2:	4911      	ldr	r1, [pc, #68]	@ (80063f8 <UARTEx_SetNbDataToProcess+0x94>)
 80063b4:	5c8a      	ldrb	r2, [r1, r2]
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063ba:	7b3a      	ldrb	r2, [r7, #12]
 80063bc:	490f      	ldr	r1, [pc, #60]	@ (80063fc <UARTEx_SetNbDataToProcess+0x98>)
 80063be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	7b7a      	ldrb	r2, [r7, #13]
 80063d0:	4909      	ldr	r1, [pc, #36]	@ (80063f8 <UARTEx_SetNbDataToProcess+0x94>)
 80063d2:	5c8a      	ldrb	r2, [r1, r2]
 80063d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063d8:	7b7a      	ldrb	r2, [r7, #13]
 80063da:	4908      	ldr	r1, [pc, #32]	@ (80063fc <UARTEx_SetNbDataToProcess+0x98>)
 80063dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063de:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	0800b6ac 	.word	0x0800b6ac
 80063fc:	0800b6b4 	.word	0x0800b6b4

08006400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006410:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006414:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006436:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800643a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	b29b      	uxth	r3, r3
 8006448:	43db      	mvns	r3, r3
 800644a:	b29b      	uxth	r3, r3
 800644c:	4013      	ands	r3, r2
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	1d3b      	adds	r3, r7, #4
 800646e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b09d      	sub	sp, #116	@ 0x74
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80064c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	78db      	ldrb	r3, [r3, #3]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d81f      	bhi.n	8006512 <USB_ActivateEndpoint+0x72>
 80064d2:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <USB_ActivateEndpoint+0x38>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	080064e9 	.word	0x080064e9
 80064dc:	08006505 	.word	0x08006505
 80064e0:	0800651b 	.word	0x0800651b
 80064e4:	080064f7 	.word	0x080064f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80064ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80064f4:	e012      	b.n	800651c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80064fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80064fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006502:	e00b      	b.n	800651c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006504:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006508:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800650c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006510:	e004      	b.n	800651c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006518:	e000      	b.n	800651c <USB_ActivateEndpoint+0x7c>
      break;
 800651a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	b21b      	sxth	r3, r3
 800654e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006556:	b21a      	sxth	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b21b      	sxth	r3, r3
 800655e:	4313      	orrs	r3, r2
 8006560:	b21b      	sxth	r3, r3
 8006562:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800657c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006584:	b29b      	uxth	r3, r3
 8006586:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	7b1b      	ldrb	r3, [r3, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f040 8178 	bne.w	8006882 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8084 	beq.w	80066a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	4413      	add	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	00da      	lsls	r2, r3, #3
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	88db      	ldrh	r3, [r3, #6]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	827b      	strh	r3, [r7, #18]
 80065de:	8a7b      	ldrh	r3, [r7, #18]
 80065e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01b      	beq.n	8006620 <USB_ActivateEndpoint+0x180>
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fe:	823b      	strh	r3, [r7, #16]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	8a3b      	ldrh	r3, [r7, #16]
 800660c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006618:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800661c:	b29b      	uxth	r3, r3
 800661e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	78db      	ldrb	r3, [r3, #3]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d020      	beq.n	800666a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663e:	81bb      	strh	r3, [r7, #12]
 8006640:	89bb      	ldrh	r3, [r7, #12]
 8006642:	f083 0320 	eor.w	r3, r3, #32
 8006646:	81bb      	strh	r3, [r7, #12]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	441a      	add	r2, r3
 8006652:	89bb      	ldrh	r3, [r7, #12]
 8006654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006664:	b29b      	uxth	r3, r3
 8006666:	8013      	strh	r3, [r2, #0]
 8006668:	e2d5      	b.n	8006c16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800667c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006680:	81fb      	strh	r3, [r7, #14]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	89fb      	ldrh	r3, [r7, #14]
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800669a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]
 80066a2:	e2b8      	b.n	8006c16 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	4413      	add	r3, r2
 80066b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	00da      	lsls	r2, r3, #3
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	4413      	add	r3, r2
 80066c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	88db      	ldrh	r3, [r3, #6]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	4413      	add	r3, r2
 80066ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	00da      	lsls	r2, r3, #3
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	4413      	add	r3, r2
 80066f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006706:	b29a      	uxth	r2, r3
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b3e      	cmp	r3, #62	@ 0x3e
 8006712:	d91d      	bls.n	8006750 <USB_ActivateEndpoint+0x2b0>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <USB_ActivateEndpoint+0x28e>
 8006728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800672a:	3b01      	subs	r3, #1
 800672c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29a      	uxth	r2, r3
 8006734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006736:	b29b      	uxth	r3, r3
 8006738:	029b      	lsls	r3, r3, #10
 800673a:	b29b      	uxth	r3, r3
 800673c:	4313      	orrs	r3, r2
 800673e:	b29b      	uxth	r3, r3
 8006740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006748:	b29a      	uxth	r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e026      	b.n	800679e <USB_ActivateEndpoint+0x2fe>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <USB_ActivateEndpoint+0x2ce>
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e017      	b.n	800679e <USB_ActivateEndpoint+0x2fe>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <USB_ActivateEndpoint+0x2e8>
 8006782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006784:	3301      	adds	r3, #1
 8006786:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29a      	uxth	r2, r3
 800678e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006790:	b29b      	uxth	r3, r3
 8006792:	029b      	lsls	r3, r3, #10
 8006794:	b29b      	uxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b29a      	uxth	r2, r3
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80067ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01b      	beq.n	80067ee <USB_ActivateEndpoint+0x34e>
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067cc:	843b      	strh	r3, [r7, #32]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	8c3b      	ldrh	r3, [r7, #32]
 80067da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d124      	bne.n	8006840 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680c:	83bb      	strh	r3, [r7, #28]
 800680e:	8bbb      	ldrh	r3, [r7, #28]
 8006810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006814:	83bb      	strh	r3, [r7, #28]
 8006816:	8bbb      	ldrh	r3, [r7, #28]
 8006818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800681c:	83bb      	strh	r3, [r7, #28]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8bbb      	ldrh	r3, [r7, #28]
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]
 800683e:	e1ea      	b.n	8006c16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006856:	83fb      	strh	r3, [r7, #30]
 8006858:	8bfb      	ldrh	r3, [r7, #30]
 800685a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800685e:	83fb      	strh	r3, [r7, #30]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	8bfb      	ldrh	r3, [r7, #30]
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
 8006880:	e1c9      	b.n	8006c16 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	78db      	ldrb	r3, [r3, #3]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d11e      	bne.n	80068c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80068b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	8013      	strh	r3, [r2, #0]
 80068c6:	e01d      	b.n	8006904 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80068da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006914:	4413      	add	r3, r2
 8006916:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	00da      	lsls	r2, r3, #3
 800691e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006920:	4413      	add	r3, r2
 8006922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006926:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	891b      	ldrh	r3, [r3, #8]
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	657b      	str	r3, [r7, #84]	@ 0x54
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006948:	4413      	add	r3, r2
 800694a:	657b      	str	r3, [r7, #84]	@ 0x54
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	00da      	lsls	r2, r3, #3
 8006952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006954:	4413      	add	r3, r2
 8006956:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800695a:	653b      	str	r3, [r7, #80]	@ 0x50
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	895b      	ldrh	r3, [r3, #10]
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	b29b      	uxth	r3, r3
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800696a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8093 	bne.w	8006a9c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006986:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800698a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d01b      	beq.n	80069ca <USB_ActivateEndpoint+0x52a>
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80069b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80069d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80069da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01b      	beq.n	8006a1a <USB_ActivateEndpoint+0x57a>
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	441a      	add	r2, r3
 8006a04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a30:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a32:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a38:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a40:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]
 8006a9a:	e0bc      	b.n	8006c16 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006aac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01d      	beq.n	8006af4 <USB_ActivateEndpoint+0x654>
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ace:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006b04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01d      	beq.n	8006b4c <USB_ActivateEndpoint+0x6ac>
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	441a      	add	r2, r3
 8006b34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	78db      	ldrb	r3, [r3, #3]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d024      	beq.n	8006b9e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b6a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006b6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006b72:	f083 0320 	eor.w	r3, r3, #32
 8006b76:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	441a      	add	r2, r3
 8006b84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
 8006b9c:	e01d      	b.n	8006bda <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006c16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3774      	adds	r7, #116	@ 0x74
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b08d      	sub	sp, #52	@ 0x34
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	7b1b      	ldrb	r3, [r3, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f040 808e 	bne.w	8006d58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d044      	beq.n	8006cce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	81bb      	strh	r3, [r7, #12]
 8006c52:	89bb      	ldrh	r3, [r7, #12]
 8006c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01b      	beq.n	8006c94 <USB_DeactivateEndpoint+0x6c>
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c72:	817b      	strh	r3, [r7, #10]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006caa:	813b      	strh	r3, [r7, #8]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	893b      	ldrh	r3, [r7, #8]
 8006cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	8013      	strh	r3, [r2, #0]
 8006ccc:	e192      	b.n	8006ff4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	827b      	strh	r3, [r7, #18]
 8006cdc:	8a7b      	ldrh	r3, [r7, #18]
 8006cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01b      	beq.n	8006d1e <USB_DeactivateEndpoint+0xf6>
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfc:	823b      	strh	r3, [r7, #16]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	8a3b      	ldrh	r3, [r7, #16]
 8006d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d34:	81fb      	strh	r3, [r7, #14]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
 8006d56:	e14d      	b.n	8006ff4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f040 80a5 	bne.w	8006eac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	843b      	strh	r3, [r7, #32]
 8006d70:	8c3b      	ldrh	r3, [r7, #32]
 8006d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01b      	beq.n	8006db2 <USB_DeactivateEndpoint+0x18a>
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d90:	83fb      	strh	r3, [r7, #30]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	441a      	add	r2, r3
 8006d9c:	8bfb      	ldrh	r3, [r7, #30]
 8006d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	83bb      	strh	r3, [r7, #28]
 8006dc0:	8bbb      	ldrh	r3, [r7, #28]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01b      	beq.n	8006e02 <USB_DeactivateEndpoint+0x1da>
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de0:	837b      	strh	r3, [r7, #26]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	8b7b      	ldrh	r3, [r7, #26]
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e18:	833b      	strh	r3, [r7, #24]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	8b3b      	ldrh	r3, [r7, #24]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e50:	82fb      	strh	r3, [r7, #22]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	8afb      	ldrh	r3, [r7, #22]
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e88:	82bb      	strh	r3, [r7, #20]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	441a      	add	r2, r3
 8006e94:	8abb      	ldrh	r3, [r7, #20]
 8006e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	8013      	strh	r3, [r2, #0]
 8006eaa:	e0a3      	b.n	8006ff4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006eba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <USB_DeactivateEndpoint+0x2d4>
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	441a      	add	r2, r3
 8006ee6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006f0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <USB_DeactivateEndpoint+0x324>
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	441a      	add	r2, r3
 8006fa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	441a      	add	r2, r3
 8006fde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3734      	adds	r7, #52	@ 0x34
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b0c2      	sub	sp, #264	@ 0x108
 8007006:	af00      	add	r7, sp, #0
 8007008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007010:	6018      	str	r0, [r3, #0]
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800701c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b01      	cmp	r3, #1
 800702a:	f040 86b7 	bne.w	8007d9c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	429a      	cmp	r2, r3
 8007048:	d908      	bls.n	800705c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800705a:	e007      	b.n	800706c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	7b1b      	ldrb	r3, [r3, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d13a      	bne.n	80070f2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6959      	ldr	r1, [r3, #20]
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	88da      	ldrh	r2, [r3, #6]
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	b29b      	uxth	r3, r3
 800709a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800709e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070a2:	6800      	ldr	r0, [r0, #0]
 80070a4:	f001 fc98 	bl	80089d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00da      	lsls	r2, r3, #3
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4413      	add	r3, r2
 80070de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	f000 be1f 	b.w	8007d30 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	78db      	ldrb	r3, [r3, #3]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	f040 8462 	bne.w	80079c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	429a      	cmp	r2, r3
 800711e:	f240 83df 	bls.w	80078e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007148:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800716a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800716e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007172:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800717a:	b29b      	uxth	r3, r3
 800717c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800717e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6a1a      	ldr	r2, [r3, #32]
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800719c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 81c7 	beq.w	8007552 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d177      	bne.n	80072d0 <USB_EPStartXfer+0x2ce>
 80071e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	4413      	add	r3, r2
 8007202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	00da      	lsls	r2, r3, #3
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	4413      	add	r3, r2
 8007216:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007226:	b29a      	uxth	r2, r3
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007230:	2b3e      	cmp	r3, #62	@ 0x3e
 8007232:	d921      	bls.n	8007278 <USB_EPStartXfer+0x276>
 8007234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	2b00      	cmp	r3, #0
 8007248:	d104      	bne.n	8007254 <USB_EPStartXfer+0x252>
 800724a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800724e:	3b01      	subs	r3, #1
 8007250:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800725e:	b29b      	uxth	r3, r3
 8007260:	029b      	lsls	r3, r3, #10
 8007262:	b29b      	uxth	r3, r3
 8007264:	4313      	orrs	r3, r2
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007270:	b29a      	uxth	r2, r3
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	e050      	b.n	800731a <USB_EPStartXfer+0x318>
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <USB_EPStartXfer+0x294>
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728e:	b29a      	uxth	r2, r3
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	e041      	b.n	800731a <USB_EPStartXfer+0x318>
 8007296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <USB_EPStartXfer+0x2b4>
 80072ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072b0:	3301      	adds	r3, #1
 80072b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	029b      	lsls	r3, r3, #10
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	e024      	b.n	800731a <USB_EPStartXfer+0x318>
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d11c      	bne.n	800731a <USB_EPStartXfer+0x318>
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	4413      	add	r3, r2
 80072f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80072f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	00da      	lsls	r2, r3, #3
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	4413      	add	r3, r2
 800730a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800730e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	b29a      	uxth	r2, r3
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	895b      	ldrh	r3, [r3, #10]
 8007326:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800732a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6959      	ldr	r1, [r3, #20]
 8007336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733a:	b29b      	uxth	r3, r3
 800733c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007340:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007344:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007348:	6800      	ldr	r0, [r0, #0]
 800734a:	f001 fb45 	bl	80089d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800734e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695a      	ldr	r2, [r3, #20]
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	441a      	add	r2, r3
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6a1a      	ldr	r2, [r3, #32]
 8007378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	429a      	cmp	r2, r3
 8007386:	d90f      	bls.n	80073a8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a1a      	ldr	r2, [r3, #32]
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	621a      	str	r2, [r3, #32]
 80073a6:	e00e      	b.n	80073c6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2200      	movs	r2, #0
 80073c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d177      	bne.n	80074c6 <USB_EPStartXfer+0x4c4>
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	00da      	lsls	r2, r3, #3
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	4413      	add	r3, r2
 800740c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800741c:	b29a      	uxth	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007426:	2b3e      	cmp	r3, #62	@ 0x3e
 8007428:	d921      	bls.n	800746e <USB_EPStartXfer+0x46c>
 800742a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <USB_EPStartXfer+0x448>
 8007440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007444:	3b01      	subs	r3, #1
 8007446:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29a      	uxth	r2, r3
 8007450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007454:	b29b      	uxth	r3, r3
 8007456:	029b      	lsls	r3, r3, #10
 8007458:	b29b      	uxth	r3, r3
 800745a:	4313      	orrs	r3, r2
 800745c:	b29b      	uxth	r3, r3
 800745e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007466:	b29a      	uxth	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	e056      	b.n	800751c <USB_EPStartXfer+0x51a>
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10a      	bne.n	800748c <USB_EPStartXfer+0x48a>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007484:	b29a      	uxth	r2, r3
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	e047      	b.n	800751c <USB_EPStartXfer+0x51a>
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d004      	beq.n	80074ac <USB_EPStartXfer+0x4aa>
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a6:	3301      	adds	r3, #1
 80074a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	029b      	lsls	r3, r3, #10
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	4313      	orrs	r3, r2
 80074be:	b29a      	uxth	r2, r3
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	801a      	strh	r2, [r3, #0]
 80074c4:	e02a      	b.n	800751c <USB_EPStartXfer+0x51a>
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d122      	bne.n	800751c <USB_EPStartXfer+0x51a>
 80074d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	623b      	str	r3, [r7, #32]
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	4413      	add	r3, r2
 80074f8:	623b      	str	r3, [r7, #32]
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	00da      	lsls	r2, r3, #3
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	4413      	add	r3, r2
 800750c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	b29a      	uxth	r2, r3
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	891b      	ldrh	r3, [r3, #8]
 8007528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6959      	ldr	r1, [r3, #20]
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753c:	b29b      	uxth	r3, r3
 800753e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007542:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007546:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800754a:	6800      	ldr	r0, [r0, #0]
 800754c:	f001 fa44 	bl	80089d8 <USB_WritePMA>
 8007550:	e3ee      	b.n	8007d30 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d177      	bne.n	8007652 <USB_EPStartXfer+0x650>
 8007562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800756e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800757c:	b29b      	uxth	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007582:	4413      	add	r3, r2
 8007584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	00da      	lsls	r2, r3, #3
 8007594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007596:	4413      	add	r3, r2
 8007598:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800759c:	647b      	str	r3, [r7, #68]	@ 0x44
 800759e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ac:	801a      	strh	r2, [r3, #0]
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80075b4:	d921      	bls.n	80075fa <USB_EPStartXfer+0x5f8>
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <USB_EPStartXfer+0x5d4>
 80075cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80075d0:	3b01      	subs	r3, #1
 80075d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	029b      	lsls	r3, r3, #10
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4313      	orrs	r3, r2
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	e056      	b.n	80076a8 <USB_EPStartXfer+0x6a6>
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <USB_EPStartXfer+0x616>
 8007602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007610:	b29a      	uxth	r2, r3
 8007612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	e047      	b.n	80076a8 <USB_EPStartXfer+0x6a6>
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <USB_EPStartXfer+0x636>
 800762e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007632:	3301      	adds	r3, #1
 8007634:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29a      	uxth	r2, r3
 800763e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007642:	b29b      	uxth	r3, r3
 8007644:	029b      	lsls	r3, r3, #10
 8007646:	b29b      	uxth	r3, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	b29a      	uxth	r2, r3
 800764c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764e:	801a      	strh	r2, [r3, #0]
 8007650:	e02a      	b.n	80076a8 <USB_EPStartXfer+0x6a6>
 8007652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	785b      	ldrb	r3, [r3, #1]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d122      	bne.n	80076a8 <USB_EPStartXfer+0x6a6>
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	653b      	str	r3, [r7, #80]	@ 0x50
 800766e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800767c:	b29b      	uxth	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007682:	4413      	add	r3, r2
 8007684:	653b      	str	r3, [r7, #80]	@ 0x50
 8007686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	00da      	lsls	r2, r3, #3
 8007694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007696:	4413      	add	r3, r2
 8007698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800769c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	891b      	ldrh	r3, [r3, #8]
 80076b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6959      	ldr	r1, [r3, #20]
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076d6:	6800      	ldr	r0, [r0, #0]
 80076d8:	f001 f97e 	bl	80089d8 <USB_WritePMA>
            ep->xfer_buff += len;
 80076dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ec:	441a      	add	r2, r3
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6a1a      	ldr	r2, [r3, #32]
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	429a      	cmp	r2, r3
 8007714:	d90f      	bls.n	8007736 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a1a      	ldr	r2, [r3, #32]
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007726:	1ad2      	subs	r2, r2, r3
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	621a      	str	r2, [r3, #32]
 8007734:	e00e      	b.n	8007754 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2200      	movs	r2, #0
 8007752:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d177      	bne.n	8007860 <USB_EPStartXfer+0x85e>
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800777c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	4413      	add	r3, r2
 8007792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	00da      	lsls	r2, r3, #3
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80077c2:	d921      	bls.n	8007808 <USB_EPStartXfer+0x806>
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <USB_EPStartXfer+0x7e2>
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077de:	3b01      	subs	r3, #1
 80077e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80077e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007800:	b29a      	uxth	r2, r3
 8007802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	e050      	b.n	80078aa <USB_EPStartXfer+0x8a8>
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <USB_EPStartXfer+0x824>
 8007810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e041      	b.n	80078aa <USB_EPStartXfer+0x8a8>
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	085b      	lsrs	r3, r3, #1
 800782c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d004      	beq.n	8007846 <USB_EPStartXfer+0x844>
 800783c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007840:	3301      	adds	r3, #1
 8007842:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007850:	b29b      	uxth	r3, r3
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	b29b      	uxth	r3, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	b29a      	uxth	r2, r3
 800785a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e024      	b.n	80078aa <USB_EPStartXfer+0x8a8>
 8007860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d11c      	bne.n	80078aa <USB_EPStartXfer+0x8a8>
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800787e:	b29b      	uxth	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007884:	4413      	add	r3, r2
 8007886:	643b      	str	r3, [r7, #64]	@ 0x40
 8007888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	00da      	lsls	r2, r3, #3
 8007896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007898:	4413      	add	r3, r2
 800789a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800789e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	895b      	ldrh	r3, [r3, #10]
 80078b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6959      	ldr	r1, [r3, #20]
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078d8:	6800      	ldr	r0, [r0, #0]
 80078da:	f001 f87d 	bl	80089d8 <USB_WritePMA>
 80078de:	e227      	b.n	8007d30 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80078f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007916:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	441a      	add	r2, r3
 8007934:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800793c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007948:	b29b      	uxth	r3, r3
 800794a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800794c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007966:	b29b      	uxth	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800796c:	4413      	add	r3, r2
 800796e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	00da      	lsls	r2, r3, #3
 800797e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007980:	4413      	add	r3, r2
 8007982:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798c:	b29a      	uxth	r2, r3
 800798e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007990:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	891b      	ldrh	r3, [r3, #8]
 800799e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6959      	ldr	r1, [r3, #20]
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079c0:	6800      	ldr	r0, [r0, #0]
 80079c2:	f001 f809 	bl	80089d8 <USB_WritePMA>
 80079c6:	e1b3      	b.n	8007d30 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d8:	1ad2      	subs	r2, r2, r3
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80c6 	beq.w	8007b9a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d177      	bne.n	8007b1a <USB_EPStartXfer+0xb18>
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a4a:	4413      	add	r3, r2
 8007a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	00da      	lsls	r2, r3, #3
 8007a5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a5e:	4413      	add	r3, r2
 8007a60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a64:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a7c:	d921      	bls.n	8007ac2 <USB_EPStartXfer+0xac0>
 8007a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <USB_EPStartXfer+0xa9c>
 8007a94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	029b      	lsls	r3, r3, #10
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e050      	b.n	8007b64 <USB_EPStartXfer+0xb62>
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <USB_EPStartXfer+0xade>
 8007aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e041      	b.n	8007b64 <USB_EPStartXfer+0xb62>
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <USB_EPStartXfer+0xafe>
 8007af6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007afa:	3301      	adds	r3, #1
 8007afc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	029b      	lsls	r3, r3, #10
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	4313      	orrs	r3, r2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	e024      	b.n	8007b64 <USB_EPStartXfer+0xb62>
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d11c      	bne.n	8007b64 <USB_EPStartXfer+0xb62>
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b3e:	4413      	add	r3, r2
 8007b40:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	00da      	lsls	r2, r3, #3
 8007b50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b52:	4413      	add	r3, r2
 8007b54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	895b      	ldrh	r3, [r3, #10]
 8007b70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6959      	ldr	r1, [r3, #20]
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b92:	6800      	ldr	r0, [r0, #0]
 8007b94:	f000 ff20 	bl	80089d8 <USB_WritePMA>
 8007b98:	e0ca      	b.n	8007d30 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d177      	bne.n	8007c9a <USB_EPStartXfer+0xc98>
 8007baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bca:	4413      	add	r3, r2
 8007bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	00da      	lsls	r2, r3, #3
 8007bdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bde:	4413      	add	r3, r2
 8007be0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007be6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bfc:	d921      	bls.n	8007c42 <USB_EPStartXfer+0xc40>
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	f003 031f 	and.w	r3, r3, #31
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <USB_EPStartXfer+0xc1c>
 8007c14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	029b      	lsls	r3, r3, #10
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	e05c      	b.n	8007cfc <USB_EPStartXfer+0xcfa>
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <USB_EPStartXfer+0xc5e>
 8007c4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c5c:	801a      	strh	r2, [r3, #0]
 8007c5e:	e04d      	b.n	8007cfc <USB_EPStartXfer+0xcfa>
 8007c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c64:	085b      	lsrs	r3, r3, #1
 8007c66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d004      	beq.n	8007c80 <USB_EPStartXfer+0xc7e>
 8007c76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	029b      	lsls	r3, r3, #10
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	e030      	b.n	8007cfc <USB_EPStartXfer+0xcfa>
 8007c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d128      	bne.n	8007cfc <USB_EPStartXfer+0xcfa>
 8007caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cce:	4413      	add	r3, r2
 8007cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	00da      	lsls	r2, r3, #3
 8007ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007cfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	891b      	ldrh	r3, [r3, #8]
 8007d08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6959      	ldr	r1, [r3, #20]
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d2a:	6800      	ldr	r0, [r0, #0]
 8007d2c:	f000 fe54 	bl	80089d8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d56:	817b      	strh	r3, [r7, #10]
 8007d58:	897b      	ldrh	r3, [r7, #10]
 8007d5a:	f083 0310 	eor.w	r3, r3, #16
 8007d5e:	817b      	strh	r3, [r7, #10]
 8007d60:	897b      	ldrh	r3, [r7, #10]
 8007d62:	f083 0320 	eor.w	r3, r3, #32
 8007d66:	817b      	strh	r3, [r7, #10]
 8007d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	441a      	add	r2, r3
 8007d82:	897b      	ldrh	r3, [r7, #10]
 8007d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	8013      	strh	r3, [r2, #0]
 8007d98:	f000 bcde 	b.w	8008758 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	7b1b      	ldrb	r3, [r3, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 80bb 	bne.w	8007f24 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d917      	bls.n	8007dfa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	619a      	str	r2, [r3, #24]
 8007df8:	e00e      	b.n	8007e18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2200      	movs	r2, #0
 8007e16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	461a      	mov	r2, r3
 8007e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	00da      	lsls	r2, r3, #3
 8007e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e54:	4413      	add	r3, r2
 8007e56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e70:	801a      	strh	r2, [r3, #0]
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e76:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e78:	d924      	bls.n	8007ec4 <USB_EPStartXfer+0xec2>
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <USB_EPStartXfer+0xe98>
 8007e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007e94:	3b01      	subs	r3, #1
 8007e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	029b      	lsls	r3, r3, #10
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	f000 bc10 	b.w	80086e4 <USB_EPStartXfer+0x16e2>
 8007ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10c      	bne.n	8007ee6 <USB_EPStartXfer+0xee4>
 8007ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	e3fe      	b.n	80086e4 <USB_EPStartXfer+0x16e2>
 8007ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <USB_EPStartXfer+0xf04>
 8007efc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f00:	3301      	adds	r3, #1
 8007f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	029b      	lsls	r3, r3, #10
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	e3df      	b.n	80086e4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	78db      	ldrb	r3, [r3, #3]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	f040 8218 	bne.w	8008366 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 809d 	bne.w	8008082 <USB_EPStartXfer+0x1080>
 8007f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	00da      	lsls	r2, r3, #3
 8007f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f84:	4413      	add	r3, r2
 8007f86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fb0:	d92b      	bls.n	800800a <USB_EPStartXfer+0x1008>
 8007fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f003 031f 	and.w	r3, r3, #31
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <USB_EPStartXfer+0xfe0>
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	029b      	lsls	r3, r3, #10
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008000:	b29a      	uxth	r2, r3
 8008002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	e070      	b.n	80080ec <USB_EPStartXfer+0x10ea>
 800800a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10c      	bne.n	8008034 <USB_EPStartXfer+0x1032>
 800801a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802a:	b29a      	uxth	r2, r3
 800802c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e05b      	b.n	80080ec <USB_EPStartXfer+0x10ea>
 8008034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	085b      	lsrs	r3, r3, #1
 8008042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <USB_EPStartXfer+0x1062>
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800805e:	3301      	adds	r3, #1
 8008060:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	b29a      	uxth	r2, r3
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008070:	b29b      	uxth	r3, r3
 8008072:	029b      	lsls	r3, r3, #10
 8008074:	b29b      	uxth	r3, r3
 8008076:	4313      	orrs	r3, r2
 8008078:	b29a      	uxth	r2, r3
 800807a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	e034      	b.n	80080ec <USB_EPStartXfer+0x10ea>
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d12c      	bne.n	80080ec <USB_EPStartXfer+0x10ea>
 8008092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080b6:	4413      	add	r3, r2
 80080b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	00da      	lsls	r2, r3, #3
 80080ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080ce:	4413      	add	r3, r2
 80080d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80080fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f040 809d 	bne.w	8008246 <USB_EPStartXfer+0x1244>
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800811a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008128:	b29b      	uxth	r3, r3
 800812a:	461a      	mov	r2, r3
 800812c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008130:	4413      	add	r3, r2
 8008132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	00da      	lsls	r2, r3, #3
 8008144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008148:	4413      	add	r3, r2
 800814a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800814e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008152:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800815e:	b29a      	uxth	r2, r3
 8008160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b3e      	cmp	r3, #62	@ 0x3e
 8008174:	d92b      	bls.n	80081ce <USB_EPStartXfer+0x11cc>
 8008176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2b00      	cmp	r3, #0
 800819a:	d104      	bne.n	80081a6 <USB_EPStartXfer+0x11a4>
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081a0:	3b01      	subs	r3, #1
 80081a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	029b      	lsls	r3, r3, #10
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	4313      	orrs	r3, r2
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	e069      	b.n	80082a2 <USB_EPStartXfer+0x12a0>
 80081ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10c      	bne.n	80081f8 <USB_EPStartXfer+0x11f6>
 80081de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081f4:	801a      	strh	r2, [r3, #0]
 80081f6:	e054      	b.n	80082a2 <USB_EPStartXfer+0x12a0>
 80081f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800820a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d004      	beq.n	8008228 <USB_EPStartXfer+0x1226>
 800821e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008222:	3301      	adds	r3, #1
 8008224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008234:	b29b      	uxth	r3, r3
 8008236:	029b      	lsls	r3, r3, #10
 8008238:	b29b      	uxth	r3, r3
 800823a:	4313      	orrs	r3, r2
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008242:	801a      	strh	r2, [r3, #0]
 8008244:	e02d      	b.n	80082a2 <USB_EPStartXfer+0x12a0>
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d125      	bne.n	80082a2 <USB_EPStartXfer+0x12a0>
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008264:	b29b      	uxth	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800826c:	4413      	add	r3, r2
 800826e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	00da      	lsls	r2, r3, #3
 8008280:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008284:	4413      	add	r3, r2
 8008286:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800828a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800828e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	b29a      	uxth	r2, r3
 800829c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8218 	beq.w	80086e4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80082d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <USB_EPStartXfer+0x12ea>
 80082e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80082e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10d      	bne.n	8008308 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80082f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 81f5 	bne.w	80086e4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80082fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 81ee 	bne.w	80086e4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	b29b      	uxth	r3, r3
 8008326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800832a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	441a      	add	r2, r3
 800834c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800835c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008360:	b29b      	uxth	r3, r3
 8008362:	8013      	strh	r3, [r2, #0]
 8008364:	e1be      	b.n	80086e4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	78db      	ldrb	r3, [r3, #3]
 8008372:	2b01      	cmp	r3, #1
 8008374:	f040 81b4 	bne.w	80086e0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699a      	ldr	r2, [r3, #24]
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	429a      	cmp	r2, r3
 8008392:	d917      	bls.n	80083c4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80083a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699a      	ldr	r2, [r3, #24]
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	619a      	str	r2, [r3, #24]
 80083c2:	e00e      	b.n	80083e2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80083c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 8085 	bne.w	80084fe <USB_EPStartXfer+0x14fc>
 80083f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008410:	b29b      	uxth	r3, r3
 8008412:	461a      	mov	r2, r3
 8008414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008418:	4413      	add	r3, r2
 800841a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800841e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	00da      	lsls	r2, r3, #3
 800842c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008430:	4413      	add	r3, r2
 8008432:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800843a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008446:	b29a      	uxth	r2, r3
 8008448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800844c:	801a      	strh	r2, [r3, #0]
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008452:	2b3e      	cmp	r3, #62	@ 0x3e
 8008454:	d923      	bls.n	800849e <USB_EPStartXfer+0x149c>
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <USB_EPStartXfer+0x1474>
 800846c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008470:	3b01      	subs	r3, #1
 8008472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	b29a      	uxth	r2, r3
 800847e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008482:	b29b      	uxth	r3, r3
 8008484:	029b      	lsls	r3, r3, #10
 8008486:	b29b      	uxth	r3, r3
 8008488:	4313      	orrs	r3, r2
 800848a:	b29b      	uxth	r3, r3
 800848c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008494:	b29a      	uxth	r2, r3
 8008496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	e060      	b.n	8008560 <USB_EPStartXfer+0x155e>
 800849e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10c      	bne.n	80084c0 <USB_EPStartXfer+0x14be>
 80084a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084bc:	801a      	strh	r2, [r3, #0]
 80084be:	e04f      	b.n	8008560 <USB_EPStartXfer+0x155e>
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c4:	085b      	lsrs	r3, r3, #1
 80084c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d004      	beq.n	80084e0 <USB_EPStartXfer+0x14de>
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084da:	3301      	adds	r3, #1
 80084dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	029b      	lsls	r3, r3, #10
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	4313      	orrs	r3, r2
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	e030      	b.n	8008560 <USB_EPStartXfer+0x155e>
 80084fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d128      	bne.n	8008560 <USB_EPStartXfer+0x155e>
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800852a:	b29b      	uxth	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008532:	4413      	add	r3, r2
 8008534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	00da      	lsls	r2, r3, #3
 8008546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800854a:	4413      	add	r3, r2
 800854c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008558:	b29a      	uxth	r2, r3
 800855a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800856e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	785b      	ldrb	r3, [r3, #1]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 8085 	bne.w	800868a <USB_EPStartXfer+0x1688>
 8008580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800858e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800859c:	b29b      	uxth	r3, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085a4:	4413      	add	r3, r2
 80085a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	00da      	lsls	r2, r3, #3
 80085b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085bc:	4413      	add	r3, r2
 80085be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085de:	2b3e      	cmp	r3, #62	@ 0x3e
 80085e0:	d923      	bls.n	800862a <USB_EPStartXfer+0x1628>
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e6:	095b      	lsrs	r3, r3, #5
 80085e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f0:	f003 031f 	and.w	r3, r3, #31
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d104      	bne.n	8008602 <USB_EPStartXfer+0x1600>
 80085f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085fc:	3b01      	subs	r3, #1
 80085fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800860e:	b29b      	uxth	r3, r3
 8008610:	029b      	lsls	r3, r3, #10
 8008612:	b29b      	uxth	r3, r3
 8008614:	4313      	orrs	r3, r2
 8008616:	b29b      	uxth	r3, r3
 8008618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008620:	b29a      	uxth	r2, r3
 8008622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	e05c      	b.n	80086e4 <USB_EPStartXfer+0x16e2>
 800862a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10c      	bne.n	800864c <USB_EPStartXfer+0x164a>
 8008632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008642:	b29a      	uxth	r2, r3
 8008644:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008648:	801a      	strh	r2, [r3, #0]
 800864a:	e04b      	b.n	80086e4 <USB_EPStartXfer+0x16e2>
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008650:	085b      	lsrs	r3, r3, #1
 8008652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <USB_EPStartXfer+0x166a>
 8008662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008666:	3301      	adds	r3, #1
 8008668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800866c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29a      	uxth	r2, r3
 8008674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008678:	b29b      	uxth	r3, r3
 800867a:	029b      	lsls	r3, r3, #10
 800867c:	b29b      	uxth	r3, r3
 800867e:	4313      	orrs	r3, r2
 8008680:	b29a      	uxth	r2, r3
 8008682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	e02c      	b.n	80086e4 <USB_EPStartXfer+0x16e2>
 800868a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d124      	bne.n	80086e4 <USB_EPStartXfer+0x16e2>
 800869a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086b0:	4413      	add	r3, r2
 80086b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	00da      	lsls	r2, r3, #3
 80086c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086c8:	4413      	add	r3, r2
 80086ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086dc:	801a      	strh	r2, [r3, #0]
 80086de:	e001      	b.n	80086e4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e03a      	b.n	800875a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800870e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008712:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008716:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800871a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800871e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008722:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	441a      	add	r2, r3
 8008740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800874c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008754:	b29b      	uxth	r3, r3
 8008756:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d020      	beq.n	80087b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800878c:	81bb      	strh	r3, [r7, #12]
 800878e:	89bb      	ldrh	r3, [r7, #12]
 8008790:	f083 0310 	eor.w	r3, r3, #16
 8008794:	81bb      	strh	r3, [r7, #12]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	441a      	add	r2, r3
 80087a0:	89bb      	ldrh	r3, [r7, #12]
 80087a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8013      	strh	r3, [r2, #0]
 80087b6:	e01f      	b.n	80087f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ce:	81fb      	strh	r3, [r7, #14]
 80087d0:	89fb      	ldrh	r3, [r7, #14]
 80087d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087d6:	81fb      	strh	r3, [r7, #14]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	89fb      	ldrh	r3, [r7, #14]
 80087e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	7b1b      	ldrb	r3, [r3, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f040 809d 	bne.w	8008954 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d04c      	beq.n	80088bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	823b      	strh	r3, [r7, #16]
 8008830:	8a3b      	ldrh	r3, [r7, #16]
 8008832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	d01b      	beq.n	8008872 <USB_EPClearStall+0x6c>
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800884c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008850:	81fb      	strh	r3, [r7, #14]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	441a      	add	r2, r3
 800885c:	89fb      	ldrh	r3, [r7, #14]
 800885e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800886a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800886e:	b29b      	uxth	r3, r3
 8008870:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	78db      	ldrb	r3, [r3, #3]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d06c      	beq.n	8008954 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800888c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008890:	81bb      	strh	r3, [r7, #12]
 8008892:	89bb      	ldrh	r3, [r7, #12]
 8008894:	f083 0320 	eor.w	r3, r3, #32
 8008898:	81bb      	strh	r3, [r7, #12]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	441a      	add	r2, r3
 80088a4:	89bb      	ldrh	r3, [r7, #12]
 80088a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	8013      	strh	r3, [r2, #0]
 80088ba:	e04b      	b.n	8008954 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	82fb      	strh	r3, [r7, #22]
 80088ca:	8afb      	ldrh	r3, [r7, #22]
 80088cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01b      	beq.n	800890c <USB_EPClearStall+0x106>
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ea:	82bb      	strh	r3, [r7, #20]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	441a      	add	r2, r3
 80088f6:	8abb      	ldrh	r3, [r7, #20]
 80088f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008900:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008908:	b29b      	uxth	r3, r3
 800890a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800891e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008922:	827b      	strh	r3, [r7, #18]
 8008924:	8a7b      	ldrh	r3, [r7, #18]
 8008926:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800892a:	827b      	strh	r3, [r7, #18]
 800892c:	8a7b      	ldrh	r3, [r7, #18]
 800892e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008932:	827b      	strh	r3, [r7, #18]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	441a      	add	r2, r3
 800893e:	8a7b      	ldrh	r3, [r7, #18]
 8008940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800894c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008950:	b29b      	uxth	r3, r3
 8008952:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d103      	bne.n	800897c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2280      	movs	r2, #128	@ 0x80
 8008978:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008998:	b29b      	uxth	r3, r3
 800899a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80089ca:	68fb      	ldr	r3, [r7, #12]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089d8:	b480      	push	{r7}
 80089da:	b08b      	sub	sp, #44	@ 0x2c
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4611      	mov	r1, r2
 80089e4:	461a      	mov	r2, r3
 80089e6:	460b      	mov	r3, r1
 80089e8:	80fb      	strh	r3, [r7, #6]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80089ee:	88bb      	ldrh	r3, [r7, #4]
 80089f0:	3301      	adds	r3, #1
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a0e:	e01b      	b.n	8008a48 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	b21a      	sxth	r2, r3
 8008a20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	b21b      	sxth	r3, r3
 8008a28:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	8a7a      	ldrh	r2, [r7, #18]
 8008a2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	3302      	adds	r3, #2
 8008a34:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a44:	3b01      	subs	r3, #1
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e0      	bne.n	8008a10 <USB_WritePMA+0x38>
  }
}
 8008a4e:	bf00      	nop
 8008a50:	bf00      	nop
 8008a52:	372c      	adds	r7, #44	@ 0x2c
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b08b      	sub	sp, #44	@ 0x2c
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	80fb      	strh	r3, [r7, #6]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a72:	88bb      	ldrh	r3, [r7, #4]
 8008a74:	085b      	lsrs	r3, r3, #1
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a82:	88fa      	ldrh	r2, [r7, #6]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a92:	e018      	b.n	8008ac6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	3301      	adds	r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	3301      	adds	r3, #1
 8008abe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e3      	bne.n	8008a94 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008acc:	88bb      	ldrh	r3, [r7, #4]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ae8:	bf00      	nop
 8008aea:	372c      	adds	r7, #44	@ 0x2c
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b00:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008b04:	f002 fc1e 	bl	800b344 <USBD_static_malloc>
 8008b08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	32b0      	adds	r2, #176	@ 0xb0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008b20:	2302      	movs	r3, #2
 8008b22:	e0d4      	b.n	8008cce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008b24:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b28:	2100      	movs	r1, #0
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f002 fcdc 	bl	800b4e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32b0      	adds	r2, #176	@ 0xb0
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	32b0      	adds	r2, #176	@ 0xb0
 8008b4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7c1b      	ldrb	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d138      	bne.n	8008bce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8008cd8 <USBD_CDC_Init+0x1e4>)
 8008b5e:	7819      	ldrb	r1, [r3, #0]
 8008b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b64:	2202      	movs	r2, #2
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f002 fa93 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8008cd8 <USBD_CDC_Init+0x1e4>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	f003 020f 	and.w	r2, r3, #15
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	3324      	adds	r3, #36	@ 0x24
 8008b82:	2201      	movs	r2, #1
 8008b84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b86:	4b55      	ldr	r3, [pc, #340]	@ (8008cdc <USBD_CDC_Init+0x1e8>)
 8008b88:	7819      	ldrb	r1, [r3, #0]
 8008b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b8e:	2202      	movs	r2, #2
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f002 fa7e 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b96:	4b51      	ldr	r3, [pc, #324]	@ (8008cdc <USBD_CDC_Init+0x1e8>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	f003 020f 	and.w	r2, r3, #15
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008bae:	2201      	movs	r2, #1
 8008bb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ce0 <USBD_CDC_Init+0x1ec>)
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	f003 020f 	and.w	r2, r3, #15
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	3326      	adds	r3, #38	@ 0x26
 8008bc8:	2210      	movs	r2, #16
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	e035      	b.n	8008c3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008bce:	4b42      	ldr	r3, [pc, #264]	@ (8008cd8 <USBD_CDC_Init+0x1e4>)
 8008bd0:	7819      	ldrb	r1, [r3, #0]
 8008bd2:	2340      	movs	r3, #64	@ 0x40
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f002 fa5b 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd8 <USBD_CDC_Init+0x1e4>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	3324      	adds	r3, #36	@ 0x24
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bf6:	4b39      	ldr	r3, [pc, #228]	@ (8008cdc <USBD_CDC_Init+0x1e8>)
 8008bf8:	7819      	ldrb	r1, [r3, #0]
 8008bfa:	2340      	movs	r3, #64	@ 0x40
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f002 fa47 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c04:	4b35      	ldr	r3, [pc, #212]	@ (8008cdc <USBD_CDC_Init+0x1e8>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	f003 020f 	and.w	r2, r3, #15
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c20:	4b2f      	ldr	r3, [pc, #188]	@ (8008ce0 <USBD_CDC_Init+0x1ec>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	3326      	adds	r3, #38	@ 0x26
 8008c36:	2210      	movs	r2, #16
 8008c38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c3a:	4b29      	ldr	r3, [pc, #164]	@ (8008ce0 <USBD_CDC_Init+0x1ec>)
 8008c3c:	7819      	ldrb	r1, [r3, #0]
 8008c3e:	2308      	movs	r3, #8
 8008c40:	2203      	movs	r2, #3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f002 fa25 	bl	800b092 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008c48:	4b25      	ldr	r3, [pc, #148]	@ (8008ce0 <USBD_CDC_Init+0x1ec>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 020f 	and.w	r2, r3, #15
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3324      	adds	r3, #36	@ 0x24
 8008c5e:	2201      	movs	r2, #1
 8008c60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	33b0      	adds	r3, #176	@ 0xb0
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e018      	b.n	8008cce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7c1b      	ldrb	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8008cdc <USBD_CDC_Init+0x1e8>)
 8008ca6:	7819      	ldrb	r1, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f002 fadc 	bl	800b270 <USBD_LL_PrepareReceive>
 8008cb8:	e008      	b.n	8008ccc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008cba:	4b08      	ldr	r3, [pc, #32]	@ (8008cdc <USBD_CDC_Init+0x1e8>)
 8008cbc:	7819      	ldrb	r1, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cc4:	2340      	movs	r3, #64	@ 0x40
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f002 fad2 	bl	800b270 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200000b3 	.word	0x200000b3
 8008cdc:	200000b4 	.word	0x200000b4
 8008ce0:	200000b5 	.word	0x200000b5

08008ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8008ddc <USBD_CDC_DeInit+0xf8>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f002 f9f1 	bl	800b0de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008cfc:	4b37      	ldr	r3, [pc, #220]	@ (8008ddc <USBD_CDC_DeInit+0xf8>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	f003 020f 	and.w	r2, r3, #15
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	3324      	adds	r3, #36	@ 0x24
 8008d12:	2200      	movs	r2, #0
 8008d14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008d16:	4b32      	ldr	r3, [pc, #200]	@ (8008de0 <USBD_CDC_DeInit+0xfc>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f002 f9de 	bl	800b0de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008d22:	4b2f      	ldr	r3, [pc, #188]	@ (8008de0 <USBD_CDC_DeInit+0xfc>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	f003 020f 	and.w	r2, r3, #15
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008d3e:	4b29      	ldr	r3, [pc, #164]	@ (8008de4 <USBD_CDC_DeInit+0x100>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f002 f9ca 	bl	800b0de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008d4a:	4b26      	ldr	r3, [pc, #152]	@ (8008de4 <USBD_CDC_DeInit+0x100>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	f003 020f 	and.w	r2, r3, #15
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	3324      	adds	r3, #36	@ 0x24
 8008d60:	2200      	movs	r2, #0
 8008d62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008d64:	4b1f      	ldr	r3, [pc, #124]	@ (8008de4 <USBD_CDC_DeInit+0x100>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f003 020f 	and.w	r2, r3, #15
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	440b      	add	r3, r1
 8008d78:	3326      	adds	r3, #38	@ 0x26
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	32b0      	adds	r2, #176	@ 0xb0
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01f      	beq.n	8008dd0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	33b0      	adds	r3, #176	@ 0xb0
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	32b0      	adds	r2, #176	@ 0xb0
 8008dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f002 fad4 	bl	800b360 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	32b0      	adds	r2, #176	@ 0xb0
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200000b3 	.word	0x200000b3
 8008de0:	200000b4 	.word	0x200000b4
 8008de4:	200000b5 	.word	0x200000b5

08008de8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32b0      	adds	r2, #176	@ 0xb0
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e0bf      	b.n	8008f98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d050      	beq.n	8008ec6 <USBD_CDC_Setup+0xde>
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	f040 80af 	bne.w	8008f88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	88db      	ldrh	r3, [r3, #6]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d03a      	beq.n	8008ea8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da1b      	bge.n	8008e74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	33b0      	adds	r3, #176	@ 0xb0
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008e52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	88d2      	ldrh	r2, [r2, #6]
 8008e58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b07      	cmp	r3, #7
 8008e60:	bf28      	it	cs
 8008e62:	2307      	movcs	r3, #7
 8008e64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	89fa      	ldrh	r2, [r7, #14]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 fceb 	bl	800a848 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008e72:	e090      	b.n	8008f96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	785a      	ldrb	r2, [r3, #1]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	88db      	ldrh	r3, [r3, #6]
 8008e82:	2b3f      	cmp	r3, #63	@ 0x3f
 8008e84:	d803      	bhi.n	8008e8e <USBD_CDC_Setup+0xa6>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	e000      	b.n	8008e90 <USBD_CDC_Setup+0xa8>
 8008e8e:	2240      	movs	r2, #64	@ 0x40
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008e96:	6939      	ldr	r1, [r7, #16]
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fcfd 	bl	800a8a0 <USBD_CtlPrepareRx>
      break;
 8008ea6:	e076      	b.n	8008f96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	33b0      	adds	r3, #176	@ 0xb0
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	7850      	ldrb	r0, [r2, #1]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	4798      	blx	r3
      break;
 8008ec4:	e067      	b.n	8008f96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	785b      	ldrb	r3, [r3, #1]
 8008eca:	2b0b      	cmp	r3, #11
 8008ecc:	d851      	bhi.n	8008f72 <USBD_CDC_Setup+0x18a>
 8008ece:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <USBD_CDC_Setup+0xec>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008f05 	.word	0x08008f05
 8008ed8:	08008f81 	.word	0x08008f81
 8008edc:	08008f73 	.word	0x08008f73
 8008ee0:	08008f73 	.word	0x08008f73
 8008ee4:	08008f73 	.word	0x08008f73
 8008ee8:	08008f73 	.word	0x08008f73
 8008eec:	08008f73 	.word	0x08008f73
 8008ef0:	08008f73 	.word	0x08008f73
 8008ef4:	08008f73 	.word	0x08008f73
 8008ef8:	08008f73 	.word	0x08008f73
 8008efc:	08008f2f 	.word	0x08008f2f
 8008f00:	08008f59 	.word	0x08008f59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d107      	bne.n	8008f20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f10:	f107 030a 	add.w	r3, r7, #10
 8008f14:	2202      	movs	r2, #2
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 fc95 	bl	800a848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f1e:	e032      	b.n	8008f86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fc13 	bl	800a74e <USBD_CtlError>
            ret = USBD_FAIL;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f2c:	e02b      	b.n	8008f86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d107      	bne.n	8008f4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f3a:	f107 030d 	add.w	r3, r7, #13
 8008f3e:	2201      	movs	r2, #1
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 fc80 	bl	800a848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f48:	e01d      	b.n	8008f86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fbfe 	bl	800a74e <USBD_CtlError>
            ret = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	75fb      	strb	r3, [r7, #23]
          break;
 8008f56:	e016      	b.n	8008f86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d00f      	beq.n	8008f84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fbf1 	bl	800a74e <USBD_CtlError>
            ret = USBD_FAIL;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f70:	e008      	b.n	8008f84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fbea 	bl	800a74e <USBD_CtlError>
          ret = USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7e:	e002      	b.n	8008f86 <USBD_CDC_Setup+0x19e>
          break;
 8008f80:	bf00      	nop
 8008f82:	e008      	b.n	8008f96 <USBD_CDC_Setup+0x1ae>
          break;
 8008f84:	bf00      	nop
      }
      break;
 8008f86:	e006      	b.n	8008f96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 fbdf 	bl	800a74e <USBD_CtlError>
      ret = USBD_FAIL;
 8008f90:	2303      	movs	r3, #3
 8008f92:	75fb      	strb	r3, [r7, #23]
      break;
 8008f94:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	32b0      	adds	r2, #176	@ 0xb0
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e065      	b.n	8009096 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	32b0      	adds	r2, #176	@ 0xb0
 8008fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	3318      	adds	r3, #24
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d02f      	beq.n	8009054 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	f003 020f 	and.w	r2, r3, #15
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	3318      	adds	r3, #24
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	f003 010f 	and.w	r1, r3, #15
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	460b      	mov	r3, r1
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	4403      	add	r3, r0
 800901c:	3320      	adds	r3, #32
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	fbb2 f1f3 	udiv	r1, r2, r3
 8009024:	fb01 f303 	mul.w	r3, r1, r3
 8009028:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800902a:	2b00      	cmp	r3, #0
 800902c:	d112      	bne.n	8009054 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	f003 020f 	and.w	r2, r3, #15
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	440b      	add	r3, r1
 8009040:	3318      	adds	r3, #24
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009046:	78f9      	ldrb	r1, [r7, #3]
 8009048:	2300      	movs	r3, #0
 800904a:	2200      	movs	r2, #0
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f002 f8ee 	bl	800b22e <USBD_LL_Transmit>
 8009052:	e01f      	b.n	8009094 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2200      	movs	r2, #0
 8009058:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	33b0      	adds	r3, #176	@ 0xb0
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d010      	beq.n	8009094 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	33b0      	adds	r3, #176	@ 0xb0
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	32b0      	adds	r2, #176	@ 0xb0
 80090b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	32b0      	adds	r2, #176	@ 0xb0
 80090c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e01a      	b.n	8009106 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f002 f8ec 	bl	800b2b2 <USBD_LL_GetRxDataSize>
 80090da:	4602      	mov	r2, r0
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	33b0      	adds	r3, #176	@ 0xb0
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009100:	4611      	mov	r1, r2
 8009102:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	32b0      	adds	r2, #176	@ 0xb0
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e024      	b.n	800917a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	33b0      	adds	r3, #176	@ 0xb0
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d019      	beq.n	8009178 <USBD_CDC_EP0_RxReady+0x6a>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800914a:	2bff      	cmp	r3, #255	@ 0xff
 800914c:	d014      	beq.n	8009178 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	33b0      	adds	r3, #176	@ 0xb0
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009166:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800916e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	22ff      	movs	r2, #255	@ 0xff
 8009174:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800918c:	2182      	movs	r1, #130	@ 0x82
 800918e:	4818      	ldr	r0, [pc, #96]	@ (80091f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009190:	f000 fc7d 	bl	8009a8e <USBD_GetEpDesc>
 8009194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009196:	2101      	movs	r1, #1
 8009198:	4815      	ldr	r0, [pc, #84]	@ (80091f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800919a:	f000 fc78 	bl	8009a8e <USBD_GetEpDesc>
 800919e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091a0:	2181      	movs	r1, #129	@ 0x81
 80091a2:	4813      	ldr	r0, [pc, #76]	@ (80091f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091a4:	f000 fc73 	bl	8009a8e <USBD_GetEpDesc>
 80091a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2210      	movs	r2, #16
 80091b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d006      	beq.n	80091ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2200      	movs	r2, #0
 80091c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091c4:	711a      	strb	r2, [r3, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091d8:	711a      	strb	r2, [r3, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2243      	movs	r2, #67	@ 0x43
 80091e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091e4:	4b02      	ldr	r3, [pc, #8]	@ (80091f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	20000070 	.word	0x20000070

080091f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091fc:	2182      	movs	r1, #130	@ 0x82
 80091fe:	4818      	ldr	r0, [pc, #96]	@ (8009260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009200:	f000 fc45 	bl	8009a8e <USBD_GetEpDesc>
 8009204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009206:	2101      	movs	r1, #1
 8009208:	4815      	ldr	r0, [pc, #84]	@ (8009260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800920a:	f000 fc40 	bl	8009a8e <USBD_GetEpDesc>
 800920e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009210:	2181      	movs	r1, #129	@ 0x81
 8009212:	4813      	ldr	r0, [pc, #76]	@ (8009260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009214:	f000 fc3b 	bl	8009a8e <USBD_GetEpDesc>
 8009218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2210      	movs	r2, #16
 8009224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d006      	beq.n	800923a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2200      	movs	r2, #0
 8009230:	711a      	strb	r2, [r3, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f042 0202 	orr.w	r2, r2, #2
 8009238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d006      	beq.n	800924e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	711a      	strb	r2, [r3, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f042 0202 	orr.w	r2, r2, #2
 800924c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2243      	movs	r2, #67	@ 0x43
 8009252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009254:	4b02      	ldr	r3, [pc, #8]	@ (8009260 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000070 	.word	0x20000070

08009264 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800926c:	2182      	movs	r1, #130	@ 0x82
 800926e:	4818      	ldr	r0, [pc, #96]	@ (80092d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009270:	f000 fc0d 	bl	8009a8e <USBD_GetEpDesc>
 8009274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009276:	2101      	movs	r1, #1
 8009278:	4815      	ldr	r0, [pc, #84]	@ (80092d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800927a:	f000 fc08 	bl	8009a8e <USBD_GetEpDesc>
 800927e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009280:	2181      	movs	r1, #129	@ 0x81
 8009282:	4813      	ldr	r0, [pc, #76]	@ (80092d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009284:	f000 fc03 	bl	8009a8e <USBD_GetEpDesc>
 8009288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2210      	movs	r2, #16
 8009294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d006      	beq.n	80092aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2200      	movs	r2, #0
 80092a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092a4:	711a      	strb	r2, [r3, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d006      	beq.n	80092be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092b8:	711a      	strb	r2, [r3, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2243      	movs	r2, #67	@ 0x43
 80092c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092c4:	4b02      	ldr	r3, [pc, #8]	@ (80092d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000070 	.word	0x20000070

080092d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	220a      	movs	r2, #10
 80092e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80092e2:	4b03      	ldr	r3, [pc, #12]	@ (80092f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	2000002c 	.word	0x2000002c

080092f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009304:	2303      	movs	r3, #3
 8009306:	e009      	b.n	800931c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	33b0      	adds	r3, #176	@ 0xb0
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	32b0      	adds	r2, #176	@ 0xb0
 800933e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009342:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800934a:	2303      	movs	r3, #3
 800934c:	e008      	b.n	8009360 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	32b0      	adds	r2, #176	@ 0xb0
 8009380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009384:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	e004      	b.n	800939a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	32b0      	adds	r2, #176	@ 0xb0
 80093ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	32b0      	adds	r2, #176	@ 0xb0
 80093ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e018      	b.n	8009408 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7c1b      	ldrb	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093de:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <USBD_CDC_ReceivePacket+0x68>)
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 ff3f 	bl	800b270 <USBD_LL_PrepareReceive>
 80093f2:	e008      	b.n	8009406 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093f4:	4b06      	ldr	r3, [pc, #24]	@ (8009410 <USBD_CDC_ReceivePacket+0x68>)
 80093f6:	7819      	ldrb	r1, [r3, #0]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093fe:	2340      	movs	r3, #64	@ 0x40
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 ff35 	bl	800b270 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	200000b4 	.word	0x200000b4

08009414 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009428:	2303      	movs	r3, #3
 800942a:	e01f      	b.n	800946c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	79fa      	ldrb	r2, [r7, #7]
 800945e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f001 fd99 	bl	800af98 <USBD_LL_Init>
 8009466:	4603      	mov	r3, r0
 8009468:	75fb      	strb	r3, [r7, #23]

  return ret;
 800946a:	7dfb      	ldrb	r3, [r7, #23]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009488:	2303      	movs	r3, #3
 800948a:	e025      	b.n	80094d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32ae      	adds	r2, #174	@ 0xae
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00f      	beq.n	80094c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	32ae      	adds	r2, #174	@ 0xae
 80094b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	f107 020e 	add.w	r2, r7, #14
 80094bc:	4610      	mov	r0, r2
 80094be:	4798      	blx	r3
 80094c0:	4602      	mov	r2, r0
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 fdb7 	bl	800b05c <USBD_LL_Start>
 80094ee:	4603      	mov	r3, r0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009500:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	4611      	mov	r1, r2
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	4611      	mov	r1, r2
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009570:	7bfb      	ldrb	r3, [r7, #15]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	4618      	mov	r0, r3
 800958e:	f001 f8a4 	bl	800a6da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80095a0:	461a      	mov	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095ae:	f003 031f 	and.w	r3, r3, #31
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d01a      	beq.n	80095ec <USBD_LL_SetupStage+0x72>
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d822      	bhi.n	8009600 <USBD_LL_SetupStage+0x86>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <USBD_LL_SetupStage+0x4a>
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d00a      	beq.n	80095d8 <USBD_LL_SetupStage+0x5e>
 80095c2:	e01d      	b.n	8009600 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fad1 	bl	8009b74 <USBD_StdDevReq>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]
      break;
 80095d6:	e020      	b.n	800961a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fb39 	bl	8009c58 <USBD_StdItfReq>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]
      break;
 80095ea:	e016      	b.n	800961a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fb9b 	bl	8009d30 <USBD_StdEPReq>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73fb      	strb	r3, [r7, #15]
      break;
 80095fe:	e00c      	b.n	800961a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009606:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 fd84 	bl	800b11c <USBD_LL_StallEP>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]
      break;
 8009618:	bf00      	nop
  }

  return ret;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	460b      	mov	r3, r1
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d16e      	bne.n	800971a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009642:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800964a:	2b03      	cmp	r3, #3
 800964c:	f040 8098 	bne.w	8009780 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	429a      	cmp	r2, r3
 800965a:	d913      	bls.n	8009684 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	4293      	cmp	r3, r2
 8009674:	bf28      	it	cs
 8009676:	4613      	movcs	r3, r2
 8009678:	461a      	mov	r2, r3
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f001 f92c 	bl	800a8da <USBD_CtlContinueRx>
 8009682:	e07d      	b.n	8009780 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800968a:	f003 031f 	and.w	r3, r3, #31
 800968e:	2b02      	cmp	r3, #2
 8009690:	d014      	beq.n	80096bc <USBD_LL_DataOutStage+0x98>
 8009692:	2b02      	cmp	r3, #2
 8009694:	d81d      	bhi.n	80096d2 <USBD_LL_DataOutStage+0xae>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <USBD_LL_DataOutStage+0x7c>
 800969a:	2b01      	cmp	r3, #1
 800969c:	d003      	beq.n	80096a6 <USBD_LL_DataOutStage+0x82>
 800969e:	e018      	b.n	80096d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75bb      	strb	r3, [r7, #22]
            break;
 80096a4:	e018      	b.n	80096d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 f9d2 	bl	8009a5a <USBD_CoreFindIF>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75bb      	strb	r3, [r7, #22]
            break;
 80096ba:	e00d      	b.n	80096d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	4619      	mov	r1, r3
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f9d4 	bl	8009a74 <USBD_CoreFindEP>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75bb      	strb	r3, [r7, #22]
            break;
 80096d0:	e002      	b.n	80096d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75bb      	strb	r3, [r7, #22]
            break;
 80096d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80096d8:	7dbb      	ldrb	r3, [r7, #22]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d119      	bne.n	8009712 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d113      	bne.n	8009712 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80096ea:	7dba      	ldrb	r2, [r7, #22]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	32ae      	adds	r2, #174	@ 0xae
 80096f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00b      	beq.n	8009712 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80096fa:	7dba      	ldrb	r2, [r7, #22]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009702:	7dba      	ldrb	r2, [r7, #22]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	32ae      	adds	r2, #174	@ 0xae
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f001 f8f2 	bl	800a8fc <USBD_CtlSendStatus>
 8009718:	e032      	b.n	8009780 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800971a:	7afb      	ldrb	r3, [r7, #11]
 800971c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009720:	b2db      	uxtb	r3, r3
 8009722:	4619      	mov	r1, r3
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 f9a5 	bl	8009a74 <USBD_CoreFindEP>
 800972a:	4603      	mov	r3, r0
 800972c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800972e:	7dbb      	ldrb	r3, [r7, #22]
 8009730:	2bff      	cmp	r3, #255	@ 0xff
 8009732:	d025      	beq.n	8009780 <USBD_LL_DataOutStage+0x15c>
 8009734:	7dbb      	ldrb	r3, [r7, #22]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d122      	bne.n	8009780 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b03      	cmp	r3, #3
 8009744:	d117      	bne.n	8009776 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009746:	7dba      	ldrb	r2, [r7, #22]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	32ae      	adds	r2, #174	@ 0xae
 800974c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00f      	beq.n	8009776 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009756:	7dba      	ldrb	r2, [r7, #22]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800975e:	7dba      	ldrb	r2, [r7, #22]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	32ae      	adds	r2, #174	@ 0xae
 8009764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	7afa      	ldrb	r2, [r7, #11]
 800976c:	4611      	mov	r1, r2
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	4798      	blx	r3
 8009772:	4603      	mov	r3, r0
 8009774:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800977c:	7dfb      	ldrb	r3, [r7, #23]
 800977e:	e000      	b.n	8009782 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	460b      	mov	r3, r1
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d16f      	bne.n	800987e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3314      	adds	r3, #20
 80097a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d15a      	bne.n	8009864 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d914      	bls.n	80097e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	1ad2      	subs	r2, r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	461a      	mov	r2, r3
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f001 f854 	bl	800a87e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097d6:	2300      	movs	r3, #0
 80097d8:	2200      	movs	r2, #0
 80097da:	2100      	movs	r1, #0
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f001 fd47 	bl	800b270 <USBD_LL_PrepareReceive>
 80097e2:	e03f      	b.n	8009864 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d11c      	bne.n	800982a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d316      	bcc.n	800982a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009806:	429a      	cmp	r2, r3
 8009808:	d20f      	bcs.n	800982a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800980a:	2200      	movs	r2, #0
 800980c:	2100      	movs	r1, #0
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f001 f835 	bl	800a87e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800981c:	2300      	movs	r3, #0
 800981e:	2200      	movs	r2, #0
 8009820:	2100      	movs	r1, #0
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f001 fd24 	bl	800b270 <USBD_LL_PrepareReceive>
 8009828:	e01c      	b.n	8009864 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b03      	cmp	r3, #3
 8009834:	d10f      	bne.n	8009856 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d009      	beq.n	8009856 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009856:	2180      	movs	r1, #128	@ 0x80
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f001 fc5f 	bl	800b11c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f001 f85f 	bl	800a922 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d03a      	beq.n	80098e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fe42 	bl	80094f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800987c:	e032      	b.n	80098e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800987e:	7afb      	ldrb	r3, [r7, #11]
 8009880:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009884:	b2db      	uxtb	r3, r3
 8009886:	4619      	mov	r1, r3
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f8f3 	bl	8009a74 <USBD_CoreFindEP>
 800988e:	4603      	mov	r3, r0
 8009890:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	2bff      	cmp	r3, #255	@ 0xff
 8009896:	d025      	beq.n	80098e4 <USBD_LL_DataInStage+0x15a>
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d122      	bne.n	80098e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d11c      	bne.n	80098e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80098aa:	7dfa      	ldrb	r2, [r7, #23]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	32ae      	adds	r2, #174	@ 0xae
 80098b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d014      	beq.n	80098e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80098ba:	7dfa      	ldrb	r2, [r7, #23]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80098c2:	7dfa      	ldrb	r2, [r7, #23]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	32ae      	adds	r2, #174	@ 0xae
 80098c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	7afa      	ldrb	r2, [r7, #11]
 80098d0:	4611      	mov	r1, r2
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	4798      	blx	r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80098da:	7dbb      	ldrb	r3, [r7, #22]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80098e0:	7dbb      	ldrb	r3, [r7, #22]
 80098e2:	e000      	b.n	80098e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009926:	2b00      	cmp	r3, #0
 8009928:	d014      	beq.n	8009954 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00e      	beq.n	8009954 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	6852      	ldr	r2, [r2, #4]
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	4611      	mov	r1, r2
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	4798      	blx	r3
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009950:	2303      	movs	r3, #3
 8009952:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009954:	2340      	movs	r3, #64	@ 0x40
 8009956:	2200      	movs	r2, #0
 8009958:	2100      	movs	r1, #0
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 fb99 	bl	800b092 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2240      	movs	r2, #64	@ 0x40
 800996c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009970:	2340      	movs	r3, #64	@ 0x40
 8009972:	2200      	movs	r2, #0
 8009974:	2180      	movs	r1, #128	@ 0x80
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fb8b 	bl	800b092 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2240      	movs	r2, #64	@ 0x40
 8009986:	621a      	str	r2, [r3, #32]

  return ret;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	78fa      	ldrb	r2, [r7, #3]
 80099a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	d006      	beq.n	80099d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2204      	movs	r2, #4
 80099d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b04      	cmp	r3, #4
 80099fc:	d106      	bne.n	8009a0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d110      	bne.n	8009a50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	460b      	mov	r3, r1
 8009a64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	7812      	ldrb	r2, [r2, #0]
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d91f      	bls.n	8009af4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009aba:	e013      	b.n	8009ae4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009abc:	f107 030a 	add.w	r3, r7, #10
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6978      	ldr	r0, [r7, #20]
 8009ac4:	f000 f81b 	bl	8009afe <USBD_GetNextDesc>
 8009ac8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	2b05      	cmp	r3, #5
 8009ad0:	d108      	bne.n	8009ae4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	789b      	ldrb	r3, [r3, #2]
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d008      	beq.n	8009af2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	885b      	ldrh	r3, [r3, #2]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	897b      	ldrh	r3, [r7, #10]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d8e5      	bhi.n	8009abc <USBD_GetEpDesc+0x2e>
 8009af0:	e000      	b.n	8009af4 <USBD_GetEpDesc+0x66>
          break;
 8009af2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009af4:	693b      	ldr	r3, [r7, #16]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b085      	sub	sp, #20
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	7812      	ldrb	r2, [r2, #0]
 8009b14:	4413      	add	r3, r2
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	461a      	mov	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b28:	68fb      	ldr	r3, [r7, #12]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b087      	sub	sp, #28
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b54:	8a3b      	ldrh	r3, [r7, #16]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	b21a      	sxth	r2, r3
 8009b5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	b21b      	sxth	r3, r3
 8009b62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b64:	89fb      	ldrh	r3, [r7, #14]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
	...

08009b74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b8a:	2b40      	cmp	r3, #64	@ 0x40
 8009b8c:	d005      	beq.n	8009b9a <USBD_StdDevReq+0x26>
 8009b8e:	2b40      	cmp	r3, #64	@ 0x40
 8009b90:	d857      	bhi.n	8009c42 <USBD_StdDevReq+0xce>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00f      	beq.n	8009bb6 <USBD_StdDevReq+0x42>
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	d153      	bne.n	8009c42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	32ae      	adds	r2, #174	@ 0xae
 8009ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	4798      	blx	r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb4:	e04a      	b.n	8009c4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	2b09      	cmp	r3, #9
 8009bbc:	d83b      	bhi.n	8009c36 <USBD_StdDevReq+0xc2>
 8009bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <USBD_StdDevReq+0x50>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009c19 	.word	0x08009c19
 8009bc8:	08009c2d 	.word	0x08009c2d
 8009bcc:	08009c37 	.word	0x08009c37
 8009bd0:	08009c23 	.word	0x08009c23
 8009bd4:	08009c37 	.word	0x08009c37
 8009bd8:	08009bf7 	.word	0x08009bf7
 8009bdc:	08009bed 	.word	0x08009bed
 8009be0:	08009c37 	.word	0x08009c37
 8009be4:	08009c0f 	.word	0x08009c0f
 8009be8:	08009c01 	.word	0x08009c01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa3c 	bl	800a06c <USBD_GetDescriptor>
          break;
 8009bf4:	e024      	b.n	8009c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fbcb 	bl	800a394 <USBD_SetAddress>
          break;
 8009bfe:	e01f      	b.n	8009c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fc0a 	bl	800a41c <USBD_SetConfig>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
          break;
 8009c0c:	e018      	b.n	8009c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fcad 	bl	800a570 <USBD_GetConfig>
          break;
 8009c16:	e013      	b.n	8009c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fcde 	bl	800a5dc <USBD_GetStatus>
          break;
 8009c20:	e00e      	b.n	8009c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fd0d 	bl	800a644 <USBD_SetFeature>
          break;
 8009c2a:	e009      	b.n	8009c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fd31 	bl	800a696 <USBD_ClrFeature>
          break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fd88 	bl	800a74e <USBD_CtlError>
          break;
 8009c3e:	bf00      	nop
      }
      break;
 8009c40:	e004      	b.n	8009c4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fd82 	bl	800a74e <USBD_CtlError>
      break;
 8009c4a:	bf00      	nop
  }

  return ret;
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop

08009c58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c6e:	2b40      	cmp	r3, #64	@ 0x40
 8009c70:	d005      	beq.n	8009c7e <USBD_StdItfReq+0x26>
 8009c72:	2b40      	cmp	r3, #64	@ 0x40
 8009c74:	d852      	bhi.n	8009d1c <USBD_StdItfReq+0xc4>
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <USBD_StdItfReq+0x26>
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d14e      	bne.n	8009d1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	3b01      	subs	r3, #1
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d840      	bhi.n	8009d0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	889b      	ldrh	r3, [r3, #4]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d836      	bhi.n	8009d04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	889b      	ldrh	r3, [r3, #4]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff fedb 	bl	8009a5a <USBD_CoreFindIF>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	2bff      	cmp	r3, #255	@ 0xff
 8009cac:	d01d      	beq.n	8009cea <USBD_StdItfReq+0x92>
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d11a      	bne.n	8009cea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009cb4:	7bba      	ldrb	r2, [r7, #14]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	32ae      	adds	r2, #174	@ 0xae
 8009cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00f      	beq.n	8009ce4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009cc4:	7bba      	ldrb	r2, [r7, #14]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ccc:	7bba      	ldrb	r2, [r7, #14]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	32ae      	adds	r2, #174	@ 0xae
 8009cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	4798      	blx	r3
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ce2:	e004      	b.n	8009cee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ce8:	e001      	b.n	8009cee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009cea:	2303      	movs	r3, #3
 8009cec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	88db      	ldrh	r3, [r3, #6]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d110      	bne.n	8009d18 <USBD_StdItfReq+0xc0>
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10d      	bne.n	8009d18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fdfd 	bl	800a8fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d02:	e009      	b.n	8009d18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fd21 	bl	800a74e <USBD_CtlError>
          break;
 8009d0c:	e004      	b.n	8009d18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fd1c 	bl	800a74e <USBD_CtlError>
          break;
 8009d16:	e000      	b.n	8009d1a <USBD_StdItfReq+0xc2>
          break;
 8009d18:	bf00      	nop
      }
      break;
 8009d1a:	e004      	b.n	8009d26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fd15 	bl	800a74e <USBD_CtlError>
      break;
 8009d24:	bf00      	nop
  }

  return ret;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	889b      	ldrh	r3, [r3, #4]
 8009d42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d4c:	2b40      	cmp	r3, #64	@ 0x40
 8009d4e:	d007      	beq.n	8009d60 <USBD_StdEPReq+0x30>
 8009d50:	2b40      	cmp	r3, #64	@ 0x40
 8009d52:	f200 817f 	bhi.w	800a054 <USBD_StdEPReq+0x324>
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d02a      	beq.n	8009db0 <USBD_StdEPReq+0x80>
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	f040 817a 	bne.w	800a054 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fe85 	bl	8009a74 <USBD_CoreFindEP>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d6e:	7b7b      	ldrb	r3, [r7, #13]
 8009d70:	2bff      	cmp	r3, #255	@ 0xff
 8009d72:	f000 8174 	beq.w	800a05e <USBD_StdEPReq+0x32e>
 8009d76:	7b7b      	ldrb	r3, [r7, #13]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f040 8170 	bne.w	800a05e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d7e:	7b7a      	ldrb	r2, [r7, #13]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d86:	7b7a      	ldrb	r2, [r7, #13]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	32ae      	adds	r2, #174	@ 0xae
 8009d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 8163 	beq.w	800a05e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d98:	7b7a      	ldrb	r2, [r7, #13]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	32ae      	adds	r2, #174	@ 0xae
 8009d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009dae:	e156      	b.n	800a05e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	785b      	ldrb	r3, [r3, #1]
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	d008      	beq.n	8009dca <USBD_StdEPReq+0x9a>
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	f300 8145 	bgt.w	800a048 <USBD_StdEPReq+0x318>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 809b 	beq.w	8009efa <USBD_StdEPReq+0x1ca>
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d03c      	beq.n	8009e42 <USBD_StdEPReq+0x112>
 8009dc8:	e13e      	b.n	800a048 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d002      	beq.n	8009ddc <USBD_StdEPReq+0xac>
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d016      	beq.n	8009e08 <USBD_StdEPReq+0xd8>
 8009dda:	e02c      	b.n	8009e36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00d      	beq.n	8009dfe <USBD_StdEPReq+0xce>
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b80      	cmp	r3, #128	@ 0x80
 8009de6:	d00a      	beq.n	8009dfe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f995 	bl	800b11c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009df2:	2180      	movs	r1, #128	@ 0x80
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 f991 	bl	800b11c <USBD_LL_StallEP>
 8009dfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dfc:	e020      	b.n	8009e40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fca4 	bl	800a74e <USBD_CtlError>
              break;
 8009e06:	e01b      	b.n	8009e40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	885b      	ldrh	r3, [r3, #2]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10e      	bne.n	8009e2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <USBD_StdEPReq+0xfe>
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b80      	cmp	r3, #128	@ 0x80
 8009e1a:	d008      	beq.n	8009e2e <USBD_StdEPReq+0xfe>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d104      	bne.n	8009e2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 f977 	bl	800b11c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fd64 	bl	800a8fc <USBD_CtlSendStatus>

              break;
 8009e34:	e004      	b.n	8009e40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fc88 	bl	800a74e <USBD_CtlError>
              break;
 8009e3e:	bf00      	nop
          }
          break;
 8009e40:	e107      	b.n	800a052 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d002      	beq.n	8009e54 <USBD_StdEPReq+0x124>
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d016      	beq.n	8009e80 <USBD_StdEPReq+0x150>
 8009e52:	e04b      	b.n	8009eec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00d      	beq.n	8009e76 <USBD_StdEPReq+0x146>
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b80      	cmp	r3, #128	@ 0x80
 8009e5e:	d00a      	beq.n	8009e76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 f959 	bl	800b11c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e6a:	2180      	movs	r1, #128	@ 0x80
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 f955 	bl	800b11c <USBD_LL_StallEP>
 8009e72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e74:	e040      	b.n	8009ef8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fc68 	bl	800a74e <USBD_CtlError>
              break;
 8009e7e:	e03b      	b.n	8009ef8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	885b      	ldrh	r3, [r3, #2]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d136      	bne.n	8009ef6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 f95f 	bl	800b15a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fd2d 	bl	800a8fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fde4 	bl	8009a74 <USBD_CoreFindEP>
 8009eac:	4603      	mov	r3, r0
 8009eae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eb0:	7b7b      	ldrb	r3, [r7, #13]
 8009eb2:	2bff      	cmp	r3, #255	@ 0xff
 8009eb4:	d01f      	beq.n	8009ef6 <USBD_StdEPReq+0x1c6>
 8009eb6:	7b7b      	ldrb	r3, [r7, #13]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d11c      	bne.n	8009ef6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ebc:	7b7a      	ldrb	r2, [r7, #13]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ec4:	7b7a      	ldrb	r2, [r7, #13]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	32ae      	adds	r2, #174	@ 0xae
 8009eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d010      	beq.n	8009ef6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ed4:	7b7a      	ldrb	r2, [r7, #13]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	32ae      	adds	r2, #174	@ 0xae
 8009eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	4798      	blx	r3
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009eea:	e004      	b.n	8009ef6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fc2d 	bl	800a74e <USBD_CtlError>
              break;
 8009ef4:	e000      	b.n	8009ef8 <USBD_StdEPReq+0x1c8>
              break;
 8009ef6:	bf00      	nop
          }
          break;
 8009ef8:	e0ab      	b.n	800a052 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d002      	beq.n	8009f0c <USBD_StdEPReq+0x1dc>
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d032      	beq.n	8009f70 <USBD_StdEPReq+0x240>
 8009f0a:	e097      	b.n	800a03c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d007      	beq.n	8009f22 <USBD_StdEPReq+0x1f2>
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	2b80      	cmp	r3, #128	@ 0x80
 8009f16:	d004      	beq.n	8009f22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fc17 	bl	800a74e <USBD_CtlError>
                break;
 8009f20:	e091      	b.n	800a046 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da0b      	bge.n	8009f42 <USBD_StdEPReq+0x212>
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	3310      	adds	r3, #16
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	3304      	adds	r3, #4
 8009f40:	e00b      	b.n	8009f5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	4413      	add	r3, r2
 8009f58:	3304      	adds	r3, #4
 8009f5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2202      	movs	r2, #2
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fc6d 	bl	800a848 <USBD_CtlSendData>
              break;
 8009f6e:	e06a      	b.n	800a046 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	da11      	bge.n	8009f9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	f003 020f 	and.w	r2, r3, #15
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	3324      	adds	r3, #36	@ 0x24
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d117      	bne.n	8009fc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fbda 	bl	800a74e <USBD_CtlError>
                  break;
 8009f9a:	e054      	b.n	800a046 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	f003 020f 	and.w	r2, r3, #15
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	440b      	add	r3, r1
 8009fae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d104      	bne.n	8009fc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fbc7 	bl	800a74e <USBD_CtlError>
                  break;
 8009fc0:	e041      	b.n	800a046 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da0b      	bge.n	8009fe2 <USBD_StdEPReq+0x2b2>
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	3310      	adds	r3, #16
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	3304      	adds	r3, #4
 8009fe0:	e00b      	b.n	8009ffa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <USBD_StdEPReq+0x2d8>
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	2b80      	cmp	r3, #128	@ 0x80
 800a006:	d103      	bne.n	800a010 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e00e      	b.n	800a02e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 f8bf 	bl	800b198 <USBD_LL_IsStallEP>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2201      	movs	r2, #1
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	e002      	b.n	800a02e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2202      	movs	r2, #2
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fc07 	bl	800a848 <USBD_CtlSendData>
              break;
 800a03a:	e004      	b.n	800a046 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fb85 	bl	800a74e <USBD_CtlError>
              break;
 800a044:	bf00      	nop
          }
          break;
 800a046:	e004      	b.n	800a052 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fb7f 	bl	800a74e <USBD_CtlError>
          break;
 800a050:	bf00      	nop
      }
      break;
 800a052:	e005      	b.n	800a060 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fb79 	bl	800a74e <USBD_CtlError>
      break;
 800a05c:	e000      	b.n	800a060 <USBD_StdEPReq+0x330>
      break;
 800a05e:	bf00      	nop
  }

  return ret;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a076:	2300      	movs	r3, #0
 800a078:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a07e:	2300      	movs	r3, #0
 800a080:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	885b      	ldrh	r3, [r3, #2]
 800a086:	0a1b      	lsrs	r3, r3, #8
 800a088:	b29b      	uxth	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2b0e      	cmp	r3, #14
 800a08e:	f200 8152 	bhi.w	800a336 <USBD_GetDescriptor+0x2ca>
 800a092:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <USBD_GetDescriptor+0x2c>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a109 	.word	0x0800a109
 800a09c:	0800a121 	.word	0x0800a121
 800a0a0:	0800a161 	.word	0x0800a161
 800a0a4:	0800a337 	.word	0x0800a337
 800a0a8:	0800a337 	.word	0x0800a337
 800a0ac:	0800a2d7 	.word	0x0800a2d7
 800a0b0:	0800a303 	.word	0x0800a303
 800a0b4:	0800a337 	.word	0x0800a337
 800a0b8:	0800a337 	.word	0x0800a337
 800a0bc:	0800a337 	.word	0x0800a337
 800a0c0:	0800a337 	.word	0x0800a337
 800a0c4:	0800a337 	.word	0x0800a337
 800a0c8:	0800a337 	.word	0x0800a337
 800a0cc:	0800a337 	.word	0x0800a337
 800a0d0:	0800a0d5 	.word	0x0800a0d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7c12      	ldrb	r2, [r2, #16]
 800a0ec:	f107 0108 	add.w	r1, r7, #8
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
 800a0f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0f6:	e126      	b.n	800a346 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb27 	bl	800a74e <USBD_CtlError>
        err++;
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	3301      	adds	r3, #1
 800a104:	72fb      	strb	r3, [r7, #11]
      break;
 800a106:	e11e      	b.n	800a346 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7c12      	ldrb	r2, [r2, #16]
 800a114:	f107 0108 	add.w	r1, r7, #8
 800a118:	4610      	mov	r0, r2
 800a11a:	4798      	blx	r3
 800a11c:	60f8      	str	r0, [r7, #12]
      break;
 800a11e:	e112      	b.n	800a346 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7c1b      	ldrb	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10d      	bne.n	800a144 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a130:	f107 0208 	add.w	r2, r7, #8
 800a134:	4610      	mov	r0, r2
 800a136:	4798      	blx	r3
 800a138:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3301      	adds	r3, #1
 800a13e:	2202      	movs	r2, #2
 800a140:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a142:	e100      	b.n	800a346 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14c:	f107 0208 	add.w	r2, r7, #8
 800a150:	4610      	mov	r0, r2
 800a152:	4798      	blx	r3
 800a154:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3301      	adds	r3, #1
 800a15a:	2202      	movs	r2, #2
 800a15c:	701a      	strb	r2, [r3, #0]
      break;
 800a15e:	e0f2      	b.n	800a346 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	885b      	ldrh	r3, [r3, #2]
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b05      	cmp	r3, #5
 800a168:	f200 80ac 	bhi.w	800a2c4 <USBD_GetDescriptor+0x258>
 800a16c:	a201      	add	r2, pc, #4	@ (adr r2, 800a174 <USBD_GetDescriptor+0x108>)
 800a16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a172:	bf00      	nop
 800a174:	0800a18d 	.word	0x0800a18d
 800a178:	0800a1c1 	.word	0x0800a1c1
 800a17c:	0800a1f5 	.word	0x0800a1f5
 800a180:	0800a229 	.word	0x0800a229
 800a184:	0800a25d 	.word	0x0800a25d
 800a188:	0800a291 	.word	0x0800a291
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00b      	beq.n	800a1b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	7c12      	ldrb	r2, [r2, #16]
 800a1a4:	f107 0108 	add.w	r1, r7, #8
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	4798      	blx	r3
 800a1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ae:	e091      	b.n	800a2d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 facb 	bl	800a74e <USBD_CtlError>
            err++;
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1be:	e089      	b.n	800a2d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	7c12      	ldrb	r2, [r2, #16]
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
 800a1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1e2:	e077      	b.n	800a2d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fab1 	bl	800a74e <USBD_CtlError>
            err++;
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1f2:	e06f      	b.n	800a2d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	7c12      	ldrb	r2, [r2, #16]
 800a20c:	f107 0108 	add.w	r1, r7, #8
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
 800a214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a216:	e05d      	b.n	800a2d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa97 	bl	800a74e <USBD_CtlError>
            err++;
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	3301      	adds	r3, #1
 800a224:	72fb      	strb	r3, [r7, #11]
          break;
 800a226:	e055      	b.n	800a2d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00b      	beq.n	800a24c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	7c12      	ldrb	r2, [r2, #16]
 800a240:	f107 0108 	add.w	r1, r7, #8
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24a:	e043      	b.n	800a2d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa7d 	bl	800a74e <USBD_CtlError>
            err++;
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	3301      	adds	r3, #1
 800a258:	72fb      	strb	r3, [r7, #11]
          break;
 800a25a:	e03b      	b.n	800a2d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	7c12      	ldrb	r2, [r2, #16]
 800a274:	f107 0108 	add.w	r1, r7, #8
 800a278:	4610      	mov	r0, r2
 800a27a:	4798      	blx	r3
 800a27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a27e:	e029      	b.n	800a2d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa63 	bl	800a74e <USBD_CtlError>
            err++;
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	3301      	adds	r3, #1
 800a28c:	72fb      	strb	r3, [r7, #11]
          break;
 800a28e:	e021      	b.n	800a2d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	7c12      	ldrb	r2, [r2, #16]
 800a2a8:	f107 0108 	add.w	r1, r7, #8
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
 800a2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2b2:	e00f      	b.n	800a2d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa49 	bl	800a74e <USBD_CtlError>
            err++;
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2c2:	e007      	b.n	800a2d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa41 	bl	800a74e <USBD_CtlError>
          err++;
 800a2cc:	7afb      	ldrb	r3, [r7, #11]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a2d2:	bf00      	nop
      }
      break;
 800a2d4:	e037      	b.n	800a346 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	7c1b      	ldrb	r3, [r3, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e6:	f107 0208 	add.w	r2, r7, #8
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	4798      	blx	r3
 800a2ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2f0:	e029      	b.n	800a346 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fa2a 	bl	800a74e <USBD_CtlError>
        err++;
 800a2fa:	7afb      	ldrb	r3, [r7, #11]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a300:	e021      	b.n	800a346 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	7c1b      	ldrb	r3, [r3, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10d      	bne.n	800a326 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a312:	f107 0208 	add.w	r2, r7, #8
 800a316:	4610      	mov	r0, r2
 800a318:	4798      	blx	r3
 800a31a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3301      	adds	r3, #1
 800a320:	2207      	movs	r2, #7
 800a322:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a324:	e00f      	b.n	800a346 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa10 	bl	800a74e <USBD_CtlError>
        err++;
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	3301      	adds	r3, #1
 800a332:	72fb      	strb	r3, [r7, #11]
      break;
 800a334:	e007      	b.n	800a346 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fa08 	bl	800a74e <USBD_CtlError>
      err++;
 800a33e:	7afb      	ldrb	r3, [r7, #11]
 800a340:	3301      	adds	r3, #1
 800a342:	72fb      	strb	r3, [r7, #11]
      break;
 800a344:	bf00      	nop
  }

  if (err != 0U)
 800a346:	7afb      	ldrb	r3, [r7, #11]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d11e      	bne.n	800a38a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	88db      	ldrh	r3, [r3, #6]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d016      	beq.n	800a382 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a354:	893b      	ldrh	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00e      	beq.n	800a378 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88da      	ldrh	r2, [r3, #6]
 800a35e:	893b      	ldrh	r3, [r7, #8]
 800a360:	4293      	cmp	r3, r2
 800a362:	bf28      	it	cs
 800a364:	4613      	movcs	r3, r2
 800a366:	b29b      	uxth	r3, r3
 800a368:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a36a:	893b      	ldrh	r3, [r7, #8]
 800a36c:	461a      	mov	r2, r3
 800a36e:	68f9      	ldr	r1, [r7, #12]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa69 	bl	800a848 <USBD_CtlSendData>
 800a376:	e009      	b.n	800a38c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f9e7 	bl	800a74e <USBD_CtlError>
 800a380:	e004      	b.n	800a38c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 faba 	bl	800a8fc <USBD_CtlSendStatus>
 800a388:	e000      	b.n	800a38c <USBD_GetDescriptor+0x320>
    return;
 800a38a:	bf00      	nop
  }
}
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop

0800a394 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	889b      	ldrh	r3, [r3, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d131      	bne.n	800a40a <USBD_SetAddress+0x76>
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	88db      	ldrh	r3, [r3, #6]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d12d      	bne.n	800a40a <USBD_SetAddress+0x76>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	885b      	ldrh	r3, [r3, #2]
 800a3b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3b4:	d829      	bhi.n	800a40a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	885b      	ldrh	r3, [r3, #2]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d104      	bne.n	800a3d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f9bc 	bl	800a74e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d6:	e01d      	b.n	800a414 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	7bfa      	ldrb	r2, [r7, #15]
 800a3dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 ff03 	bl	800b1f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa86 	bl	800a8fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d004      	beq.n	800a400 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fe:	e009      	b.n	800a414 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a408:	e004      	b.n	800a414 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f99e 	bl	800a74e <USBD_CtlError>
  }
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	885b      	ldrh	r3, [r3, #2]
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	4b4e      	ldr	r3, [pc, #312]	@ (800a56c <USBD_SetConfig+0x150>)
 800a432:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a434:	4b4d      	ldr	r3, [pc, #308]	@ (800a56c <USBD_SetConfig+0x150>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d905      	bls.n	800a448 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f985 	bl	800a74e <USBD_CtlError>
    return USBD_FAIL;
 800a444:	2303      	movs	r3, #3
 800a446:	e08c      	b.n	800a562 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	2b02      	cmp	r3, #2
 800a452:	d002      	beq.n	800a45a <USBD_SetConfig+0x3e>
 800a454:	2b03      	cmp	r3, #3
 800a456:	d029      	beq.n	800a4ac <USBD_SetConfig+0x90>
 800a458:	e075      	b.n	800a546 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a45a:	4b44      	ldr	r3, [pc, #272]	@ (800a56c <USBD_SetConfig+0x150>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d020      	beq.n	800a4a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a462:	4b42      	ldr	r3, [pc, #264]	@ (800a56c <USBD_SetConfig+0x150>)
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a46c:	4b3f      	ldr	r3, [pc, #252]	@ (800a56c <USBD_SetConfig+0x150>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff f84b 	bl	800950e <USBD_SetClassConfig>
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f962 	bl	800a74e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2202      	movs	r2, #2
 800a48e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a492:	e065      	b.n	800a560 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fa31 	bl	800a8fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2203      	movs	r2, #3
 800a49e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4a2:	e05d      	b.n	800a560 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fa29 	bl	800a8fc <USBD_CtlSendStatus>
      break;
 800a4aa:	e059      	b.n	800a560 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4ac:	4b2f      	ldr	r3, [pc, #188]	@ (800a56c <USBD_SetConfig+0x150>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d112      	bne.n	800a4da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a4bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a56c <USBD_SetConfig+0x150>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4c6:	4b29      	ldr	r3, [pc, #164]	@ (800a56c <USBD_SetConfig+0x150>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff f83a 	bl	8009546 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa12 	bl	800a8fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4d8:	e042      	b.n	800a560 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a4da:	4b24      	ldr	r3, [pc, #144]	@ (800a56c <USBD_SetConfig+0x150>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d02a      	beq.n	800a53e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff f828 	bl	8009546 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800a56c <USBD_SetConfig+0x150>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a500:	4b1a      	ldr	r3, [pc, #104]	@ (800a56c <USBD_SetConfig+0x150>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff f801 	bl	800950e <USBD_SetClassConfig>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00f      	beq.n	800a536 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f918 	bl	800a74e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	b2db      	uxtb	r3, r3
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff f80d 	bl	8009546 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a534:	e014      	b.n	800a560 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9e0 	bl	800a8fc <USBD_CtlSendStatus>
      break;
 800a53c:	e010      	b.n	800a560 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f9dc 	bl	800a8fc <USBD_CtlSendStatus>
      break;
 800a544:	e00c      	b.n	800a560 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f900 	bl	800a74e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a54e:	4b07      	ldr	r3, [pc, #28]	@ (800a56c <USBD_SetConfig+0x150>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7fe fff6 	bl	8009546 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a55a:	2303      	movs	r3, #3
 800a55c:	73fb      	strb	r3, [r7, #15]
      break;
 800a55e:	bf00      	nop
  }

  return ret;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	200002f0 	.word	0x200002f0

0800a570 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	88db      	ldrh	r3, [r3, #6]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d004      	beq.n	800a58c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f8e2 	bl	800a74e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a58a:	e023      	b.n	800a5d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b02      	cmp	r3, #2
 800a596:	dc02      	bgt.n	800a59e <USBD_GetConfig+0x2e>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dc03      	bgt.n	800a5a4 <USBD_GetConfig+0x34>
 800a59c:	e015      	b.n	800a5ca <USBD_GetConfig+0x5a>
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d00b      	beq.n	800a5ba <USBD_GetConfig+0x4a>
 800a5a2:	e012      	b.n	800a5ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f948 	bl	800a848 <USBD_CtlSendData>
        break;
 800a5b8:	e00c      	b.n	800a5d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	2201      	movs	r2, #1
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f940 	bl	800a848 <USBD_CtlSendData>
        break;
 800a5c8:	e004      	b.n	800a5d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f8be 	bl	800a74e <USBD_CtlError>
        break;
 800a5d2:	bf00      	nop
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d81e      	bhi.n	800a632 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	88db      	ldrh	r3, [r3, #6]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d004      	beq.n	800a606 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f8a5 	bl	800a74e <USBD_CtlError>
        break;
 800a604:	e01a      	b.n	800a63c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f043 0202 	orr.w	r2, r3, #2
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	330c      	adds	r3, #12
 800a626:	2202      	movs	r2, #2
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f90c 	bl	800a848 <USBD_CtlSendData>
      break;
 800a630:	e004      	b.n	800a63c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f88a 	bl	800a74e <USBD_CtlError>
      break;
 800a63a:	bf00      	nop
  }
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	885b      	ldrh	r3, [r3, #2]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d107      	bne.n	800a666 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f94c 	bl	800a8fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a664:	e013      	b.n	800a68e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	885b      	ldrh	r3, [r3, #2]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d10b      	bne.n	800a686 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	889b      	ldrh	r3, [r3, #4]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	b29b      	uxth	r3, r3
 800a676:	b2da      	uxtb	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f93c 	bl	800a8fc <USBD_CtlSendStatus>
}
 800a684:	e003      	b.n	800a68e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f860 	bl	800a74e <USBD_CtlError>
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d80b      	bhi.n	800a6c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	885b      	ldrh	r3, [r3, #2]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d10c      	bne.n	800a6d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f91c 	bl	800a8fc <USBD_CtlSendStatus>
      }
      break;
 800a6c4:	e004      	b.n	800a6d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f840 	bl	800a74e <USBD_CtlError>
      break;
 800a6ce:	e000      	b.n	800a6d2 <USBD_ClrFeature+0x3c>
      break;
 800a6d0:	bf00      	nop
  }
}
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	781a      	ldrb	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3301      	adds	r3, #1
 800a702:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff fa16 	bl	8009b36 <SWAPBYTE>
 800a70a:	4603      	mov	r3, r0
 800a70c:	461a      	mov	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3301      	adds	r3, #1
 800a716:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	3301      	adds	r3, #1
 800a71c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff fa09 	bl	8009b36 <SWAPBYTE>
 800a724:	4603      	mov	r3, r0
 800a726:	461a      	mov	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3301      	adds	r3, #1
 800a730:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	3301      	adds	r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f7ff f9fc 	bl	8009b36 <SWAPBYTE>
 800a73e:	4603      	mov	r3, r0
 800a740:	461a      	mov	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	80da      	strh	r2, [r3, #6]
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a758:	2180      	movs	r1, #128	@ 0x80
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fcde 	bl	800b11c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fcda 	bl	800b11c <USBD_LL_StallEP>
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d042      	beq.n	800a80c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a78a:	6938      	ldr	r0, [r7, #16]
 800a78c:	f000 f842 	bl	800a814 <USBD_GetLen>
 800a790:	4603      	mov	r3, r0
 800a792:	3301      	adds	r3, #1
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a79a:	d808      	bhi.n	800a7ae <USBD_GetString+0x3e>
 800a79c:	6938      	ldr	r0, [r7, #16]
 800a79e:	f000 f839 	bl	800a814 <USBD_GetLen>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	e001      	b.n	800a7b2 <USBD_GetString+0x42>
 800a7ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	7812      	ldrb	r2, [r2, #0]
 800a7c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	2203      	movs	r2, #3
 800a7d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7d8:	e013      	b.n	800a802 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	4413      	add	r3, r2
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	7812      	ldrb	r2, [r2, #0]
 800a7e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	613b      	str	r3, [r7, #16]
    idx++;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	3301      	adds	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e7      	bne.n	800a7da <USBD_GetString+0x6a>
 800a80a:	e000      	b.n	800a80e <USBD_GetString+0x9e>
    return;
 800a80c:	bf00      	nop
  }
}
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a824:	e005      	b.n	800a832 <USBD_GetLen+0x1e>
  {
    len++;
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	3301      	adds	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	3301      	adds	r3, #1
 800a830:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1f5      	bne.n	800a826 <USBD_GetLen+0x12>
  }

  return len;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2202      	movs	r2, #2
 800a858:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	2100      	movs	r1, #0
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 fcdd 	bl	800b22e <USBD_LL_Transmit>

  return USBD_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	2100      	movs	r1, #0
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 fccc 	bl	800b22e <USBD_LL_Transmit>

  return USBD_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 fcd0 	bl	800b270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 fcbf 	bl	800b270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2204      	movs	r2, #4
 800a908:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a90c:	2300      	movs	r3, #0
 800a90e:	2200      	movs	r2, #0
 800a910:	2100      	movs	r1, #0
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fc8b 	bl	800b22e <USBD_LL_Transmit>

  return USBD_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b082      	sub	sp, #8
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2205      	movs	r2, #5
 800a92e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a932:	2300      	movs	r3, #0
 800a934:	2200      	movs	r2, #0
 800a936:	2100      	movs	r1, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fc99 	bl	800b270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a94c:	2200      	movs	r2, #0
 800a94e:	4912      	ldr	r1, [pc, #72]	@ (800a998 <MX_USB_Device_Init+0x50>)
 800a950:	4812      	ldr	r0, [pc, #72]	@ (800a99c <MX_USB_Device_Init+0x54>)
 800a952:	f7fe fd5f 	bl	8009414 <USBD_Init>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a95c:	f7f6 f95e 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a960:	490f      	ldr	r1, [pc, #60]	@ (800a9a0 <MX_USB_Device_Init+0x58>)
 800a962:	480e      	ldr	r0, [pc, #56]	@ (800a99c <MX_USB_Device_Init+0x54>)
 800a964:	f7fe fd86 	bl	8009474 <USBD_RegisterClass>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a96e:	f7f6 f955 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a972:	490c      	ldr	r1, [pc, #48]	@ (800a9a4 <MX_USB_Device_Init+0x5c>)
 800a974:	4809      	ldr	r0, [pc, #36]	@ (800a99c <MX_USB_Device_Init+0x54>)
 800a976:	f7fe fcbd 	bl	80092f4 <USBD_CDC_RegisterInterface>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a980:	f7f6 f94c 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a984:	4805      	ldr	r0, [pc, #20]	@ (800a99c <MX_USB_Device_Init+0x54>)
 800a986:	f7fe fdab 	bl	80094e0 <USBD_Start>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a990:	f7f6 f944 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a994:	bf00      	nop
 800a996:	bd80      	pop	{r7, pc}
 800a998:	200000cc 	.word	0x200000cc
 800a99c:	200002f4 	.word	0x200002f4
 800a9a0:	20000038 	.word	0x20000038
 800a9a4:	200000b8 	.word	0x200000b8

0800a9a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4905      	ldr	r1, [pc, #20]	@ (800a9c4 <CDC_Init_FS+0x1c>)
 800a9b0:	4805      	ldr	r0, [pc, #20]	@ (800a9c8 <CDC_Init_FS+0x20>)
 800a9b2:	f7fe fcb9 	bl	8009328 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9b6:	4905      	ldr	r1, [pc, #20]	@ (800a9cc <CDC_Init_FS+0x24>)
 800a9b8:	4803      	ldr	r0, [pc, #12]	@ (800a9c8 <CDC_Init_FS+0x20>)
 800a9ba:	f7fe fcd7 	bl	800936c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20000dd0 	.word	0x20000dd0
 800a9c8:	200002f4 	.word	0x200002f4
 800a9cc:	200005d0 	.word	0x200005d0

0800a9d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	6039      	str	r1, [r7, #0]
 800a9ea:	71fb      	strb	r3, [r7, #7]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	2b23      	cmp	r3, #35	@ 0x23
 800a9f4:	d84a      	bhi.n	800aa8c <CDC_Control_FS+0xac>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <CDC_Control_FS+0x1c>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa8d 	.word	0x0800aa8d
 800aa00:	0800aa8d 	.word	0x0800aa8d
 800aa04:	0800aa8d 	.word	0x0800aa8d
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aa8d 	.word	0x0800aa8d
 800aa10:	0800aa8d 	.word	0x0800aa8d
 800aa14:	0800aa8d 	.word	0x0800aa8d
 800aa18:	0800aa8d 	.word	0x0800aa8d
 800aa1c:	0800aa8d 	.word	0x0800aa8d
 800aa20:	0800aa8d 	.word	0x0800aa8d
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa8d 	.word	0x0800aa8d
 800aa2c:	0800aa8d 	.word	0x0800aa8d
 800aa30:	0800aa8d 	.word	0x0800aa8d
 800aa34:	0800aa8d 	.word	0x0800aa8d
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa8d 	.word	0x0800aa8d
 800aa44:	0800aa8d 	.word	0x0800aa8d
 800aa48:	0800aa8d 	.word	0x0800aa8d
 800aa4c:	0800aa8d 	.word	0x0800aa8d
 800aa50:	0800aa8d 	.word	0x0800aa8d
 800aa54:	0800aa8d 	.word	0x0800aa8d
 800aa58:	0800aa8d 	.word	0x0800aa8d
 800aa5c:	0800aa8d 	.word	0x0800aa8d
 800aa60:	0800aa8d 	.word	0x0800aa8d
 800aa64:	0800aa8d 	.word	0x0800aa8d
 800aa68:	0800aa8d 	.word	0x0800aa8d
 800aa6c:	0800aa8d 	.word	0x0800aa8d
 800aa70:	0800aa8d 	.word	0x0800aa8d
 800aa74:	0800aa8d 	.word	0x0800aa8d
 800aa78:	0800aa8d 	.word	0x0800aa8d
 800aa7c:	0800aa8d 	.word	0x0800aa8d
 800aa80:	0800aa8d 	.word	0x0800aa8d
 800aa84:	0800aa8d 	.word	0x0800aa8d
 800aa88:	0800aa8d 	.word	0x0800aa8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa8c:	bf00      	nop
  }

  return (USBD_OK);
 800aa8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	480b      	ldr	r0, [pc, #44]	@ (800aad8 <CDC_Receive_FS+0x3c>)
 800aaaa:	f7fe fc5f 	bl	800936c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aaae:	480a      	ldr	r0, [pc, #40]	@ (800aad8 <CDC_Receive_FS+0x3c>)
 800aab0:	f7fe fc7a 	bl	80093a8 <USBD_CDC_ReceivePacket>

  // main input processing
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	4808      	ldr	r0, [pc, #32]	@ (800aadc <CDC_Receive_FS+0x40>)
 800aabc:	f7f6 f858 	bl	8000b70 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	461a      	mov	r2, r3
 800aac6:	2100      	movs	r1, #0
 800aac8:	4804      	ldr	r0, [pc, #16]	@ (800aadc <CDC_Receive_FS+0x40>)
 800aaca:	f000 fd0d 	bl	800b4e8 <memset>
  return (USBD_OK);
 800aace:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	200002f4 	.word	0x200002f4
 800aadc:	200005d0 	.word	0x200005d0

0800aae0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aaf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
	...

0800ab04 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2212      	movs	r2, #18
 800ab14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ab16:	4b03      	ldr	r3, [pc, #12]	@ (800ab24 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	200000ec 	.word	0x200000ec

0800ab28 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	4603      	mov	r3, r0
 800ab30:	6039      	str	r1, [r7, #0]
 800ab32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2204      	movs	r2, #4
 800ab38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab3a:	4b03      	ldr	r3, [pc, #12]	@ (800ab48 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	20000100 	.word	0x20000100

0800ab4c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	6039      	str	r1, [r7, #0]
 800ab56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d105      	bne.n	800ab6a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	4907      	ldr	r1, [pc, #28]	@ (800ab80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab62:	4808      	ldr	r0, [pc, #32]	@ (800ab84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ab64:	f7ff fe04 	bl	800a770 <USBD_GetString>
 800ab68:	e004      	b.n	800ab74 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	4904      	ldr	r1, [pc, #16]	@ (800ab80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab6e:	4805      	ldr	r0, [pc, #20]	@ (800ab84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ab70:	f7ff fdfe 	bl	800a770 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab74:	4b02      	ldr	r3, [pc, #8]	@ (800ab80 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	200015d0 	.word	0x200015d0
 800ab84:	0800b5ac 	.word	0x0800b5ac

0800ab88 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	4904      	ldr	r1, [pc, #16]	@ (800aba8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ab98:	4804      	ldr	r0, [pc, #16]	@ (800abac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ab9a:	f7ff fde9 	bl	800a770 <USBD_GetString>
  return USBD_StrDesc;
 800ab9e:	4b02      	ldr	r3, [pc, #8]	@ (800aba8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	200015d0 	.word	0x200015d0
 800abac:	0800b5c4 	.word	0x0800b5c4

0800abb0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	6039      	str	r1, [r7, #0]
 800abba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	221a      	movs	r2, #26
 800abc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abc2:	f000 f843 	bl	800ac4c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800abc6:	4b02      	ldr	r3, [pc, #8]	@ (800abd0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20000104 	.word	0x20000104

0800abd4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	6039      	str	r1, [r7, #0]
 800abde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d105      	bne.n	800abf2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	4907      	ldr	r1, [pc, #28]	@ (800ac08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800abea:	4808      	ldr	r0, [pc, #32]	@ (800ac0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800abec:	f7ff fdc0 	bl	800a770 <USBD_GetString>
 800abf0:	e004      	b.n	800abfc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	4904      	ldr	r1, [pc, #16]	@ (800ac08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800abf6:	4805      	ldr	r0, [pc, #20]	@ (800ac0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800abf8:	f7ff fdba 	bl	800a770 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abfc:	4b02      	ldr	r3, [pc, #8]	@ (800ac08 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	200015d0 	.word	0x200015d0
 800ac0c:	0800b5d8 	.word	0x0800b5d8

0800ac10 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4907      	ldr	r1, [pc, #28]	@ (800ac44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac26:	4808      	ldr	r0, [pc, #32]	@ (800ac48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac28:	f7ff fda2 	bl	800a770 <USBD_GetString>
 800ac2c:	e004      	b.n	800ac38 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	4904      	ldr	r1, [pc, #16]	@ (800ac44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac32:	4805      	ldr	r0, [pc, #20]	@ (800ac48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac34:	f7ff fd9c 	bl	800a770 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac38:	4b02      	ldr	r3, [pc, #8]	@ (800ac44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	200015d0 	.word	0x200015d0
 800ac48:	0800b5e4 	.word	0x0800b5e4

0800ac4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac52:	4b0f      	ldr	r3, [pc, #60]	@ (800ac90 <Get_SerialNum+0x44>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac58:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <Get_SerialNum+0x48>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac98 <Get_SerialNum+0x4c>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac72:	2208      	movs	r2, #8
 800ac74:	4909      	ldr	r1, [pc, #36]	@ (800ac9c <Get_SerialNum+0x50>)
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 f814 	bl	800aca4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac7c:	2204      	movs	r2, #4
 800ac7e:	4908      	ldr	r1, [pc, #32]	@ (800aca0 <Get_SerialNum+0x54>)
 800ac80:	68b8      	ldr	r0, [r7, #8]
 800ac82:	f000 f80f 	bl	800aca4 <IntToUnicode>
  }
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	1fff7590 	.word	0x1fff7590
 800ac94:	1fff7594 	.word	0x1fff7594
 800ac98:	1fff7598 	.word	0x1fff7598
 800ac9c:	20000106 	.word	0x20000106
 800aca0:	20000116 	.word	0x20000116

0800aca4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acb6:	2300      	movs	r3, #0
 800acb8:	75fb      	strb	r3, [r7, #23]
 800acba:	e027      	b.n	800ad0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	0f1b      	lsrs	r3, r3, #28
 800acc0:	2b09      	cmp	r3, #9
 800acc2:	d80b      	bhi.n	800acdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	0f1b      	lsrs	r3, r3, #28
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	7dfb      	ldrb	r3, [r7, #23]
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4619      	mov	r1, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	440b      	add	r3, r1
 800acd4:	3230      	adds	r2, #48	@ 0x30
 800acd6:	b2d2      	uxtb	r2, r2
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	e00a      	b.n	800acf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	0f1b      	lsrs	r3, r3, #28
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	4619      	mov	r1, r3
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	440b      	add	r3, r1
 800acec:	3237      	adds	r2, #55	@ 0x37
 800acee:	b2d2      	uxtb	r2, r2
 800acf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	011b      	lsls	r3, r3, #4
 800acf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	3301      	adds	r3, #1
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	4413      	add	r3, r2
 800ad02:	2200      	movs	r2, #0
 800ad04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	75fb      	strb	r3, [r7, #23]
 800ad0c:	7dfa      	ldrb	r2, [r7, #23]
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d3d3      	bcc.n	800acbc <IntToUnicode+0x18>
  }
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <LL_AHB2_GRP1_EnableClock>:
{
 800ad22:	b480      	push	{r7}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ad2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ad3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4013      	ands	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ad46:	68fb      	ldr	r3, [r7, #12]
}
 800ad48:	bf00      	nop
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <LL_APB1_GRP1_EnableClock>:
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ad5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ad6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4013      	ands	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ad78:	68fb      	ldr	r3, [r7, #12]
}
 800ad7a:	bf00      	nop
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
	...

0800ad88 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b09c      	sub	sp, #112	@ 0x70
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	605a      	str	r2, [r3, #4]
 800ad9a:	609a      	str	r2, [r3, #8]
 800ad9c:	60da      	str	r2, [r3, #12]
 800ad9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ada0:	f107 030c 	add.w	r3, r7, #12
 800ada4:	2250      	movs	r2, #80	@ 0x50
 800ada6:	2100      	movs	r1, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 fb9d 	bl	800b4e8 <memset>
  if(pcdHandle->Instance==USB)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a23      	ldr	r2, [pc, #140]	@ (800ae40 <HAL_PCD_MspInit+0xb8>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d13e      	bne.n	800ae36 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800adb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adbc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800adbe:	2318      	movs	r3, #24
 800adc0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800adc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800adc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800adc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800adcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800adce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800add2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800add4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800add8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800adda:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800adde:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ade0:	f107 030c 	add.w	r3, r7, #12
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fa fac3 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800adf0:	f7f5 ff14 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adf4:	2001      	movs	r0, #1
 800adf6:	f7ff ff94 	bl	800ad22 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800adfa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800adfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae00:	2302      	movs	r3, #2
 800ae02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae04:	2300      	movs	r3, #0
 800ae06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ae0c:	230a      	movs	r3, #10
 800ae0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800ae14:	4619      	mov	r1, r3
 800ae16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ae1a:	f7f6 fa65 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae1e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800ae22:	f7ff ff97 	bl	800ad54 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae26:	2200      	movs	r2, #0
 800ae28:	2100      	movs	r1, #0
 800ae2a:	2014      	movs	r0, #20
 800ae2c:	f7f6 fa27 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae30:	2014      	movs	r0, #20
 800ae32:	f7f6 fa3e 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae36:	bf00      	nop
 800ae38:	3770      	adds	r7, #112	@ 0x70
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	40006800 	.word	0x40006800

0800ae44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4610      	mov	r0, r2
 800ae5c:	f7fe fb8d 	bl	800957a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ae7a:	78fa      	ldrb	r2, [r7, #3]
 800ae7c:	6879      	ldr	r1, [r7, #4]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	440b      	add	r3, r1
 800ae88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	78fb      	ldrb	r3, [r7, #3]
 800ae90:	4619      	mov	r1, r3
 800ae92:	f7fe fbc7 	bl	8009624 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae96:	bf00      	nop
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b082      	sub	sp, #8
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	460b      	mov	r3, r1
 800aea8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aeb0:	78fa      	ldrb	r2, [r7, #3]
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	440b      	add	r3, r1
 800aebe:	3324      	adds	r3, #36	@ 0x24
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	78fb      	ldrb	r3, [r7, #3]
 800aec4:	4619      	mov	r1, r3
 800aec6:	f7fe fc60 	bl	800978a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fe fd9a 	bl	8009a1a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aee6:	bf00      	nop
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aef6:	2301      	movs	r3, #1
 800aef8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	795b      	ldrb	r3, [r3, #5]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d001      	beq.n	800af06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af02:	f7f5 fe8b 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af0c:	7bfa      	ldrb	r2, [r7, #15]
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fd3e 	bl	8009992 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe fce6 	bl	80098ee <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af22:	bf00      	nop
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fd39 	bl	80099b2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7a5b      	ldrb	r3, [r3, #9]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af48:	4b04      	ldr	r3, [pc, #16]	@ (800af5c <HAL_PCD_SuspendCallback+0x30>)
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	4a03      	ldr	r2, [pc, #12]	@ (800af5c <HAL_PCD_SuspendCallback+0x30>)
 800af4e:	f043 0306 	orr.w	r3, r3, #6
 800af52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	e000ed00 	.word	0xe000ed00

0800af60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7a5b      	ldrb	r3, [r3, #9]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d007      	beq.n	800af80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af70:	4b08      	ldr	r3, [pc, #32]	@ (800af94 <HAL_PCD_ResumeCallback+0x34>)
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	4a07      	ldr	r2, [pc, #28]	@ (800af94 <HAL_PCD_ResumeCallback+0x34>)
 800af76:	f023 0306 	bic.w	r3, r3, #6
 800af7a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af7c:	f000 f9fa 	bl	800b374 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe fd2f 	bl	80099ea <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	e000ed00 	.word	0xe000ed00

0800af98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800afa0:	4a2c      	ldr	r2, [pc, #176]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a2a      	ldr	r2, [pc, #168]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800afb0:	f7f8 fe96 	bl	8003ce0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800afb4:	4b27      	ldr	r3, [pc, #156]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afb6:	4a28      	ldr	r2, [pc, #160]	@ (800b058 <USBD_LL_Init+0xc0>)
 800afb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afba:	4b26      	ldr	r3, [pc, #152]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afbc:	2208      	movs	r2, #8
 800afbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afc0:	4b24      	ldr	r3, [pc, #144]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afc2:	2202      	movs	r2, #2
 800afc4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afc6:	4b23      	ldr	r3, [pc, #140]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afc8:	2202      	movs	r2, #2
 800afca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afcc:	4b21      	ldr	r3, [pc, #132]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afce:	2200      	movs	r2, #0
 800afd0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afd2:	4b20      	ldr	r3, [pc, #128]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afd8:	4b1e      	ldr	r3, [pc, #120]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afda:	2200      	movs	r2, #0
 800afdc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afde:	4b1d      	ldr	r3, [pc, #116]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afe4:	481b      	ldr	r0, [pc, #108]	@ (800b054 <USBD_LL_Init+0xbc>)
 800afe6:	f7f7 f92a 	bl	800223e <HAL_PCD_Init>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800aff0:	f7f5 fe14 	bl	8000c1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800affa:	2318      	movs	r3, #24
 800affc:	2200      	movs	r2, #0
 800affe:	2100      	movs	r1, #0
 800b000:	f7f8 fde3 	bl	8003bca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b00a:	2358      	movs	r3, #88	@ 0x58
 800b00c:	2200      	movs	r2, #0
 800b00e:	2180      	movs	r1, #128	@ 0x80
 800b010:	f7f8 fddb 	bl	8003bca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b01a:	23c0      	movs	r3, #192	@ 0xc0
 800b01c:	2200      	movs	r2, #0
 800b01e:	2181      	movs	r1, #129	@ 0x81
 800b020:	f7f8 fdd3 	bl	8003bca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b02a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b02e:	2200      	movs	r2, #0
 800b030:	2101      	movs	r1, #1
 800b032:	f7f8 fdca 	bl	8003bca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b03c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b040:	2200      	movs	r2, #0
 800b042:	2182      	movs	r1, #130	@ 0x82
 800b044:	f7f8 fdc1 	bl	8003bca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	200017d0 	.word	0x200017d0
 800b058:	40006800 	.word	0x40006800

0800b05c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b072:	4618      	mov	r0, r3
 800b074:	f7f7 f9b1 	bl	80023da <HAL_PCD_Start>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f97e 	bl	800b380 <USBD_Get_USB_Status>
 800b084:	4603      	mov	r3, r0
 800b086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b088:	7bbb      	ldrb	r3, [r7, #14]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	4608      	mov	r0, r1
 800b09c:	4611      	mov	r1, r2
 800b09e:	461a      	mov	r2, r3
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	70fb      	strb	r3, [r7, #3]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	70bb      	strb	r3, [r7, #2]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b0ba:	78bb      	ldrb	r3, [r7, #2]
 800b0bc:	883a      	ldrh	r2, [r7, #0]
 800b0be:	78f9      	ldrb	r1, [r7, #3]
 800b0c0:	f7f7 faf8 	bl	80026b4 <HAL_PCD_EP_Open>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f958 	bl	800b380 <USBD_Get_USB_Status>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7f7 fb36 	bl	800276e <HAL_PCD_EP_Close>
 800b102:	4603      	mov	r3, r0
 800b104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 f939 	bl	800b380 <USBD_Get_USB_Status>
 800b10e:	4603      	mov	r3, r0
 800b110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b112:	7bbb      	ldrb	r3, [r7, #14]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7f7 fbdf 	bl	80028fe <HAL_PCD_EP_SetStall>
 800b140:	4603      	mov	r3, r0
 800b142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	4618      	mov	r0, r3
 800b148:	f000 f91a 	bl	800b380 <USBD_Get_USB_Status>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b150:	7bbb      	ldrb	r3, [r7, #14]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	460b      	mov	r3, r1
 800b164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b174:	78fa      	ldrb	r2, [r7, #3]
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f7f7 fc12 	bl	80029a2 <HAL_PCD_EP_ClrStall>
 800b17e:	4603      	mov	r3, r0
 800b180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	4618      	mov	r0, r3
 800b186:	f000 f8fb 	bl	800b380 <USBD_Get_USB_Status>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	da0b      	bge.n	800b1cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3312      	adds	r3, #18
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	e00b      	b.n	800b1e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1d2:	68f9      	ldr	r1, [r7, #12]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	440b      	add	r3, r1
 800b1de:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b1e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b20a:	78fa      	ldrb	r2, [r7, #3]
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f7f7 fa2c 	bl	800266c <HAL_PCD_SetAddress>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 f8b0 	bl	800b380 <USBD_Get_USB_Status>
 800b220:	4603      	mov	r3, r0
 800b222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b224:	7bbb      	ldrb	r3, [r7, #14]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b086      	sub	sp, #24
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
 800b23a:	460b      	mov	r3, r1
 800b23c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b24c:	7af9      	ldrb	r1, [r7, #11]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	f7f7 fb1d 	bl	8002890 <HAL_PCD_EP_Transmit>
 800b256:	4603      	mov	r3, r0
 800b258:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 f88f 	bl	800b380 <USBD_Get_USB_Status>
 800b262:	4603      	mov	r3, r0
 800b264:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b266:	7dbb      	ldrb	r3, [r7, #22]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	607a      	str	r2, [r7, #4]
 800b27a:	603b      	str	r3, [r7, #0]
 800b27c:	460b      	mov	r3, r1
 800b27e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b28e:	7af9      	ldrb	r1, [r7, #11]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	f7f7 fab3 	bl	80027fe <HAL_PCD_EP_Receive>
 800b298:	4603      	mov	r3, r0
 800b29a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 f86e 	bl	800b380 <USBD_Get_USB_Status>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2c4:	78fa      	ldrb	r2, [r7, #3]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7f7 fac9 	bl	8002860 <HAL_PCD_EP_GetRxCount>
 800b2ce:	4603      	mov	r3, r0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2e4:	78fb      	ldrb	r3, [r7, #3]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <HAL_PCDEx_LPM_Callback+0x18>
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d013      	beq.n	800b316 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2ee:	e023      	b.n	800b338 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	7a5b      	ldrb	r3, [r3, #9]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d007      	beq.n	800b308 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2f8:	f000 f83c 	bl	800b374 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2fc:	4b10      	ldr	r3, [pc, #64]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	4a0f      	ldr	r2, [pc, #60]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b302:	f023 0306 	bic.w	r3, r3, #6
 800b306:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fb6b 	bl	80099ea <USBD_LL_Resume>
    break;
 800b314:	e010      	b.n	800b338 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe fb48 	bl	80099b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7a5b      	ldrb	r3, [r3, #9]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b32a:	4b05      	ldr	r3, [pc, #20]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	4a04      	ldr	r2, [pc, #16]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b330:	f043 0306 	orr.w	r3, r3, #6
 800b334:	6113      	str	r3, [r2, #16]
    break;
 800b336:	bf00      	nop
}
 800b338:	bf00      	nop
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	e000ed00 	.word	0xe000ed00

0800b344 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b34c:	4b03      	ldr	r3, [pc, #12]	@ (800b35c <USBD_static_malloc+0x18>)
}
 800b34e:	4618      	mov	r0, r3
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20001aac 	.word	0x20001aac

0800b360 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b378:	f7f5 fa82 	bl	8000880 <SystemClock_Config>
}
 800b37c:	bf00      	nop
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	2b03      	cmp	r3, #3
 800b392:	d817      	bhi.n	800b3c4 <USBD_Get_USB_Status+0x44>
 800b394:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <USBD_Get_USB_Status+0x1c>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b3ad 	.word	0x0800b3ad
 800b3a0:	0800b3b3 	.word	0x0800b3b3
 800b3a4:	0800b3b9 	.word	0x0800b3b9
 800b3a8:	0800b3bf 	.word	0x0800b3bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b0:	e00b      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b6:	e008      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b3bc:	e005      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c2:	e002      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c8:	bf00      	nop
  }
  return usb_status;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <atoi>:
 800b3d8:	220a      	movs	r2, #10
 800b3da:	2100      	movs	r1, #0
 800b3dc:	f000 b87a 	b.w	800b4d4 <strtol>

0800b3e0 <_strtol_l.constprop.0>:
 800b3e0:	2b24      	cmp	r3, #36	@ 0x24
 800b3e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e6:	4686      	mov	lr, r0
 800b3e8:	4690      	mov	r8, r2
 800b3ea:	d801      	bhi.n	800b3f0 <_strtol_l.constprop.0+0x10>
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d106      	bne.n	800b3fe <_strtol_l.constprop.0+0x1e>
 800b3f0:	f000 f882 	bl	800b4f8 <__errno>
 800b3f4:	2316      	movs	r3, #22
 800b3f6:	6003      	str	r3, [r0, #0]
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fe:	4834      	ldr	r0, [pc, #208]	@ (800b4d0 <_strtol_l.constprop.0+0xf0>)
 800b400:	460d      	mov	r5, r1
 800b402:	462a      	mov	r2, r5
 800b404:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b408:	5d06      	ldrb	r6, [r0, r4]
 800b40a:	f016 0608 	ands.w	r6, r6, #8
 800b40e:	d1f8      	bne.n	800b402 <_strtol_l.constprop.0+0x22>
 800b410:	2c2d      	cmp	r4, #45	@ 0x2d
 800b412:	d12d      	bne.n	800b470 <_strtol_l.constprop.0+0x90>
 800b414:	782c      	ldrb	r4, [r5, #0]
 800b416:	2601      	movs	r6, #1
 800b418:	1c95      	adds	r5, r2, #2
 800b41a:	f033 0210 	bics.w	r2, r3, #16
 800b41e:	d109      	bne.n	800b434 <_strtol_l.constprop.0+0x54>
 800b420:	2c30      	cmp	r4, #48	@ 0x30
 800b422:	d12a      	bne.n	800b47a <_strtol_l.constprop.0+0x9a>
 800b424:	782a      	ldrb	r2, [r5, #0]
 800b426:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b42a:	2a58      	cmp	r2, #88	@ 0x58
 800b42c:	d125      	bne.n	800b47a <_strtol_l.constprop.0+0x9a>
 800b42e:	786c      	ldrb	r4, [r5, #1]
 800b430:	2310      	movs	r3, #16
 800b432:	3502      	adds	r5, #2
 800b434:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b438:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b43c:	2200      	movs	r2, #0
 800b43e:	fbbc f9f3 	udiv	r9, ip, r3
 800b442:	4610      	mov	r0, r2
 800b444:	fb03 ca19 	mls	sl, r3, r9, ip
 800b448:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b44c:	2f09      	cmp	r7, #9
 800b44e:	d81b      	bhi.n	800b488 <_strtol_l.constprop.0+0xa8>
 800b450:	463c      	mov	r4, r7
 800b452:	42a3      	cmp	r3, r4
 800b454:	dd27      	ble.n	800b4a6 <_strtol_l.constprop.0+0xc6>
 800b456:	1c57      	adds	r7, r2, #1
 800b458:	d007      	beq.n	800b46a <_strtol_l.constprop.0+0x8a>
 800b45a:	4581      	cmp	r9, r0
 800b45c:	d320      	bcc.n	800b4a0 <_strtol_l.constprop.0+0xc0>
 800b45e:	d101      	bne.n	800b464 <_strtol_l.constprop.0+0x84>
 800b460:	45a2      	cmp	sl, r4
 800b462:	db1d      	blt.n	800b4a0 <_strtol_l.constprop.0+0xc0>
 800b464:	fb00 4003 	mla	r0, r0, r3, r4
 800b468:	2201      	movs	r2, #1
 800b46a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b46e:	e7eb      	b.n	800b448 <_strtol_l.constprop.0+0x68>
 800b470:	2c2b      	cmp	r4, #43	@ 0x2b
 800b472:	bf04      	itt	eq
 800b474:	782c      	ldrbeq	r4, [r5, #0]
 800b476:	1c95      	addeq	r5, r2, #2
 800b478:	e7cf      	b.n	800b41a <_strtol_l.constprop.0+0x3a>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1da      	bne.n	800b434 <_strtol_l.constprop.0+0x54>
 800b47e:	2c30      	cmp	r4, #48	@ 0x30
 800b480:	bf0c      	ite	eq
 800b482:	2308      	moveq	r3, #8
 800b484:	230a      	movne	r3, #10
 800b486:	e7d5      	b.n	800b434 <_strtol_l.constprop.0+0x54>
 800b488:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b48c:	2f19      	cmp	r7, #25
 800b48e:	d801      	bhi.n	800b494 <_strtol_l.constprop.0+0xb4>
 800b490:	3c37      	subs	r4, #55	@ 0x37
 800b492:	e7de      	b.n	800b452 <_strtol_l.constprop.0+0x72>
 800b494:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b498:	2f19      	cmp	r7, #25
 800b49a:	d804      	bhi.n	800b4a6 <_strtol_l.constprop.0+0xc6>
 800b49c:	3c57      	subs	r4, #87	@ 0x57
 800b49e:	e7d8      	b.n	800b452 <_strtol_l.constprop.0+0x72>
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	e7e1      	b.n	800b46a <_strtol_l.constprop.0+0x8a>
 800b4a6:	1c53      	adds	r3, r2, #1
 800b4a8:	d108      	bne.n	800b4bc <_strtol_l.constprop.0+0xdc>
 800b4aa:	2322      	movs	r3, #34	@ 0x22
 800b4ac:	f8ce 3000 	str.w	r3, [lr]
 800b4b0:	4660      	mov	r0, ip
 800b4b2:	f1b8 0f00 	cmp.w	r8, #0
 800b4b6:	d0a0      	beq.n	800b3fa <_strtol_l.constprop.0+0x1a>
 800b4b8:	1e69      	subs	r1, r5, #1
 800b4ba:	e006      	b.n	800b4ca <_strtol_l.constprop.0+0xea>
 800b4bc:	b106      	cbz	r6, 800b4c0 <_strtol_l.constprop.0+0xe0>
 800b4be:	4240      	negs	r0, r0
 800b4c0:	f1b8 0f00 	cmp.w	r8, #0
 800b4c4:	d099      	beq.n	800b3fa <_strtol_l.constprop.0+0x1a>
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	d1f6      	bne.n	800b4b8 <_strtol_l.constprop.0+0xd8>
 800b4ca:	f8c8 1000 	str.w	r1, [r8]
 800b4ce:	e794      	b.n	800b3fa <_strtol_l.constprop.0+0x1a>
 800b4d0:	0800b6bd 	.word	0x0800b6bd

0800b4d4 <strtol>:
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	460a      	mov	r2, r1
 800b4d8:	4601      	mov	r1, r0
 800b4da:	4802      	ldr	r0, [pc, #8]	@ (800b4e4 <strtol+0x10>)
 800b4dc:	6800      	ldr	r0, [r0, #0]
 800b4de:	f7ff bf7f 	b.w	800b3e0 <_strtol_l.constprop.0>
 800b4e2:	bf00      	nop
 800b4e4:	20000120 	.word	0x20000120

0800b4e8 <memset>:
 800b4e8:	4402      	add	r2, r0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d100      	bne.n	800b4f2 <memset+0xa>
 800b4f0:	4770      	bx	lr
 800b4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f6:	e7f9      	b.n	800b4ec <memset+0x4>

0800b4f8 <__errno>:
 800b4f8:	4b01      	ldr	r3, [pc, #4]	@ (800b500 <__errno+0x8>)
 800b4fa:	6818      	ldr	r0, [r3, #0]
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	20000120 	.word	0x20000120

0800b504 <__libc_init_array>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	4d0d      	ldr	r5, [pc, #52]	@ (800b53c <__libc_init_array+0x38>)
 800b508:	4c0d      	ldr	r4, [pc, #52]	@ (800b540 <__libc_init_array+0x3c>)
 800b50a:	1b64      	subs	r4, r4, r5
 800b50c:	10a4      	asrs	r4, r4, #2
 800b50e:	2600      	movs	r6, #0
 800b510:	42a6      	cmp	r6, r4
 800b512:	d109      	bne.n	800b528 <__libc_init_array+0x24>
 800b514:	4d0b      	ldr	r5, [pc, #44]	@ (800b544 <__libc_init_array+0x40>)
 800b516:	4c0c      	ldr	r4, [pc, #48]	@ (800b548 <__libc_init_array+0x44>)
 800b518:	f000 f826 	bl	800b568 <_init>
 800b51c:	1b64      	subs	r4, r4, r5
 800b51e:	10a4      	asrs	r4, r4, #2
 800b520:	2600      	movs	r6, #0
 800b522:	42a6      	cmp	r6, r4
 800b524:	d105      	bne.n	800b532 <__libc_init_array+0x2e>
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	f855 3b04 	ldr.w	r3, [r5], #4
 800b52c:	4798      	blx	r3
 800b52e:	3601      	adds	r6, #1
 800b530:	e7ee      	b.n	800b510 <__libc_init_array+0xc>
 800b532:	f855 3b04 	ldr.w	r3, [r5], #4
 800b536:	4798      	blx	r3
 800b538:	3601      	adds	r6, #1
 800b53a:	e7f2      	b.n	800b522 <__libc_init_array+0x1e>
 800b53c:	0800b7c8 	.word	0x0800b7c8
 800b540:	0800b7c8 	.word	0x0800b7c8
 800b544:	0800b7c8 	.word	0x0800b7c8
 800b548:	0800b7cc 	.word	0x0800b7cc

0800b54c <memcpy>:
 800b54c:	440a      	add	r2, r1
 800b54e:	4291      	cmp	r1, r2
 800b550:	f100 33ff 	add.w	r3, r0, #4294967295
 800b554:	d100      	bne.n	800b558 <memcpy+0xc>
 800b556:	4770      	bx	lr
 800b558:	b510      	push	{r4, lr}
 800b55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b562:	4291      	cmp	r1, r2
 800b564:	d1f9      	bne.n	800b55a <memcpy+0xe>
 800b566:	bd10      	pop	{r4, pc}

0800b568 <_init>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr

0800b574 <_fini>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	bf00      	nop
 800b578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b57a:	bc08      	pop	{r3}
 800b57c:	469e      	mov	lr, r3
 800b57e:	4770      	bx	lr
